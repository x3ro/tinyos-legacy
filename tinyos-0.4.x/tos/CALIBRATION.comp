/*									tab:4
 * CALIBRATION.comp
 *
 * "Copyright (c) 2001 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:		Sam Madden
 
	Stores calibration information for sensors in the EEPROM.
	Each sensor requires 2^(byte_ceil(bitspersample)) bits of EEPROM.
	
 */

TOS_MODULE CALIBRATION;	

JOINTLY IMPLEMENTED_BY CALIBRATION;

ACCEPTS{
	char CALIB_INIT();
	char CALIB_START();
	char CALIB_INIT_SENSOR(int sid, int bitsPerEntry);
	char ZERO_DATA(int sid);
	char ADD_READING(int sid, int key, short value);
	char INTERPOLATE(int sid);
	char LOOKUP(int sid, int key);

};

SIGNALS{
	char ADD_DONE(void);
	char LOOKUP_DONE(short value);
	char ZERO_DONE(void);
	char INTERP_DONE(void);
	
};

USES{
	char CALIB_EEPROM_WRITE(int line, char *data);
	char CALIB_EEPROM_READ(int line, char *dest);
	char CALIB_INIT_SUB();
	char CALIB_CLOCK_INIT(char data, char scale);
	char CALIB_SUB_SEND_MSG(short addr,char type, TOS_MsgPtr data);
	char CALIB_RED_LED();
	char CALIB_GREEN_LED();
	char CALIB_YELLOW_LED();

};

HANDLES{
	char WRITE_DONE(char success);
	char READ_DONE(char *data, char success);
	TOS_MsgPtr CALIBRATION_REQUEST(TOS_MsgPtr msg);		
	char CALIB_SUB_MSG_SEND_DONE(TOS_MsgPtr msg);
	 char SEND_READING(short data);
	char SEND_ACK(void);
	void CALIB_CLOCK_EVENT();
};






