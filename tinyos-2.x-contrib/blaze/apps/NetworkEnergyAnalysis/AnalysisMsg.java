/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AnalysisMsg'
 * message type.
 */

public class AnalysisMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 7;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 5;

    /** Create a new AnalysisMsg of size 7. */
    public AnalysisMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AnalysisMsg of the given data_length. */
    public AnalysisMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg with the given data_length
     * and base offset.
     */
    public AnalysisMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg using the given byte array
     * as backing store.
     */
    public AnalysisMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AnalysisMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AnalysisMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg embedded in the given message
     * at the given base offset.
     */
    public AnalysisMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AnalysisMsg embedded in the given message
     * at the given base offset and length.
     */
    public AnalysisMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AnalysisMsg> \n";
      try {
        s += "  [intervalBetweenMessagesMs=0x"+Long.toHexString(get_intervalBetweenMessagesMs())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [worInterval=0x"+Long.toHexString(get_worInterval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodesInSurroundingNetwork=0x"+Long.toHexString(get_nodesInSurroundingNetwork())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: intervalBetweenMessagesMs
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'intervalBetweenMessagesMs' is signed (false).
     */
    public static boolean isSigned_intervalBetweenMessagesMs() {
        return false;
    }

    /**
     * Return whether the field 'intervalBetweenMessagesMs' is an array (false).
     */
    public static boolean isArray_intervalBetweenMessagesMs() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'intervalBetweenMessagesMs'
     */
    public static int offset_intervalBetweenMessagesMs() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'intervalBetweenMessagesMs'
     */
    public static int offsetBits_intervalBetweenMessagesMs() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'intervalBetweenMessagesMs'
     */
    public long get_intervalBetweenMessagesMs() {
        return (long)getUIntBEElement(offsetBits_intervalBetweenMessagesMs(), 32);
    }

    /**
     * Set the value of the field 'intervalBetweenMessagesMs'
     */
    public void set_intervalBetweenMessagesMs(long value) {
        setUIntBEElement(offsetBits_intervalBetweenMessagesMs(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'intervalBetweenMessagesMs'
     */
    public static int size_intervalBetweenMessagesMs() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'intervalBetweenMessagesMs'
     */
    public static int sizeBits_intervalBetweenMessagesMs() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: worInterval
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'worInterval' is signed (false).
     */
    public static boolean isSigned_worInterval() {
        return false;
    }

    /**
     * Return whether the field 'worInterval' is an array (false).
     */
    public static boolean isArray_worInterval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'worInterval'
     */
    public static int offset_worInterval() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'worInterval'
     */
    public static int offsetBits_worInterval() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'worInterval'
     */
    public int get_worInterval() {
        return (int)getUIntBEElement(offsetBits_worInterval(), 16);
    }

    /**
     * Set the value of the field 'worInterval'
     */
    public void set_worInterval(int value) {
        setUIntBEElement(offsetBits_worInterval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'worInterval'
     */
    public static int size_worInterval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'worInterval'
     */
    public static int sizeBits_worInterval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodesInSurroundingNetwork
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodesInSurroundingNetwork' is signed (false).
     */
    public static boolean isSigned_nodesInSurroundingNetwork() {
        return false;
    }

    /**
     * Return whether the field 'nodesInSurroundingNetwork' is an array (false).
     */
    public static boolean isArray_nodesInSurroundingNetwork() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodesInSurroundingNetwork'
     */
    public static int offset_nodesInSurroundingNetwork() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodesInSurroundingNetwork'
     */
    public static int offsetBits_nodesInSurroundingNetwork() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'nodesInSurroundingNetwork'
     */
    public short get_nodesInSurroundingNetwork() {
        return (short)getUIntBEElement(offsetBits_nodesInSurroundingNetwork(), 8);
    }

    /**
     * Set the value of the field 'nodesInSurroundingNetwork'
     */
    public void set_nodesInSurroundingNetwork(short value) {
        setUIntBEElement(offsetBits_nodesInSurroundingNetwork(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodesInSurroundingNetwork'
     */
    public static int size_nodesInSurroundingNetwork() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodesInSurroundingNetwork'
     */
    public static int sizeBits_nodesInSurroundingNetwork() {
        return 8;
    }

}
