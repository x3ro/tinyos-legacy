#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'UdpMeasurement'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 15

# The Active Message type associated with this message.
AM_TYPE = -1

class UdpMeasurement(tinyos.message.Message.Message):
    # Create a new UdpMeasurement of size 15.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=15):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <UdpMeasurement> \n"
        try:
            s += "  [seqno=0x%x]\n" % (self.get_seqno())
        except:
            pass
        try:
            s += "  [sender=0x%x]\n" % (self.get_sender())
        except:
            pass
        try:
            s += "  [temp=0x%x]\n" % (self.get_temp())
        except:
            pass
        try:
            s += "  [hum=0x%x]\n" % (self.get_hum())
        except:
            pass
        try:
            s += "  [volt=0x%x]\n" % (self.get_volt())
        except:
            pass
        try:
            s += "  [tsr=0x%x]\n" % (self.get_tsr())
        except:
            pass
        try:
            s += "  [par=0x%x]\n" % (self.get_par())
        except:
            pass
        try:
            s += "  [valid=0x%x]\n" % (self.get_valid())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: seqno
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'seqno' is signed (False).
    #
    def isSigned_seqno(self):
        return False
    
    #
    # Return whether the field 'seqno' is an array (False).
    #
    def isArray_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqno'
    #
    def offset_seqno(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqno'
    #
    def offsetBits_seqno(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'seqno'
    #
    def get_seqno(self):
        return self.getUIntElement(self.offsetBits_seqno(), 16, 1)
    
    #
    # Set the value of the field 'seqno'
    #
    def set_seqno(self, value):
        self.setUIntElement(self.offsetBits_seqno(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqno'
    #
    def size_seqno(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'seqno'
    #
    def sizeBits_seqno(self):
        return 16
    
    #
    # Accessor methods for field: sender
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sender' is signed (False).
    #
    def isSigned_sender(self):
        return False
    
    #
    # Return whether the field 'sender' is an array (False).
    #
    def isArray_sender(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sender'
    #
    def offset_sender(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'sender'
    #
    def offsetBits_sender(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'sender'
    #
    def get_sender(self):
        return self.getUIntElement(self.offsetBits_sender(), 16, 1)
    
    #
    # Set the value of the field 'sender'
    #
    def set_sender(self, value):
        self.setUIntElement(self.offsetBits_sender(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sender'
    #
    def size_sender(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sender'
    #
    def sizeBits_sender(self):
        return 16
    
    #
    # Accessor methods for field: temp
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temp' is signed (False).
    #
    def isSigned_temp(self):
        return False
    
    #
    # Return whether the field 'temp' is an array (False).
    #
    def isArray_temp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temp'
    #
    def offset_temp(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'temp'
    #
    def offsetBits_temp(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'temp'
    #
    def get_temp(self):
        return self.getUIntElement(self.offsetBits_temp(), 16, 1)
    
    #
    # Set the value of the field 'temp'
    #
    def set_temp(self, value):
        self.setUIntElement(self.offsetBits_temp(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temp'
    #
    def size_temp(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temp'
    #
    def sizeBits_temp(self):
        return 16
    
    #
    # Accessor methods for field: hum
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'hum' is signed (False).
    #
    def isSigned_hum(self):
        return False
    
    #
    # Return whether the field 'hum' is an array (False).
    #
    def isArray_hum(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'hum'
    #
    def offset_hum(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'hum'
    #
    def offsetBits_hum(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'hum'
    #
    def get_hum(self):
        return self.getUIntElement(self.offsetBits_hum(), 16, 1)
    
    #
    # Set the value of the field 'hum'
    #
    def set_hum(self, value):
        self.setUIntElement(self.offsetBits_hum(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'hum'
    #
    def size_hum(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'hum'
    #
    def sizeBits_hum(self):
        return 16
    
    #
    # Accessor methods for field: volt
    #   Field type: int
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'volt' is signed (False).
    #
    def isSigned_volt(self):
        return False
    
    #
    # Return whether the field 'volt' is an array (False).
    #
    def isArray_volt(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'volt'
    #
    def offset_volt(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'volt'
    #
    def offsetBits_volt(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'volt'
    #
    def get_volt(self):
        return self.getUIntElement(self.offsetBits_volt(), 16, 1)
    
    #
    # Set the value of the field 'volt'
    #
    def set_volt(self, value):
        self.setUIntElement(self.offsetBits_volt(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'volt'
    #
    def size_volt(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'volt'
    #
    def sizeBits_volt(self):
        return 16
    
    #
    # Accessor methods for field: tsr
    #   Field type: int
    #   Offset (bits): 80
    #   Size (bits): 16
    #

    #
    # Return whether the field 'tsr' is signed (False).
    #
    def isSigned_tsr(self):
        return False
    
    #
    # Return whether the field 'tsr' is an array (False).
    #
    def isArray_tsr(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'tsr'
    #
    def offset_tsr(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'tsr'
    #
    def offsetBits_tsr(self):
        return 80
    
    #
    # Return the value (as a int) of the field 'tsr'
    #
    def get_tsr(self):
        return self.getUIntElement(self.offsetBits_tsr(), 16, 1)
    
    #
    # Set the value of the field 'tsr'
    #
    def set_tsr(self, value):
        self.setUIntElement(self.offsetBits_tsr(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'tsr'
    #
    def size_tsr(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'tsr'
    #
    def sizeBits_tsr(self):
        return 16
    
    #
    # Accessor methods for field: par
    #   Field type: int
    #   Offset (bits): 96
    #   Size (bits): 16
    #

    #
    # Return whether the field 'par' is signed (False).
    #
    def isSigned_par(self):
        return False
    
    #
    # Return whether the field 'par' is an array (False).
    #
    def isArray_par(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'par'
    #
    def offset_par(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'par'
    #
    def offsetBits_par(self):
        return 96
    
    #
    # Return the value (as a int) of the field 'par'
    #
    def get_par(self):
        return self.getUIntElement(self.offsetBits_par(), 16, 1)
    
    #
    # Set the value of the field 'par'
    #
    def set_par(self, value):
        self.setUIntElement(self.offsetBits_par(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'par'
    #
    def size_par(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'par'
    #
    def sizeBits_par(self):
        return 16
    
    #
    # Accessor methods for field: valid
    #   Field type: short
    #   Offset (bits): 112
    #   Size (bits): 8
    #

    #
    # Return whether the field 'valid' is signed (False).
    #
    def isSigned_valid(self):
        return False
    
    #
    # Return whether the field 'valid' is an array (False).
    #
    def isArray_valid(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'valid'
    #
    def offset_valid(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'valid'
    #
    def offsetBits_valid(self):
        return 112
    
    #
    # Return the value (as a short) of the field 'valid'
    #
    def get_valid(self):
        return self.getUIntElement(self.offsetBits_valid(), 8, 1)
    
    #
    # Set the value of the field 'valid'
    #
    def set_valid(self, value):
        self.setUIntElement(self.offsetBits_valid(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'valid'
    #
    def size_valid(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'valid'
    #
    def sizeBits_valid(self):
        return 8
    
