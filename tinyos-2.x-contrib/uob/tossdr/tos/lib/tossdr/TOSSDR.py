# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _TOSSDR
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Packet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_Packet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_Packet
    __del__ = lambda self : None;
    def setSource(*args): return _TOSSDR.Packet_setSource(*args)
    def source(*args): return _TOSSDR.Packet_source(*args)
    def setDestination(*args): return _TOSSDR.Packet_setDestination(*args)
    def destination(*args): return _TOSSDR.Packet_destination(*args)
    def setLength(*args): return _TOSSDR.Packet_setLength(*args)
    def length(*args): return _TOSSDR.Packet_length(*args)
    def setType(*args): return _TOSSDR.Packet_setType(*args)
    def type(*args): return _TOSSDR.Packet_type(*args)
    def data(*args): return _TOSSDR.Packet_data(*args)
    def setData(*args): return _TOSSDR.Packet_setData(*args)
    def maxLength(*args): return _TOSSDR.Packet_maxLength(*args)
    def setStrength(*args): return _TOSSDR.Packet_setStrength(*args)
    def deliver(*args): return _TOSSDR.Packet_deliver(*args)
    def deliverNow(*args): return _TOSSDR.Packet_deliverNow(*args)
Packet_swigregister = _TOSSDR.Packet_swigregister
Packet_swigregister(Packet)

class TossimSync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TossimSync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TossimSync, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_TossimSync(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_TossimSync
    __del__ = lambda self : None;
    def waitUntilNextEvent(*args): return _TOSSDR.TossimSync_waitUntilNextEvent(*args)
    def runNextEventInTime(*args): return _TOSSDR.TossimSync_runNextEventInTime(*args)
    def waitUntilNextEvent_NoGil(*args): return _TOSSDR.TossimSync_waitUntilNextEvent_NoGil(*args)
    def runNextEvent_NoGil(*args): return _TOSSDR.TossimSync_runNextEvent_NoGil(*args)
    def simTime(*args): return _TOSSDR.TossimSync_simTime(*args)
    def realTime(*args): return _TOSSDR.TossimSync_realTime(*args)
    def syncTime(*args): return _TOSSDR.TossimSync_syncTime(*args)
    def syncTo(*args): return _TOSSDR.TossimSync_syncTo(*args)
    def syncToNow(*args): return _TOSSDR.TossimSync_syncToNow(*args)
TossimSync_swigregister = _TOSSDR.TossimSync_swigregister
TossimSync_swigregister(TossimSync)

class TosSdrInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TosSdrInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TosSdrInterface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_TosSdrInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_TosSdrInterface
    __del__ = lambda self : None;
    def data2SdrDone(*args): return _TOSSDR.TosSdrInterface_data2SdrDone(*args)
    def receive(*args): return _TOSSDR.TosSdrInterface_receive(*args)
TosSdrInterface_swigregister = _TOSSDR.TosSdrInterface_swigregister
TosSdrInterface_swigregister(TosSdrInterface)

class variable_string_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, variable_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, variable_string_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _TOSSDR.variable_string_t_type_set
    __swig_getmethods__["type"] = _TOSSDR.variable_string_t_type_get
    if _newclass:type = _swig_property(_TOSSDR.variable_string_t_type_get, _TOSSDR.variable_string_t_type_set)
    __swig_setmethods__["ptr"] = _TOSSDR.variable_string_t_ptr_set
    __swig_getmethods__["ptr"] = _TOSSDR.variable_string_t_ptr_get
    if _newclass:ptr = _swig_property(_TOSSDR.variable_string_t_ptr_get, _TOSSDR.variable_string_t_ptr_set)
    __swig_setmethods__["len"] = _TOSSDR.variable_string_t_len_set
    __swig_getmethods__["len"] = _TOSSDR.variable_string_t_len_get
    if _newclass:len = _swig_property(_TOSSDR.variable_string_t_len_get, _TOSSDR.variable_string_t_len_set)
    __swig_setmethods__["isArray"] = _TOSSDR.variable_string_t_isArray_set
    __swig_getmethods__["isArray"] = _TOSSDR.variable_string_t_isArray_get
    if _newclass:isArray = _swig_property(_TOSSDR.variable_string_t_isArray_get, _TOSSDR.variable_string_t_isArray_set)
    def __init__(self, *args): 
        this = _TOSSDR.new_variable_string_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_variable_string_t
    __del__ = lambda self : None;
variable_string_t_swigregister = _TOSSDR.variable_string_t_swigregister
variable_string_t_swigregister(variable_string_t)

class nesc_app_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nesc_app_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nesc_app_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numVariables"] = _TOSSDR.nesc_app_t_numVariables_set
    __swig_getmethods__["numVariables"] = _TOSSDR.nesc_app_t_numVariables_get
    if _newclass:numVariables = _swig_property(_TOSSDR.nesc_app_t_numVariables_get, _TOSSDR.nesc_app_t_numVariables_set)
    __swig_setmethods__["variableNames"] = _TOSSDR.nesc_app_t_variableNames_set
    __swig_getmethods__["variableNames"] = _TOSSDR.nesc_app_t_variableNames_get
    if _newclass:variableNames = _swig_property(_TOSSDR.nesc_app_t_variableNames_get, _TOSSDR.nesc_app_t_variableNames_set)
    __swig_setmethods__["variableTypes"] = _TOSSDR.nesc_app_t_variableTypes_set
    __swig_getmethods__["variableTypes"] = _TOSSDR.nesc_app_t_variableTypes_get
    if _newclass:variableTypes = _swig_property(_TOSSDR.nesc_app_t_variableTypes_get, _TOSSDR.nesc_app_t_variableTypes_set)
    __swig_setmethods__["variableArray"] = _TOSSDR.nesc_app_t_variableArray_set
    __swig_getmethods__["variableArray"] = _TOSSDR.nesc_app_t_variableArray_get
    if _newclass:variableArray = _swig_property(_TOSSDR.nesc_app_t_variableArray_get, _TOSSDR.nesc_app_t_variableArray_set)
    def __init__(self, *args): 
        this = _TOSSDR.new_nesc_app_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_nesc_app_t
    __del__ = lambda self : None;
nesc_app_t_swigregister = _TOSSDR.nesc_app_t_swigregister
nesc_app_t_swigregister(nesc_app_t)

class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_Variable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_Variable
    __del__ = lambda self : None;
    def getData(*args): return _TOSSDR.Variable_getData(*args)
Variable_swigregister = _TOSSDR.Variable_swigregister
Variable_swigregister(Variable)

class Mote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mote, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_Mote(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_Mote
    __del__ = lambda self : None;
    def id(*args): return _TOSSDR.Mote_id(*args)
    def euid(*args): return _TOSSDR.Mote_euid(*args)
    def setEuid(*args): return _TOSSDR.Mote_setEuid(*args)
    def bootTime(*args): return _TOSSDR.Mote_bootTime(*args)
    def bootAtTime(*args): return _TOSSDR.Mote_bootAtTime(*args)
    def isOn(*args): return _TOSSDR.Mote_isOn(*args)
    def turnOff(*args): return _TOSSDR.Mote_turnOff(*args)
    def turnOn(*args): return _TOSSDR.Mote_turnOn(*args)
    def getVariable(*args): return _TOSSDR.Mote_getVariable(*args)
Mote_swigregister = _TOSSDR.Mote_swigregister
Mote_swigregister(Mote)

class Tossdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tossdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tossdr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TOSSDR.new_Tossdr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TOSSDR.delete_Tossdr
    __del__ = lambda self : None;
    def init(*args): return _TOSSDR.Tossdr_init(*args)
    def time(*args): return _TOSSDR.Tossdr_time(*args)
    def ticksPerSecond(*args): return _TOSSDR.Tossdr_ticksPerSecond(*args)
    def setTime(*args): return _TOSSDR.Tossdr_setTime(*args)
    def timeStr(*args): return _TOSSDR.Tossdr_timeStr(*args)
    def currentNode(*args): return _TOSSDR.Tossdr_currentNode(*args)
    def getNode(*args): return _TOSSDR.Tossdr_getNode(*args)
    def setCurrentNode(*args): return _TOSSDR.Tossdr_setCurrentNode(*args)
    def addChannel(*args): return _TOSSDR.Tossdr_addChannel(*args)
    def removeChannel(*args): return _TOSSDR.Tossdr_removeChannel(*args)
    def randomSeed(*args): return _TOSSDR.Tossdr_randomSeed(*args)
    def runNextEvent(*args): return _TOSSDR.Tossdr_runNextEvent(*args)
    def newPacket(*args): return _TOSSDR.Tossdr_newPacket(*args)
    def set_data2sdr_callback(*args): return _TOSSDR.Tossdr_set_data2sdr_callback(*args)
    def set_send_callback(*args): return _TOSSDR.Tossdr_set_send_callback(*args)
Tossdr_swigregister = _TOSSDR.Tossdr_swigregister
Tossdr_swigregister(Tossdr)



