// $ANTLR 2.7.6 (2005-12-22): "expandedGnuCEmitter.g" -> "GnuCEmitter.java"$

public interface GnuCEmitterTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_typedef = 4;
	int PREPROC_DIRECTIVE = 5;
	int LITERAL_asm = 6;
	int LITERAL_volatile = 7;
	int LCURLY = 8;
	int RCURLY = 9;
	int SEMI = 10;
	int LITERAL_struct = 11;
	int LITERAL_union = 12;
	int LITERAL_enum = 13;
	int LITERAL_auto = 14;
	int LITERAL_register = 15;
	int LITERAL_extern = 16;
	int LITERAL_static = 17;
	int LITERAL_const = 18;
	int LITERAL_void = 19;
	int LITERAL_char = 20;
	int LITERAL_short = 21;
	int LITERAL_int = 22;
	int LITERAL_long = 23;
	int LITERAL_float = 24;
	int LITERAL_double = 25;
	int LITERAL_signed = 26;
	int LITERAL___builtin_va_list = 27;
	int LITERAL_unsigned = 28;
	int ID = 29;
	int COMMA = 30;
	int COLON = 31;
	int ASSIGN = 32;
	int STAR = 33;
	int LITERAL___restrict = 34;
	int LPAREN = 35;
	int RPAREN = 36;
	int LBRACKET = 37;
	int RBRACKET = 38;
	int VARARGS = 39;
	int LITERAL_while = 40;
	int LITERAL_do = 41;
	int LITERAL_for = 42;
	int LITERAL_goto = 43;
	int LITERAL_continue = 44;
	int LITERAL_break = 45;
	int LITERAL_return = 46;
	int LITERAL_case = 47;
	int LITERAL_default = 48;
	int LITERAL_if = 49;
	int LITERAL_else = 50;
	int LITERAL_switch = 51;
	int DIV_ASSIGN = 52;
	int PLUS_ASSIGN = 53;
	int MINUS_ASSIGN = 54;
	int STAR_ASSIGN = 55;
	int MOD_ASSIGN = 56;
	int RSHIFT_ASSIGN = 57;
	int LSHIFT_ASSIGN = 58;
	int BAND_ASSIGN = 59;
	int BOR_ASSIGN = 60;
	int BXOR_ASSIGN = 61;
	int QUESTION = 62;
	int LOR = 63;
	int LAND = 64;
	int BOR = 65;
	int BXOR = 66;
	int BAND = 67;
	int EQUAL = 68;
	int NOT_EQUAL = 69;
	int LT = 70;
	int LTE = 71;
	int GT = 72;
	int GTE = 73;
	int LSHIFT = 74;
	int RSHIFT = 75;
	int PLUS = 76;
	int MINUS = 77;
	int DIV = 78;
	int MOD = 79;
	int INC = 80;
	int DEC = 81;
	int LITERAL_sizeof = 82;
	int BNOT = 83;
	int LNOT = 84;
	int PTR = 85;
	int DOT = 86;
	int CharLiteral = 87;
	int StringLiteral = 88;
	int IntOctalConst = 89;
	int LongOctalConst = 90;
	int UnsignedOctalConst = 91;
	int IntIntConst = 92;
	int LongIntConst = 93;
	int UnsignedIntConst = 94;
	int IntHexConst = 95;
	int LongHexConst = 96;
	int UnsignedHexConst = 97;
	int FloatDoubleConst = 98;
	int DoubleDoubleConst = 99;
	int LongDoubleConst = 100;
	int NTypedefName = 101;
	int NInitDecl = 102;
	int NDeclarator = 103;
	int NStructDeclarator = 104;
	int NDeclaration = 105;
	int NCast = 106;
	int NPointerGroup = 107;
	int NExpressionGroup = 108;
	int NFunctionCallArgs = 109;
	int NNonemptyAbstractDeclarator = 110;
	int NInitializer = 111;
	int NStatementExpr = 112;
	int NEmptyExpression = 113;
	int NParameterTypeList = 114;
	int NFunctionDef = 115;
	int NCompoundStatement = 116;
	int NParameterDeclaration = 117;
	int NCommaExpr = 118;
	int NUnaryExpr = 119;
	int NLabel = 120;
	int NPostfixExpr = 121;
	int NRangeExpr = 122;
	int NStringSeq = 123;
	int NInitializerElementLabel = 124;
	int NLcurlyInitializer = 125;
	int NAsmAttribute = 126;
	int NGnuAsmExpr = 127;
	int NTypeMissing = 128;
	int Vocabulary = 129;
	int Whitespace = 130;
	int Comment = 131;
	int CPPComment = 132;
	int Space = 133;
	int LineDirective = 134;
	int BadStringLiteral = 135;
	int Escape = 136;
	int Digit = 137;
	int LongSuffix = 138;
	int UnsignedSuffix = 139;
	int FloatSuffix = 140;
	int Exponent = 141;
	int Number = 142;
	int LITERAL___label__ = 143;
	int LITERAL_inline = 144;
	int LITERAL___inline = 145;
	int LITERAL_typeof = 146;
	int LITERAL___complex = 147;
	int LITERAL___attribute = 148;
	int LITERAL___alignof = 149;
	int LITERAL___real = 150;
	int LITERAL___imag = 151;
}
