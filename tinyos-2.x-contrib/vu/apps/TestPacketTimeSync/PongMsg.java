/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PongMsg'
 * message type.
 */

public class PongMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 17;

    /** Create a new PongMsg of size 18. */
    public PongMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PongMsg of the given data_length. */
    public PongMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg with the given data_length
     * and base offset.
     */
    public PongMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg using the given byte array
     * as backing store.
     */
    public PongMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PongMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PongMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg embedded in the given message
     * at the given base offset.
     */
    public PongMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PongMsg embedded in the given message
     * at the given base offset and length.
     */
    public PongMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PongMsg> \n";
      try {
        s += "  [ponger=0x"+Long.toHexString(get_ponger())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pinger=0x"+Long.toHexString(get_pinger())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ping_counter=0x"+Long.toHexString(get_ping_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ping_event_time=0x"+Long.toHexString(get_ping_event_time())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ping_rx_timestamp_is_valid=0x"+Long.toHexString(get_ping_rx_timestamp_is_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ping_event_time_is_valid=0x"+Long.toHexString(get_ping_event_time_is_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ping_rx_timestamp=0x"+Long.toHexString(get_ping_rx_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ponger
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ponger' is signed (false).
     */
    public static boolean isSigned_ponger() {
        return false;
    }

    /**
     * Return whether the field 'ponger' is an array (false).
     */
    public static boolean isArray_ponger() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ponger'
     */
    public static int offset_ponger() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ponger'
     */
    public static int offsetBits_ponger() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'ponger'
     */
    public int get_ponger() {
        return (int)getUIntBEElement(offsetBits_ponger(), 16);
    }

    /**
     * Set the value of the field 'ponger'
     */
    public void set_ponger(int value) {
        setUIntBEElement(offsetBits_ponger(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ponger'
     */
    public static int size_ponger() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ponger'
     */
    public static int sizeBits_ponger() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pinger
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pinger' is signed (false).
     */
    public static boolean isSigned_pinger() {
        return false;
    }

    /**
     * Return whether the field 'pinger' is an array (false).
     */
    public static boolean isArray_pinger() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pinger'
     */
    public static int offset_pinger() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pinger'
     */
    public static int offsetBits_pinger() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'pinger'
     */
    public int get_pinger() {
        return (int)getUIntBEElement(offsetBits_pinger(), 16);
    }

    /**
     * Set the value of the field 'pinger'
     */
    public void set_pinger(int value) {
        setUIntBEElement(offsetBits_pinger(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pinger'
     */
    public static int size_pinger() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pinger'
     */
    public static int sizeBits_pinger() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ping_counter
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ping_counter' is signed (false).
     */
    public static boolean isSigned_ping_counter() {
        return false;
    }

    /**
     * Return whether the field 'ping_counter' is an array (false).
     */
    public static boolean isArray_ping_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ping_counter'
     */
    public static int offset_ping_counter() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ping_counter'
     */
    public static int offsetBits_ping_counter() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'ping_counter'
     */
    public long get_ping_counter() {
        return (long)getUIntBEElement(offsetBits_ping_counter(), 32);
    }

    /**
     * Set the value of the field 'ping_counter'
     */
    public void set_ping_counter(long value) {
        setUIntBEElement(offsetBits_ping_counter(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ping_counter'
     */
    public static int size_ping_counter() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ping_counter'
     */
    public static int sizeBits_ping_counter() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ping_event_time
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ping_event_time' is signed (false).
     */
    public static boolean isSigned_ping_event_time() {
        return false;
    }

    /**
     * Return whether the field 'ping_event_time' is an array (false).
     */
    public static boolean isArray_ping_event_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ping_event_time'
     */
    public static int offset_ping_event_time() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ping_event_time'
     */
    public static int offsetBits_ping_event_time() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'ping_event_time'
     */
    public long get_ping_event_time() {
        return (long)getUIntBEElement(offsetBits_ping_event_time(), 32);
    }

    /**
     * Set the value of the field 'ping_event_time'
     */
    public void set_ping_event_time(long value) {
        setUIntBEElement(offsetBits_ping_event_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ping_event_time'
     */
    public static int size_ping_event_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ping_event_time'
     */
    public static int sizeBits_ping_event_time() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ping_rx_timestamp_is_valid
    //   Field type: short, unsigned
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ping_rx_timestamp_is_valid' is signed (false).
     */
    public static boolean isSigned_ping_rx_timestamp_is_valid() {
        return false;
    }

    /**
     * Return whether the field 'ping_rx_timestamp_is_valid' is an array (false).
     */
    public static boolean isArray_ping_rx_timestamp_is_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ping_rx_timestamp_is_valid'
     */
    public static int offset_ping_rx_timestamp_is_valid() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ping_rx_timestamp_is_valid'
     */
    public static int offsetBits_ping_rx_timestamp_is_valid() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'ping_rx_timestamp_is_valid'
     */
    public short get_ping_rx_timestamp_is_valid() {
        return (short)getUIntBEElement(offsetBits_ping_rx_timestamp_is_valid(), 8);
    }

    /**
     * Set the value of the field 'ping_rx_timestamp_is_valid'
     */
    public void set_ping_rx_timestamp_is_valid(short value) {
        setUIntBEElement(offsetBits_ping_rx_timestamp_is_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ping_rx_timestamp_is_valid'
     */
    public static int size_ping_rx_timestamp_is_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ping_rx_timestamp_is_valid'
     */
    public static int sizeBits_ping_rx_timestamp_is_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ping_event_time_is_valid
    //   Field type: short, unsigned
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ping_event_time_is_valid' is signed (false).
     */
    public static boolean isSigned_ping_event_time_is_valid() {
        return false;
    }

    /**
     * Return whether the field 'ping_event_time_is_valid' is an array (false).
     */
    public static boolean isArray_ping_event_time_is_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ping_event_time_is_valid'
     */
    public static int offset_ping_event_time_is_valid() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ping_event_time_is_valid'
     */
    public static int offsetBits_ping_event_time_is_valid() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'ping_event_time_is_valid'
     */
    public short get_ping_event_time_is_valid() {
        return (short)getUIntBEElement(offsetBits_ping_event_time_is_valid(), 8);
    }

    /**
     * Set the value of the field 'ping_event_time_is_valid'
     */
    public void set_ping_event_time_is_valid(short value) {
        setUIntBEElement(offsetBits_ping_event_time_is_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ping_event_time_is_valid'
     */
    public static int size_ping_event_time_is_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ping_event_time_is_valid'
     */
    public static int sizeBits_ping_event_time_is_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ping_rx_timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 112
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ping_rx_timestamp' is signed (false).
     */
    public static boolean isSigned_ping_rx_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'ping_rx_timestamp' is an array (false).
     */
    public static boolean isArray_ping_rx_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ping_rx_timestamp'
     */
    public static int offset_ping_rx_timestamp() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ping_rx_timestamp'
     */
    public static int offsetBits_ping_rx_timestamp() {
        return 112;
    }

    /**
     * Return the value (as a long) of the field 'ping_rx_timestamp'
     */
    public long get_ping_rx_timestamp() {
        return (long)getUIntBEElement(offsetBits_ping_rx_timestamp(), 32);
    }

    /**
     * Set the value of the field 'ping_rx_timestamp'
     */
    public void set_ping_rx_timestamp(long value) {
        setUIntBEElement(offsetBits_ping_rx_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ping_rx_timestamp'
     */
    public static int size_ping_rx_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ping_rx_timestamp'
     */
    public static int sizeBits_ping_rx_timestamp() {
        return 32;
    }

}
