/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ProgressMsg'
 * message type.
 */

package com.rincon.transfer.progress.messages;

public class ProgressMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 208;

    /** Create a new ProgressMsg of size 10. */
    public ProgressMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ProgressMsg of the given data_length. */
    public ProgressMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg with the given data_length
     * and base offset.
     */
    public ProgressMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg using the given byte array
     * as backing store.
     */
    public ProgressMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ProgressMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ProgressMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg embedded in the given message
     * at the given base offset.
     */
    public ProgressMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ProgressMsg embedded in the given message
     * at the given base offset and length.
     */
    public ProgressMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ProgressMsg> \n";
      try {
        s += "  [completed=0x"+Long.toHexString(get_completed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [total=0x"+Long.toHexString(get_total())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [appId=0x"+Long.toHexString(get_appId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: completed
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'completed' is signed (false).
     */
    public static boolean isSigned_completed() {
        return false;
    }

    /**
     * Return whether the field 'completed' is an array (false).
     */
    public static boolean isArray_completed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'completed'
     */
    public static int offset_completed() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'completed'
     */
    public static int offsetBits_completed() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'completed'
     */
    public long get_completed() {
        return (long)getUIntBEElement(offsetBits_completed(), 32);
    }

    /**
     * Set the value of the field 'completed'
     */
    public void set_completed(long value) {
        setUIntBEElement(offsetBits_completed(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'completed'
     */
    public static int size_completed() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'completed'
     */
    public static int sizeBits_completed() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: total
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'total' is signed (false).
     */
    public static boolean isSigned_total() {
        return false;
    }

    /**
     * Return whether the field 'total' is an array (false).
     */
    public static boolean isArray_total() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'total'
     */
    public static int offset_total() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'total'
     */
    public static int offsetBits_total() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'total'
     */
    public long get_total() {
        return (long)getUIntBEElement(offsetBits_total(), 32);
    }

    /**
     * Set the value of the field 'total'
     */
    public void set_total(long value) {
        setUIntBEElement(offsetBits_total(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'total'
     */
    public static int size_total() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'total'
     */
    public static int sizeBits_total() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: appId
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'appId' is signed (false).
     */
    public static boolean isSigned_appId() {
        return false;
    }

    /**
     * Return whether the field 'appId' is an array (false).
     */
    public static boolean isArray_appId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'appId'
     */
    public static int offset_appId() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'appId'
     */
    public static int offsetBits_appId() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'appId'
     */
    public int get_appId() {
        return (int)getUIntBEElement(offsetBits_appId(), 16);
    }

    /**
     * Set the value of the field 'appId'
     */
    public void set_appId(int value) {
        setUIntBEElement(offsetBits_appId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'appId'
     */
    public static int size_appId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'appId'
     */
    public static int sizeBits_appId() {
        return 16;
    }

}
