/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'OctopusCollectedMsg'
 * message type.
 */

public class OctopusCollectedMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 16;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new OctopusCollectedMsg of size 16. */
    public OctopusCollectedMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new OctopusCollectedMsg of the given data_length. */
    public OctopusCollectedMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg with the given data_length
     * and base offset.
     */
    public OctopusCollectedMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg using the given byte array
     * as backing store.
     */
    public OctopusCollectedMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public OctopusCollectedMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public OctopusCollectedMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg embedded in the given message
     * at the given base offset.
     */
    public OctopusCollectedMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OctopusCollectedMsg embedded in the given message
     * at the given base offset and length.
     */
    public OctopusCollectedMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <OctopusCollectedMsg> \n";
      try {
        s += "  [moteId=0x"+Long.toHexString(get_moteId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reading=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_reading(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quality=0x"+Long.toHexString(get_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parentId=0x"+Long.toHexString(get_parentId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reply=0x"+Long.toHexString(get_reply())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqi=0x"+Long.toHexString(get_lqi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssi=0x"+Long.toHexString(get_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: moteId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'moteId' is signed (false).
     */
    public static boolean isSigned_moteId() {
        return false;
    }

    /**
     * Return whether the field 'moteId' is an array (false).
     */
    public static boolean isArray_moteId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'moteId'
     */
    public static int offset_moteId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'moteId'
     */
    public static int offsetBits_moteId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'moteId'
     */
    public int get_moteId() {
        return (int)getUIntBEElement(offsetBits_moteId(), 16);
    }

    /**
     * Set the value of the field 'moteId'
     */
    public void set_moteId(int value) {
        setUIntBEElement(offsetBits_moteId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'moteId'
     */
    public static int size_moteId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'moteId'
     */
    public static int sizeBits_moteId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'count'
     */
    public short get_count() {
        return (short)getUIntBEElement(offsetBits_count(), 8);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(short value) {
        setUIntBEElement(offsetBits_count(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reading
    //   Field type: int[], unsigned
    //   Offset (bits): 24
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reading' is signed (false).
     */
    public static boolean isSigned_reading() {
        return false;
    }

    /**
     * Return whether the field 'reading' is an array (true).
     */
    public static boolean isArray_reading() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'reading'
     */
    public static int offset_reading(int index1) {
        int offset = 24;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reading'
     */
    public static int offsetBits_reading(int index1) {
        int offset = 24;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'reading' as a int[]
     */
    public int[] get_reading() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_reading(0); index0++) {
            tmp[index0] = getElement_reading(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'reading' from the given int[]
     */
    public void set_reading(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_reading(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'reading'
     */
    public int getElement_reading(int index1) {
        return (int)getUIntBEElement(offsetBits_reading(index1), 16);
    }

    /**
     * Set an element of the array 'reading'
     */
    public void setElement_reading(int index1, int value) {
        setUIntBEElement(offsetBits_reading(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'reading'
     */
    public static int totalSize_reading() {
        return (48 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'reading'
     */
    public static int totalSizeBits_reading() {
        return 48;
    }

    /**
     * Return the size, in bytes, of each element of the array 'reading'
     */
    public static int elementSize_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'reading'
     */
    public static int elementSizeBits_reading() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'reading'
     */
    public static int numDimensions_reading() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'reading'
     */
    public static int numElements_reading() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'reading'
     * for the given dimension.
     */
    public static int numElements_reading(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quality
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quality' is signed (false).
     */
    public static boolean isSigned_quality() {
        return false;
    }

    /**
     * Return whether the field 'quality' is an array (false).
     */
    public static boolean isArray_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quality'
     */
    public static int offset_quality() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quality'
     */
    public static int offsetBits_quality() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'quality'
     */
    public int get_quality() {
        return (int)getUIntBEElement(offsetBits_quality(), 16);
    }

    /**
     * Set the value of the field 'quality'
     */
    public void set_quality(int value) {
        setUIntBEElement(offsetBits_quality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'quality'
     */
    public static int size_quality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quality'
     */
    public static int sizeBits_quality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parentId
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parentId' is signed (false).
     */
    public static boolean isSigned_parentId() {
        return false;
    }

    /**
     * Return whether the field 'parentId' is an array (false).
     */
    public static boolean isArray_parentId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parentId'
     */
    public static int offset_parentId() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parentId'
     */
    public static int offsetBits_parentId() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'parentId'
     */
    public int get_parentId() {
        return (int)getUIntBEElement(offsetBits_parentId(), 16);
    }

    /**
     * Set the value of the field 'parentId'
     */
    public void set_parentId(int value) {
        setUIntBEElement(offsetBits_parentId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'parentId'
     */
    public static int size_parentId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parentId'
     */
    public static int sizeBits_parentId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reply
    //   Field type: short, unsigned
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reply' is signed (false).
     */
    public static boolean isSigned_reply() {
        return false;
    }

    /**
     * Return whether the field 'reply' is an array (false).
     */
    public static boolean isArray_reply() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reply'
     */
    public static int offset_reply() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reply'
     */
    public static int offsetBits_reply() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'reply'
     */
    public short get_reply() {
        return (short)getUIntBEElement(offsetBits_reply(), 8);
    }

    /**
     * Set the value of the field 'reply'
     */
    public void set_reply(short value) {
        setUIntBEElement(offsetBits_reply(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'reply'
     */
    public static int size_reply() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reply'
     */
    public static int sizeBits_reply() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqi
    //   Field type: short, unsigned
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqi' is signed (false).
     */
    public static boolean isSigned_lqi() {
        return false;
    }

    /**
     * Return whether the field 'lqi' is an array (false).
     */
    public static boolean isArray_lqi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqi'
     */
    public static int offset_lqi() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqi'
     */
    public static int offsetBits_lqi() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'lqi'
     */
    public short get_lqi() {
        return (short)getUIntBEElement(offsetBits_lqi(), 8);
    }

    /**
     * Set the value of the field 'lqi'
     */
    public void set_lqi(short value) {
        setUIntBEElement(offsetBits_lqi(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqi'
     */
    public static int size_lqi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqi'
     */
    public static int sizeBits_lqi() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi
    //   Field type: short, unsigned
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi' is signed (false).
     */
    public static boolean isSigned_rssi() {
        return false;
    }

    /**
     * Return whether the field 'rssi' is an array (false).
     */
    public static boolean isArray_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi'
     */
    public static int offset_rssi() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi'
     */
    public static int offsetBits_rssi() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'rssi'
     */
    public short get_rssi() {
        return (short)getUIntBEElement(offsetBits_rssi(), 8);
    }

    /**
     * Set the value of the field 'rssi'
     */
    public void set_rssi(short value) {
        setUIntBEElement(offsetBits_rssi(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi'
     */
    public static int size_rssi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi'
     */
    public static int sizeBits_rssi() {
        return 8;
    }

}
