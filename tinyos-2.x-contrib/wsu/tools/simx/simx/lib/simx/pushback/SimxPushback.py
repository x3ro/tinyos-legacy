# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _SimxPushback
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class pushback_result_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pushback_result_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pushback_result_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _SimxPushback.pushback_result_union_t_d_set
    __swig_getmethods__["d"] = _SimxPushback.pushback_result_union_t_d_get
    if _newclass:d = _swig_property(_SimxPushback.pushback_result_union_t_d_get, _SimxPushback.pushback_result_union_t_d_set)
    __swig_setmethods__["l"] = _SimxPushback.pushback_result_union_t_l_set
    __swig_getmethods__["l"] = _SimxPushback.pushback_result_union_t_l_get
    if _newclass:l = _swig_property(_SimxPushback.pushback_result_union_t_l_get, _SimxPushback.pushback_result_union_t_l_set)
    __swig_setmethods__["h"] = _SimxPushback.pushback_result_union_t_h_set
    __swig_getmethods__["h"] = _SimxPushback.pushback_result_union_t_h_get
    if _newclass:h = _swig_property(_SimxPushback.pushback_result_union_t_h_get, _SimxPushback.pushback_result_union_t_h_set)
    def __init__(self, *args): 
        this = _SimxPushback.new_pushback_result_union_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SimxPushback.delete_pushback_result_union_t
    __del__ = lambda self : None;
pushback_result_union_t_swigregister = _SimxPushback.pushback_result_union_t_swigregister
pushback_result_union_t_swigregister(pushback_result_union_t)

PUSHBACK_SUCCESS = _SimxPushback.PUSHBACK_SUCCESS
PUSHBACK_INVOKE_ERROR = _SimxPushback.PUSHBACK_INVOKE_ERROR
PUSHBACK_EXPECTING_LONG = _SimxPushback.PUSHBACK_EXPECTING_LONG
PUSHBACK_UNKNOWN_PUSHBACK = _SimxPushback.PUSHBACK_UNKNOWN_PUSHBACK
PUSHBACK_NONE = _SimxPushback.PUSHBACK_NONE
PUSHBACK_EXCEPTION = _SimxPushback.PUSHBACK_EXCEPTION
PUSHBACK_LONG = _SimxPushback.PUSHBACK_LONG
PUSHBACK_DOUBLE = _SimxPushback.PUSHBACK_DOUBLE
PUSHBACK_STRING = _SimxPushback.PUSHBACK_STRING
class pushback_result_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pushback_result_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pushback_result_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _SimxPushback.pushback_result_t_type_set
    __swig_getmethods__["type"] = _SimxPushback.pushback_result_t_type_get
    if _newclass:type = _swig_property(_SimxPushback.pushback_result_t_type_get, _SimxPushback.pushback_result_t_type_set)
    __swig_setmethods__["data"] = _SimxPushback.pushback_result_t_data_set
    __swig_getmethods__["data"] = _SimxPushback.pushback_result_t_data_get
    if _newclass:data = _swig_property(_SimxPushback.pushback_result_t_data_get, _SimxPushback.pushback_result_t_data_set)
    def __init__(self, *args): 
        this = _SimxPushback.new_pushback_result_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SimxPushback.delete_pushback_result_t
    __del__ = lambda self : None;
pushback_result_t_swigregister = _SimxPushback.pushback_result_t_swigregister
pushback_result_t_swigregister(pushback_result_t)

class pushback_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pushback_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pushback_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _SimxPushback.pushback_t_name_set
    __swig_getmethods__["name"] = _SimxPushback.pushback_t_name_get
    if _newclass:name = _swig_property(_SimxPushback.pushback_t_name_get, _SimxPushback.pushback_t_name_set)
    __swig_setmethods__["format"] = _SimxPushback.pushback_t_format_set
    __swig_getmethods__["format"] = _SimxPushback.pushback_t_format_get
    if _newclass:format = _swig_property(_SimxPushback.pushback_t_format_get, _SimxPushback.pushback_t_format_set)
    __swig_setmethods__["fn"] = _SimxPushback.pushback_t_fn_set
    __swig_getmethods__["fn"] = _SimxPushback.pushback_t_fn_get
    if _newclass:fn = _swig_property(_SimxPushback.pushback_t_fn_get, _SimxPushback.pushback_t_fn_set)
    __swig_setmethods__["data"] = _SimxPushback.pushback_t_data_set
    __swig_getmethods__["data"] = _SimxPushback.pushback_t_data_get
    if _newclass:data = _swig_property(_SimxPushback.pushback_t_data_get, _SimxPushback.pushback_t_data_set)
    __swig_setmethods__["dtor"] = _SimxPushback.pushback_t_dtor_set
    __swig_getmethods__["dtor"] = _SimxPushback.pushback_t_dtor_get
    if _newclass:dtor = _swig_property(_SimxPushback.pushback_t_dtor_get, _SimxPushback.pushback_t_dtor_set)
    def __init__(self, *args): 
        this = _SimxPushback.new_pushback_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SimxPushback.delete_pushback_t
    __del__ = lambda self : None;
pushback_t_swigregister = _SimxPushback.pushback_t_swigregister
pushback_t_swigregister(pushback_t)

simx_pushback_add = _SimxPushback.simx_pushback_add
simx_pushback_remove = _SimxPushback.simx_pushback_remove
class Pushback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pushback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pushback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SimxPushback.new_Pushback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SimxPushback.delete_Pushback
    __del__ = lambda self : None;
    def addPushback(*args): return _SimxPushback.Pushback_addPushback(*args)
    def removePushback(*args): return _SimxPushback.Pushback_removePushback(*args)
    def invokePushback(*args): return _SimxPushback.Pushback_invokePushback(*args)
    def addPythonPushback(*args): return _SimxPushback.Pushback_addPythonPushback(*args)
    def removePythonPushback(*args): return _SimxPushback.Pushback_removePythonPushback(*args)
Pushback_swigregister = _SimxPushback.Pushback_swigregister
Pushback_swigregister(Pushback)



