/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReactLinkMsg'
 * message type.
 */

package simx.mig;

public class ReactLinkMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 205;

    /** Create a new ReactLinkMsg of size 6. */
    public ReactLinkMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReactLinkMsg of the given data_length. */
    public ReactLinkMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg with the given data_length
     * and base offset.
     */
    public ReactLinkMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg using the given byte array
     * as backing store.
     */
    public ReactLinkMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ReactLinkMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReactLinkMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg embedded in the given message
     * at the given base offset.
     */
    public ReactLinkMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactLinkMsg embedded in the given message
     * at the given base offset and length.
     */
    public ReactLinkMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReactLinkMsg> \n";
      try {
        s += "  [node1=0x"+Long.toHexString(get_node1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [node2=0x"+Long.toHexString(get_node2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gain1to2=0x"+Long.toHexString(get_gain1to2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gain2to1=0x"+Long.toHexString(get_gain2to1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: node1
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'node1' is signed (true).
     */
    public static boolean isSigned_node1() {
        return true;
    }

    /**
     * Return whether the field 'node1' is an array (false).
     */
    public static boolean isArray_node1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'node1'
     */
    public static int offset_node1() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'node1'
     */
    public static int offsetBits_node1() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'node1'
     */
    public int get_node1() {
        return (int)getUIntBEElement(offsetBits_node1(), 16);
    }

    /**
     * Set the value of the field 'node1'
     */
    public void set_node1(int value) {
        setUIntBEElement(offsetBits_node1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'node1'
     */
    public static int size_node1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'node1'
     */
    public static int sizeBits_node1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: node2
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'node2' is signed (true).
     */
    public static boolean isSigned_node2() {
        return true;
    }

    /**
     * Return whether the field 'node2' is an array (false).
     */
    public static boolean isArray_node2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'node2'
     */
    public static int offset_node2() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'node2'
     */
    public static int offsetBits_node2() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'node2'
     */
    public int get_node2() {
        return (int)getUIntBEElement(offsetBits_node2(), 16);
    }

    /**
     * Set the value of the field 'node2'
     */
    public void set_node2(int value) {
        setUIntBEElement(offsetBits_node2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'node2'
     */
    public static int size_node2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'node2'
     */
    public static int sizeBits_node2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gain1to2
    //   Field type: byte, signed
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gain1to2' is signed (true).
     */
    public static boolean isSigned_gain1to2() {
        return true;
    }

    /**
     * Return whether the field 'gain1to2' is an array (false).
     */
    public static boolean isArray_gain1to2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gain1to2'
     */
    public static int offset_gain1to2() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gain1to2'
     */
    public static int offsetBits_gain1to2() {
        return 32;
    }

    /**
     * Return the value (as a byte) of the field 'gain1to2'
     */
    public byte get_gain1to2() {
        return (byte)getSIntBEElement(offsetBits_gain1to2(), 8);
    }

    /**
     * Set the value of the field 'gain1to2'
     */
    public void set_gain1to2(byte value) {
        setSIntBEElement(offsetBits_gain1to2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gain1to2'
     */
    public static int size_gain1to2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gain1to2'
     */
    public static int sizeBits_gain1to2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gain2to1
    //   Field type: byte, signed
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gain2to1' is signed (true).
     */
    public static boolean isSigned_gain2to1() {
        return true;
    }

    /**
     * Return whether the field 'gain2to1' is an array (false).
     */
    public static boolean isArray_gain2to1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gain2to1'
     */
    public static int offset_gain2to1() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gain2to1'
     */
    public static int offsetBits_gain2to1() {
        return 40;
    }

    /**
     * Return the value (as a byte) of the field 'gain2to1'
     */
    public byte get_gain2to1() {
        return (byte)getSIntBEElement(offsetBits_gain2to1(), 8);
    }

    /**
     * Set the value of the field 'gain2to1'
     */
    public void set_gain2to1(byte value) {
        setSIntBEElement(offsetBits_gain2to1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gain2to1'
     */
    public static int size_gain2to1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gain2to1'
     */
    public static int sizeBits_gain2to1() {
        return 8;
    }

}
