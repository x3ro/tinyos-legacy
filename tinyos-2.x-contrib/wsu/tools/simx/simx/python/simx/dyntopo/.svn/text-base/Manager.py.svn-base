import re

class NodeManager(object):
    """
    Generic support for basic item management.

    Most of the methods are simply for convenience. Some methods are
    abstract and must be implemented by a subclass.
    """

    def getNode(self, iter):
        raise NotImplementedError


    def getNodes(self, iter):
        """
        Get one (or many) nodes at once.

        Returns a list of the results (which may be empty).
        """
        return map(lambda x: self.getNode(x), iter)


    def __getitem__(self, i):
        """
        Combines getNode and getNodes properties depending on i.

        Allows slices to be used as well.
        """
        if isinstance(i, slice):
            return self.getNodes(xrange(*i.indices(self.maxNodes())))
        elif hasattr(i, "__iter__"):
            return self.getNodes(i)
        else:
            return self.getNode(i)


    def maxNodes(self):
        """
        Returns the maximum number of supported nodes.
        """
        raise NotImplementedError


    def nodes(self):
        """
        Returns a list of all nodes that have been looked up.

        The list may contain nodes which have no been powered on or do
        not have valid link-gain properties, etc.
        """
        raise NotImplementedError


    def linkNodes(self, *nodes):
        """
        Touch links between the specified nodes (that is, create a
        link from every specified node to every other specified node).
        """
        for n in nodes:
            for o in filter(lambda b: n != b, nodes):
                n.touch(o)


    def linkAllNodes(self):
        """
        Touch links between all nodes.
        """
        for n in self.nodes():
            for o in filter(lambda b: n != b, self.nodes()):
                n.touch(o)


    def unlinkAllNodes(self):
        """
        Remove all links between all nodes.
        """
        for n in self.nodes():
            for o in n.neighbors:
                n.remove(o)


    def unlinkIf(self, cond):
        """
        Remove all nodes that specify the given condition. cond is passed
        the current node, the test-neighbor, and the gain between the two.

        Useful to remove all nodes with a gain less than or larger than
        some value.
        """
        for n in self.nodes():
            for o in n.neighbors:
                if cond(n, o, n.gain(o)):
                    n.remove(o)


    def readTopo(self, stream):
        """
        Read topology specified the stream.

        Returns the number of nodes read from the input on success and
        raises an error on bad input. If the operation does not
        complete succesfully due to bad input, no nodes are
        positioned. (If an error occurs during assinging a position to
        a node, some nodes may be positioned while others are not.)

        The format understood is the same format that is generated by
        the default-format writeTopo (similar formats may also
        work). In addition, blank lines, or lines that begin with a
        '#' are ignored. Using StringIO to generate a stream from a
        string may be useful.
        """
        ignoreable_line = re.compile("^(?:\\s*|\\s*#).*$")
        positions = [] # of (node_id, pos)

        def raise_wrong_count (line, found):
            raise ValueError("Wrong argument count: ``%s'': "
                             "found %d, required 3" % (line, found))

        def raise_invalid_line (line, reason):
            raise ValueError("Invalid line: ``%s'': %s" % (line, reason))

        for line in stream:
            if not ignoreable_line.match(line):
                args = line.split()

                if len(args) != 3:
                    raise_wrong_count(line, len(args))
                try:
                    node_id = int(args[0])
                    x = float(args[1])
                    y = float(args[2])
                except ValueError, e:
                    raise_invalid_line(line, e.message)

                positions.append((node_id, (x, y)))

        # Here without an exception...
        for (id, pos) in positions:
            self.getNode(id).set_pos(pos)

        return len(positions)


    def writeTopo(self, stream=None, format="%(id)02i %(x)7.02f %(y)7.02f"):
        """
        Write a topology to a stream.

        The valid format identifiers are id (integer), x (float) and y
        (float). See the Python API on how to create the format
        string.
        """
        for n in self.nodes():
            (x, y) = n.ro_pos
            print >> stream, format % {'id': n.id(), 'x': x, 'y': y}


    def gain(src, dest):
        """
        Returns the *applied* gain between two nodes.

        None is returned if the nodes, src and dest, are not
        connected.
        """
        raise NotImplementedError


    def readGain(self, stream):
        """
        Read a link-gain model from stream.

        Returns the number of nodes read from the input on success and
        raises an error on bad input. If the operation does not
        complete succesfully due to bad input, no node link-gain
        information is adjusted. (Errors which occur during the
        link-gain processing have undefined behavior.)

        The format understood is the same format that is generated by
        the default-format writeTopo (similar formats may also
        work). In addition, blank lines, or lines that begin with a
        '#' are ignored. Using StringIO to generate a stream from a
        string may be useful.
        """
        ignoreable_line = re.compile("^(?:\\s*|\\s*#).*$")
        links = [] # of (node_id1, node_id2, gain)

        def raise_wrong_count (line, found):
            raise ValueError("Wrong argument count: ``%s'': "
                             "found %d, required 3" % (line, found))

        def raise_invalid_line (line, reason):
            raise ValueError("Invalid line: ``%s'': %s" % (line, reason))

        for line in stream:
            if not ignoreable_line.match(line):
                args = line.split()

                if len(args) != 4:
                    raise_wrong_count(line, len(args))
                try:
                    node_id1 = int(args[1])
                    node_id2 = int(args[2])
                    gain = float(args[3])
                except ValueError, e:
                    raise_invalid_line(line, e.message)

                links.append((node_id1, node_id2, gain))

        for (id1, id2, pos) in links:
            self.getNode(id1).set_pos(pos)

        return len(links)


    def writeGain(self, stream=None, format="gain %(src)d %(dest)d %(gain)f"):
        """
        Write the gain information to a stream.

        The valid format identifiers are src (integer), dest
        (integer), gain (float).
        """
        nodes = self.nodes()
        for a, b in ((a, b) for a in nodes for b in nodes if a is not b):
            gain = self.gain(a, b)
            if gain is not None:
                idents = {'src': a.id(), 'dest': b.id(), 'gain': gain}
                print >> stream, format % idents
