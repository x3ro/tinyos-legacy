#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Msg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 13

# The Active Message type associated with this message.
AM_TYPE = 203

class Msg(tinyos.message.Message.Message):
    # Create a new Msg of size 13.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=13):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Msg> \n"
        try:
            s += "  [id=0x%x]\n" % (self.get_id())
        except:
            pass
        try:
            s += "  [status=0x%x]\n" % (self.get_status())
        except:
            pass
        try:
            s += "  [x=0x%x]\n" % (self.get_x())
        except:
            pass
        try:
            s += "  [y=0x%x]\n" % (self.get_y())
        except:
            pass
        try:
            s += "  [txpower=0x%x]\n" % (self.get_txpower())
        except:
            pass
        try:
            s += "  [pld0=0x%x]\n" % (self.get_pld0())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: id
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'id' is signed (False).
    #
    def isSigned_id(self):
        return False
    
    #
    # Return whether the field 'id' is an array (False).
    #
    def isArray_id(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'id'
    #
    def offset_id(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'id'
    #
    def offsetBits_id(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'id'
    #
    def get_id(self):
        return self.getUIntElement(self.offsetBits_id(), 16, 1)
    
    #
    # Set the value of the field 'id'
    #
    def set_id(self, value):
        self.setUIntElement(self.offsetBits_id(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'id'
    #
    def size_id(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'id'
    #
    def sizeBits_id(self):
        return 16
    
    #
    # Accessor methods for field: status
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'status' is signed (False).
    #
    def isSigned_status(self):
        return False
    
    #
    # Return whether the field 'status' is an array (False).
    #
    def isArray_status(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'status'
    #
    def offset_status(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'status'
    #
    def offsetBits_status(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'status'
    #
    def get_status(self):
        return self.getUIntElement(self.offsetBits_status(), 8, 1)
    
    #
    # Set the value of the field 'status'
    #
    def set_status(self, value):
        self.setUIntElement(self.offsetBits_status(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'status'
    #
    def size_status(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'status'
    #
    def sizeBits_status(self):
        return 8
    
    #
    # Accessor methods for field: x
    #   Field type: int
    #   Offset (bits): 24
    #   Size (bits): 32
    #

    #
    # Return whether the field 'x' is signed (False).
    #
    def isSigned_x(self):
        return False
    
    #
    # Return whether the field 'x' is an array (False).
    #
    def isArray_x(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'x'
    #
    def offset_x(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'x'
    #
    def offsetBits_x(self):
        return 24
    
    #
    # Return the value (as a int) of the field 'x'
    #
    def get_x(self):
        return self.getSIntElement(self.offsetBits_x(), 32, 1)
    
    #
    # Set the value of the field 'x'
    #
    def set_x(self, value):
        self.setSIntElement(self.offsetBits_x(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'x'
    #
    def size_x(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'x'
    #
    def sizeBits_x(self):
        return 32
    
    #
    # Accessor methods for field: y
    #   Field type: int
    #   Offset (bits): 56
    #   Size (bits): 32
    #

    #
    # Return whether the field 'y' is signed (False).
    #
    def isSigned_y(self):
        return False
    
    #
    # Return whether the field 'y' is an array (False).
    #
    def isArray_y(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'y'
    #
    def offset_y(self):
        return (56 / 8)
    
    #
    # Return the offset (in bits) of the field 'y'
    #
    def offsetBits_y(self):
        return 56
    
    #
    # Return the value (as a int) of the field 'y'
    #
    def get_y(self):
        return self.getSIntElement(self.offsetBits_y(), 32, 1)
    
    #
    # Set the value of the field 'y'
    #
    def set_y(self, value):
        self.setSIntElement(self.offsetBits_y(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'y'
    #
    def size_y(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'y'
    #
    def sizeBits_y(self):
        return 32
    
    #
    # Accessor methods for field: txpower
    #   Field type: byte
    #   Offset (bits): 88
    #   Size (bits): 8
    #

    #
    # Return whether the field 'txpower' is signed (False).
    #
    def isSigned_txpower(self):
        return False
    
    #
    # Return whether the field 'txpower' is an array (False).
    #
    def isArray_txpower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'txpower'
    #
    def offset_txpower(self):
        return (88 / 8)
    
    #
    # Return the offset (in bits) of the field 'txpower'
    #
    def offsetBits_txpower(self):
        return 88
    
    #
    # Return the value (as a byte) of the field 'txpower'
    #
    def get_txpower(self):
        return self.getSIntElement(self.offsetBits_txpower(), 8, 1)
    
    #
    # Set the value of the field 'txpower'
    #
    def set_txpower(self, value):
        self.setSIntElement(self.offsetBits_txpower(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'txpower'
    #
    def size_txpower(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'txpower'
    #
    def sizeBits_txpower(self):
        return 8
    
    #
    # Accessor methods for field: pld0
    #   Field type: byte
    #   Offset (bits): 96
    #   Size (bits): 8
    #

    #
    # Return whether the field 'pld0' is signed (False).
    #
    def isSigned_pld0(self):
        return False
    
    #
    # Return whether the field 'pld0' is an array (False).
    #
    def isArray_pld0(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pld0'
    #
    def offset_pld0(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'pld0'
    #
    def offsetBits_pld0(self):
        return 96
    
    #
    # Return the value (as a byte) of the field 'pld0'
    #
    def get_pld0(self):
        return self.getSIntElement(self.offsetBits_pld0(), 8, 1)
    
    #
    # Set the value of the field 'pld0'
    #
    def set_pld0(self, value):
        self.setSIntElement(self.offsetBits_pld0(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pld0'
    #
    def size_pld0(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'pld0'
    #
    def sizeBits_pld0(self):
        return 8
    
