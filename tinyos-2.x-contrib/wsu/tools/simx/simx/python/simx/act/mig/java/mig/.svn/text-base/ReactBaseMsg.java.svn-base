/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReactBaseMsg'
 * message type.
 */

package simx.mig;

public class ReactBaseMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 239;

    /** Create a new ReactBaseMsg of size 6. */
    public ReactBaseMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReactBaseMsg of the given data_length. */
    public ReactBaseMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg with the given data_length
     * and base offset.
     */
    public ReactBaseMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg using the given byte array
     * as backing store.
     */
    public ReactBaseMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ReactBaseMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReactBaseMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg embedded in the given message
     * at the given base offset.
     */
    public ReactBaseMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactBaseMsg embedded in the given message
     * at the given base offset and length.
     */
    public ReactBaseMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReactBaseMsg> \n";
      try {
        s += "  [track_id=0x"+Long.toHexString(get_track_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [remaining=0x"+Long.toHexString(get_remaining())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload_start_byte=0x"+Long.toHexString(get_payload_start_byte())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: track_id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'track_id' is signed (false).
     */
    public static boolean isSigned_track_id() {
        return false;
    }

    /**
     * Return whether the field 'track_id' is an array (false).
     */
    public static boolean isArray_track_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'track_id'
     */
    public static int offset_track_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'track_id'
     */
    public static int offsetBits_track_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'track_id'
     */
    public int get_track_id() {
        return (int)getUIntBEElement(offsetBits_track_id(), 16);
    }

    /**
     * Set the value of the field 'track_id'
     */
    public void set_track_id(int value) {
        setUIntBEElement(offsetBits_track_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'track_id'
     */
    public static int size_track_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'track_id'
     */
    public static int sizeBits_track_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: remaining
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'remaining' is signed (false).
     */
    public static boolean isSigned_remaining() {
        return false;
    }

    /**
     * Return whether the field 'remaining' is an array (false).
     */
    public static boolean isArray_remaining() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'remaining'
     */
    public static int offset_remaining() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'remaining'
     */
    public static int offsetBits_remaining() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'remaining'
     */
    public int get_remaining() {
        return (int)getUIntBEElement(offsetBits_remaining(), 16);
    }

    /**
     * Set the value of the field 'remaining'
     */
    public void set_remaining(int value) {
        setUIntBEElement(offsetBits_remaining(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'remaining'
     */
    public static int size_remaining() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'remaining'
     */
    public static int sizeBits_remaining() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload_start_byte
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload_start_byte' is signed (false).
     */
    public static boolean isSigned_payload_start_byte() {
        return false;
    }

    /**
     * Return whether the field 'payload_start_byte' is an array (false).
     */
    public static boolean isArray_payload_start_byte() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload_start_byte'
     */
    public static int offset_payload_start_byte() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload_start_byte'
     */
    public static int offsetBits_payload_start_byte() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'payload_start_byte'
     */
    public short get_payload_start_byte() {
        return (short)getUIntBEElement(offsetBits_payload_start_byte(), 8);
    }

    /**
     * Set the value of the field 'payload_start_byte'
     */
    public void set_payload_start_byte(short value) {
        setUIntBEElement(offsetBits_payload_start_byte(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload_start_byte'
     */
    public static int size_payload_start_byte() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload_start_byte'
     */
    public static int sizeBits_payload_start_byte() {
        return 8;
    }

}
