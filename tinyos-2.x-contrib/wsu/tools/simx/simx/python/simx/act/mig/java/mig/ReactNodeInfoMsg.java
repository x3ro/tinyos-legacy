/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReactNodeInfoMsg'
 * message type.
 */

package simx.mig;

public class ReactNodeInfoMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 203;

    /** Create a new ReactNodeInfoMsg of size 13. */
    public ReactNodeInfoMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReactNodeInfoMsg of the given data_length. */
    public ReactNodeInfoMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg with the given data_length
     * and base offset.
     */
    public ReactNodeInfoMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg using the given byte array
     * as backing store.
     */
    public ReactNodeInfoMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ReactNodeInfoMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReactNodeInfoMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg embedded in the given message
     * at the given base offset.
     */
    public ReactNodeInfoMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReactNodeInfoMsg embedded in the given message
     * at the given base offset and length.
     */
    public ReactNodeInfoMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReactNodeInfoMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [status=0x"+Long.toHexString(get_status())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [x=0x"+Long.toHexString(get_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [y=0x"+Long.toHexString(get_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [txpower=0x"+Long.toHexString(get_txpower())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pld0=0x"+Long.toHexString(get_pld0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (true).
     */
    public static boolean isSigned_id() {
        return true;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: status
    //   Field type: short, signed
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'status' is signed (true).
     */
    public static boolean isSigned_status() {
        return true;
    }

    /**
     * Return whether the field 'status' is an array (false).
     */
    public static boolean isArray_status() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'status'
     */
    public static int offset_status() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'status'
     */
    public static int offsetBits_status() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'status'
     */
    public short get_status() {
        return (short)getUIntBEElement(offsetBits_status(), 8);
    }

    /**
     * Set the value of the field 'status'
     */
    public void set_status(short value) {
        setUIntBEElement(offsetBits_status(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'status'
     */
    public static int size_status() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'status'
     */
    public static int sizeBits_status() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: x
    //   Field type: int, signed
    //   Offset (bits): 24
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'x' is signed (true).
     */
    public static boolean isSigned_x() {
        return true;
    }

    /**
     * Return whether the field 'x' is an array (false).
     */
    public static boolean isArray_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'x'
     */
    public static int offset_x() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'x'
     */
    public static int offsetBits_x() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'x'
     */
    public int get_x() {
        return (int)getSIntBEElement(offsetBits_x(), 32);
    }

    /**
     * Set the value of the field 'x'
     */
    public void set_x(int value) {
        setSIntBEElement(offsetBits_x(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'x'
     */
    public static int size_x() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'x'
     */
    public static int sizeBits_x() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y
    //   Field type: int, signed
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y' is signed (true).
     */
    public static boolean isSigned_y() {
        return true;
    }

    /**
     * Return whether the field 'y' is an array (false).
     */
    public static boolean isArray_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'y'
     */
    public static int offset_y() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y'
     */
    public static int offsetBits_y() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'y'
     */
    public int get_y() {
        return (int)getSIntBEElement(offsetBits_y(), 32);
    }

    /**
     * Set the value of the field 'y'
     */
    public void set_y(int value) {
        setSIntBEElement(offsetBits_y(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'y'
     */
    public static int size_y() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'y'
     */
    public static int sizeBits_y() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: txpower
    //   Field type: byte, signed
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'txpower' is signed (true).
     */
    public static boolean isSigned_txpower() {
        return true;
    }

    /**
     * Return whether the field 'txpower' is an array (false).
     */
    public static boolean isArray_txpower() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'txpower'
     */
    public static int offset_txpower() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'txpower'
     */
    public static int offsetBits_txpower() {
        return 88;
    }

    /**
     * Return the value (as a byte) of the field 'txpower'
     */
    public byte get_txpower() {
        return (byte)getSIntBEElement(offsetBits_txpower(), 8);
    }

    /**
     * Set the value of the field 'txpower'
     */
    public void set_txpower(byte value) {
        setSIntBEElement(offsetBits_txpower(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'txpower'
     */
    public static int size_txpower() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'txpower'
     */
    public static int sizeBits_txpower() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pld0
    //   Field type: byte, signed
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pld0' is signed (true).
     */
    public static boolean isSigned_pld0() {
        return true;
    }

    /**
     * Return whether the field 'pld0' is an array (false).
     */
    public static boolean isArray_pld0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pld0'
     */
    public static int offset_pld0() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pld0'
     */
    public static int offsetBits_pld0() {
        return 96;
    }

    /**
     * Return the value (as a byte) of the field 'pld0'
     */
    public byte get_pld0() {
        return (byte)getSIntBEElement(offsetBits_pld0(), 8);
    }

    /**
     * Set the value of the field 'pld0'
     */
    public void set_pld0(byte value) {
        setSIntBEElement(offsetBits_pld0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'pld0'
     */
    public static int size_pld0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pld0'
     */
    public static int sizeBits_pld0() {
        return 8;
    }

}
