<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>simx.inject.inject</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        Package&nbsp;simx ::
        <a href="simx.inject-module.html">Package&nbsp;inject</a> ::
        Module&nbsp;inject
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="simx.inject.inject-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="simx.inject.inject-module.html">Module simx.inject.inject</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-docstring">Bridge a serial forwarder and provide injection capabilities.  This is</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-docstring">designed to be used to allow a TOSSIM simulation environment to send</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-docstring">extra data up to the processing application, if any. The bridge only</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-docstring">allows injection on the Simulation&lt;-&gt;Application side. TOSSIM already</tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-docstring">provides a mechanism to directly inject packets into the simulator.</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-docstring">This implementation uses asynchronous IO that runs in a separate</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-docstring">thread. The Queue data-structure is used to provide thread-safe</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-docstring">access. Because a separate thread is used, C code must correctly</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-docstring">release the GIL to prevent starvation.</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-docstring">This is designed to bridge the sim-sf TOSSIM enchancement by Chad</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-docstring">Metcalf but it should be able to forward from any serial-forward</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-docstring">compliant server.</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"><tt class="py-docstring">Inject may also be used as a stand-alone without sim-sf. In this</tt> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">case packets will not be bridged. It should also be possible run</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">multiple SFInject instances at the same time (provided they don't try</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">to bind to the same ports).</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-docstring">Author: Paul Stickney @ WSU-V, May 2008</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">asyncore</tt> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">socket</tt> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">thread</tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt class="py-name">warnings</tt> <tt class="py-keyword">import</tt> <tt class="py-name">warn</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">logging</tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">os</tt> </tt>
<a name="L31"></a><tt class="py-lineno"> 31</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">traceback</tt> </tt>
<a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">sys</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-0" class="py-name" targets="Method simx.sync.time_control.TimeControl.time()=simx.sync.time_control.TimeControl-class.html#time"><a title="simx.sync.time_control.TimeControl.time" class="py-name" href="#" onclick="return doclink('link-0', 'time', 'link-0');">time</a></tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line"> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt class="py-name">tinyos</tt><tt class="py-op">.</tt><tt class="py-name">message</tt><tt class="py-op">.</tt><tt class="py-name">SerialPacket</tt> <tt class="py-keyword">import</tt> <tt class="py-name">SerialPacket</tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line"> </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line"><tt class="py-comment"># local packages</tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"><tt class="py-comment"></tt><tt class="py-keyword">from</tt> <tt id="link-1" class="py-name" targets="Module simx.inject.wiretap=simx.inject.wiretap-module.html"><a title="simx.inject.wiretap" class="py-name" href="#" onclick="return doclink('link-1', 'wiretap', 'link-1');">wiretap</a></tt> <tt class="py-keyword">import</tt> <tt id="link-2" class="py-name" targets="Class simx.inject.wiretap.InjectUpstream=simx.inject.wiretap.InjectUpstream-class.html"><a title="simx.inject.wiretap.InjectUpstream" class="py-name" href="#" onclick="return doclink('link-2', 'InjectUpstream', 'link-2');">InjectUpstream</a></tt><tt class="py-op">,</tt> <tt id="link-3" class="py-name" targets="Class simx.inject.wiretap.InjectDownstream=simx.inject.wiretap.InjectDownstream-class.html"><a title="simx.inject.wiretap.InjectDownstream" class="py-name" href="#" onclick="return doclink('link-3', 'InjectDownstream', 'link-3');">InjectDownstream</a></tt><tt class="py-op">,</tt> <tt id="link-4" class="py-name" targets="Class simx.inject.wiretap.InjectTrigger=simx.inject.wiretap.InjectTrigger-class.html"><a title="simx.inject.wiretap.InjectTrigger" class="py-name" href="#" onclick="return doclink('link-4', 'InjectTrigger', 'link-4');">InjectTrigger</a></tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-5" class="py-name" targets="Module simx.inject.util=simx.inject.util-module.html,Module simx.sensor.util=simx.sensor.util-module.html"><a title="simx.inject.util
simx.sensor.util" class="py-name" href="#" onclick="return doclink('link-5', 'util', 'link-5');">util</a></tt> <tt class="py-keyword">import</tt> <tt id="link-6" class="py-name" targets="Function simx.inject.util.sync_read()=simx.inject.util-module.html#sync_read"><a title="simx.inject.util.sync_read" class="py-name" href="#" onclick="return doclink('link-6', 'sync_read', 'link-6');">sync_read</a></tt><tt class="py-op">,</tt> <tt id="link-7" class="py-name" targets="Function simx.inject.util.is_trigger()=simx.inject.util-module.html#is_trigger"><a title="simx.inject.util.is_trigger" class="py-name" href="#" onclick="return doclink('link-7', 'is_trigger', 'link-7');">is_trigger</a></tt><tt class="py-op">,</tt> <tt id="link-8" class="py-name" targets="Function simx.inject.util.is_sfclient()=simx.inject.util-module.html#is_sfclient"><a title="simx.inject.util.is_sfclient" class="py-name" href="#" onclick="return doclink('link-8', 'is_sfclient', 'link-8');">is_sfclient</a></tt><tt class="py-op">,</tt> \ </tt>
<a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line">    <tt id="link-9" class="py-name" targets="Variable simx.inject.inject.TRIGGER_MAGIC=simx.inject.inject-module.html#TRIGGER_MAGIC,Variable simx.inject.util.TRIGGER_MAGIC=simx.inject.util-module.html#TRIGGER_MAGIC"><a title="simx.inject.inject.TRIGGER_MAGIC
simx.inject.util.TRIGGER_MAGIC" class="py-name" href="#" onclick="return doclink('link-9', 'TRIGGER_MAGIC', 'link-9');">TRIGGER_MAGIC</a></tt><tt class="py-op">,</tt> <tt id="link-10" class="py-name" targets="Variable simx.inject.inject.SFCLIENT_MAGIC=simx.inject.inject-module.html#SFCLIENT_MAGIC,Variable simx.inject.util.SFCLIENT_MAGIC=simx.inject.util-module.html#SFCLIENT_MAGIC"><a title="simx.inject.inject.SFCLIENT_MAGIC
simx.inject.util.SFCLIENT_MAGIC" class="py-name" href="#" onclick="return doclink('link-10', 'SFCLIENT_MAGIC', 'link-10');">SFCLIENT_MAGIC</a></tt> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-11" class="py-name" targets="Module simx.inject.queue=simx.inject.queue-module.html"><a title="simx.inject.queue" class="py-name" href="#" onclick="return doclink('link-11', 'queue', 'link-11');">queue</a></tt> <tt class="py-keyword">import</tt> <tt id="link-12" class="py-name" targets="Class simx.inject.queue.FifoQueue=simx.inject.queue.FifoQueue-class.html"><a title="simx.inject.queue.FifoQueue" class="py-name" href="#" onclick="return doclink('link-12', 'FifoQueue', 'link-12');">FifoQueue</a></tt> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line"> </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line"> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"><tt id="link-13" class="py-name" targets="Variable simx.inject.inject.DEFAULT_IN_SIZE=simx.inject.inject-module.html#DEFAULT_IN_SIZE"><a title="simx.inject.inject.DEFAULT_IN_SIZE" class="py-name" href="#" onclick="return doclink('link-13', 'DEFAULT_IN_SIZE', 'link-13');">DEFAULT_IN_SIZE</a></tt> <tt class="py-op">=</tt> <tt class="py-number">1500</tt> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"><tt id="link-14" class="py-name" targets="Variable simx.inject.inject.DEFAULT_OUT_SIZE=simx.inject.inject-module.html#DEFAULT_OUT_SIZE"><a title="simx.inject.inject.DEFAULT_OUT_SIZE" class="py-name" href="#" onclick="return doclink('link-14', 'DEFAULT_OUT_SIZE', 'link-14');">DEFAULT_OUT_SIZE</a></tt> <tt class="py-op">=</tt> <tt class="py-number">1500</tt> </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line"> </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line"><tt id="link-15" class="py-name" targets="Variable simx.inject.inject.SELECT_IDLE_SECONDS=simx.inject.inject-module.html#SELECT_IDLE_SECONDS"><a title="simx.inject.inject.SELECT_IDLE_SECONDS" class="py-name" href="#" onclick="return doclink('link-15', 'SELECT_IDLE_SECONDS', 'link-15');">SELECT_IDLE_SECONDS</a></tt> <tt class="py-op">=</tt> <tt class="py-number">10</tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line"><tt id="link-16" class="py-name" targets="Variable simx.inject.inject.CONNECTION_QUEUE_SIZE=simx.inject.inject-module.html#CONNECTION_QUEUE_SIZE"><a title="simx.inject.inject.CONNECTION_QUEUE_SIZE" class="py-name" href="#" onclick="return doclink('link-16', 'CONNECTION_QUEUE_SIZE', 'link-16');">CONNECTION_QUEUE_SIZE</a></tt> <tt class="py-op">=</tt> <tt class="py-number">2</tt> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line"> </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line"> </tt>
<a name="InvalidVersionWarning"></a><div id="InvalidVersionWarning-def"><a name="L51"></a><tt class="py-lineno"> 51</tt> <a class="py-toggle" href="#" id="InvalidVersionWarning-toggle" onclick="return toggle('InvalidVersionWarning');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="simx.inject.inject.InvalidVersionWarning-class.html">InvalidVersionWarning</a><tt class="py-op">(</tt><tt class="py-base-class">RuntimeWarning</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="InvalidVersionWarning-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="InvalidVersionWarning-expanded"><a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line"><tt class="py-docstring">    Warning generated when an invalid version is detected.</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="InvalidVersionWarning.__init__"></a><div id="InvalidVersionWarning.__init__-def"><a name="L55"></a><tt class="py-lineno"> 55</tt> <a class="py-toggle" href="#" id="InvalidVersionWarning.__init__-toggle" onclick="return toggle('InvalidVersionWarning.__init__');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.InvalidVersionWarning-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">msg</tt><tt class="py-op">=</tt><tt class="py-string">"invalid serial-forward version"</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="InvalidVersionWarning.__init__-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="InvalidVersionWarning.__init__-expanded"><a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line">        <tt class="py-name">RuntimeWarning</tt><tt class="py-op">.</tt><tt id="link-17" class="py-name" targets="Method simx.base.channel.ChannelBridge.__init__()=simx.base.channel.ChannelBridge-class.html#__init__,Method simx.base.extension.Extension.__init__()=simx.base.extension.Extension-class.html#__init__,Method simx.base.node.Node.__init__()=simx.base.node.Node-class.html#__init__,Method simx.base.radio.RadioRedirect.__init__()=simx.base.radio.RadioRedirect-class.html#__init__,Method simx.base.tossim.TossimBase.__init__()=simx.base.tossim.TossimBase-class.html#__init__,Method simx.dyntopo.Link.BasicLinkModel.__init__()=simx.dyntopo.Link.BasicLinkModel-class.html#__init__,Method simx.dyntopo.Topo.GenericTopo.__init__()=simx.dyntopo.Topo.GenericTopo-class.html#__init__,Method simx.event.event.Manager.__init__()=simx.event.event.Manager-class.html#__init__,Method simx.event.event.PriorityQueue.__init__()=simx.event.event.PriorityQueue-class.html#__init__,Method simx.inject.inject.Inject.__init__()=simx.inject.inject.Inject-class.html#__init__,Method simx.inject.inject.InvalidVersionWarning.__init__()=simx.inject.inject.InvalidVersionWarning-class.html#__init__,Method simx.inject.queue.FifoQueue.__init__()=simx.inject.queue.FifoQueue-class.html#__init__,Method simx.inject.queue.QueueFullWarning.__init__()=simx.inject.queue.QueueFullWarning-class.html#__init__,Method simx.inject.wiretap.InjectDownstream.__init__()=simx.inject.wiretap.InjectDownstream-class.html#__init__,Method simx.inject.wiretap.InjectPacketSock.__init__()=simx.inject.wiretap.InjectPacketSock-class.html#__init__,Method simx.inject.wiretap.InjectSock.__init__()=simx.inject.wiretap.InjectSock-class.html#__init__,Method simx.inject.wiretap.InjectTrigger.__init__()=simx.inject.wiretap.InjectTrigger-class.html#__init__,Method simx.inject.wiretap.InjectUpstream.__init__()=simx.inject.wiretap.InjectUpstream-class.html#__init__,Method simx.probe.parse.LookupError.__init__()=simx.probe.parse.LookupError-class.html#__init__,Method simx.probe.parse.ProbeLink.__init__()=simx.probe.parse.ProbeLink-class.html#__init__,Method simx.probe.parse.ProbeLoader.__init__()=simx.probe.parse.ProbeLoader-class.html#__init__,Method simx.probe.parse.ReplacementError.__init__()=simx.probe.parse.ReplacementError-class.html#__init__,Method simx.probe.probe.CachingProber.__init__()=simx.probe.probe.CachingProber-class.html#__init__,Method simx.probe.probe.Probe.__init__()=simx.probe.probe.Probe-class.html#__init__,Method simx.probe.probe.ProbeArray.__init__()=simx.probe.probe.ProbeArray-class.html#__init__,Method simx.probe.probe.ProbeStruct.__init__()=simx.probe.probe.ProbeStruct-class.html#__init__,Method simx.probe.probedef.Array.__init__()=simx.probe.probedef.Array-class.html#__init__,Method simx.probe.probedef.Definition.__init__()=simx.probe.probedef.Definition-class.html#__init__,Method simx.probe.probedef.Link.__init__()=simx.probe.probedef.Link-class.html#__init__,Method simx.probe.probedef.Primitive.__init__()=simx.probe.probedef.Primitive-class.html#__init__,Method simx.probe.probedef.Struct.__init__()=simx.probe.probedef.Struct-class.html#__init__,Method simx.sensor.extension.SensorExtension.__init__()=simx.sensor.extension.SensorExtension-class.html#__init__,Method simx.sensor.sensor.SensorControl.__init__()=simx.sensor.sensor.SensorControl-class.html#__init__,Method simx.sensor.sensor.SensorError.__init__()=simx.sensor.sensor.SensorError-class.html#__init__,Method simx.sensor.streamer.BinaryStreamer.__init__()=simx.sensor.streamer.BinaryStreamer-class.html#__init__,Method simx.sensor.streamer.SacStreamer.__init__()=simx.sensor.streamer.SacStreamer-class.html#__init__,Method simx.sensor.streamer.Streamer.__init__()=simx.sensor.streamer.Streamer-class.html#__init__,Method simx.sensor.streamer.TextStreamer.__init__()=simx.sensor.streamer.TextStreamer-class.html#__init__,Method simx.sync.time_control.TimeControl.__init__()=simx.sync.time_control.TimeControl-class.html#__init__"><a title="simx.base.channel.ChannelBridge.__init__
simx.base.extension.Extension.__init__
simx.base.node.Node.__init__
simx.base.radio.RadioRedirect.__init__
simx.base.tossim.TossimBase.__init__
simx.dyntopo.Link.BasicLinkModel.__init__
simx.dyntopo.Topo.GenericTopo.__init__
simx.event.event.Manager.__init__
simx.event.event.PriorityQueue.__init__
simx.inject.inject.Inject.__init__
simx.inject.inject.InvalidVersionWarning.__init__
simx.inject.queue.FifoQueue.__init__
simx.inject.queue.QueueFullWarning.__init__
simx.inject.wiretap.InjectDownstream.__init__
simx.inject.wiretap.InjectPacketSock.__init__
simx.inject.wiretap.InjectSock.__init__
simx.inject.wiretap.InjectTrigger.__init__
simx.inject.wiretap.InjectUpstream.__init__
simx.probe.parse.LookupError.__init__
simx.probe.parse.ProbeLink.__init__
simx.probe.parse.ProbeLoader.__init__
simx.probe.parse.ReplacementError.__init__
simx.probe.probe.CachingProber.__init__
simx.probe.probe.Probe.__init__
simx.probe.probe.ProbeArray.__init__
simx.probe.probe.ProbeStruct.__init__
simx.probe.probedef.Array.__init__
simx.probe.probedef.Definition.__init__
simx.probe.probedef.Link.__init__
simx.probe.probedef.Primitive.__init__
simx.probe.probedef.Struct.__init__
simx.sensor.extension.SensorExtension.__init__
simx.sensor.sensor.SensorControl.__init__
simx.sensor.sensor.SensorError.__init__
simx.sensor.streamer.BinaryStreamer.__init__
simx.sensor.streamer.SacStreamer.__init__
simx.sensor.streamer.Streamer.__init__
simx.sensor.streamer.TextStreamer.__init__
simx.sync.time_control.TimeControl.__init__" class="py-name" href="#" onclick="return doclink('link-17', '__init__', 'link-17');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">msg</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line"> </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line"> </tt>
<a name="Inject"></a><div id="Inject-def"><a name="L59"></a><tt class="py-lineno"> 59</tt> <a class="py-toggle" href="#" id="Inject-toggle" onclick="return toggle('Inject');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html">Inject</a><tt class="py-op">(</tt><tt class="py-base-class">asyncore</tt><tt class="py-op">.</tt><tt class="py-base-class">dispatcher</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="Inject-expanded"><a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line"><tt class="py-docstring">    Select-dispatch to move packets across sf-compatible streams.</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line"> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line">    <tt id="link-18" class="py-name" targets="Variable simx.inject.inject.Inject.log=simx.inject.inject.Inject-class.html#log"><a title="simx.inject.inject.Inject.log" class="py-name" href="#" onclick="return doclink('link-18', 'log', 'link-18');">log</a></tt> <tt class="py-op">=</tt> <tt class="py-name">logging</tt><tt class="py-op">.</tt><tt class="py-name">getLogger</tt><tt class="py-op">(</tt><tt class="py-name">__name__</tt><tt class="py-op">)</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line"> </tt>
<a name="Inject.__init__"></a><div id="Inject.__init__-def"><a name="L66"></a><tt class="py-lineno"> 66</tt> <a class="py-toggle" href="#" id="Inject.__init__-toggle" onclick="return toggle('Inject.__init__');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">port</tt><tt class="py-op">,</tt> <tt class="py-param">bridge_port</tt><tt class="py-op">=</tt><tt class="py-name">None</tt><tt class="py-op">,</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line">                 <tt class="py-param">queue_in_size</tt><tt class="py-op">=</tt><tt id="link-19" class="py-name"><a title="simx.inject.inject.DEFAULT_IN_SIZE" class="py-name" href="#" onclick="return doclink('link-19', 'DEFAULT_IN_SIZE', 'link-13');">DEFAULT_IN_SIZE</a></tt><tt class="py-op">,</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line">                 <tt class="py-param">queue_out_size</tt><tt class="py-op">=</tt><tt id="link-20" class="py-name"><a title="simx.inject.inject.DEFAULT_OUT_SIZE" class="py-name" href="#" onclick="return doclink('link-20', 'DEFAULT_OUT_SIZE', 'link-14');">DEFAULT_OUT_SIZE</a></tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.__init__-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.__init__-expanded"><a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line"><tt class="py-docstring">        Initialize.</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line"><tt class="py-docstring">        port specifies the IP port to listen on. bridge_port is used</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line"><tt class="py-docstring">        for briding to an existing serial-forward (such as that</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line"><tt class="py-docstring">        provided by sim-sf).</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line"><tt class="py-docstring">        queue_in_size and queue_out_size limit the maximum number of</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line"><tt class="py-docstring">        queued elements. A size of zero specified that there is no</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line"><tt class="py-docstring">        limit. When the queues fill up a warning is generated and the</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line"><tt class="py-docstring">        oldest element is dropped.</tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line">        <tt class="py-name">asyncore</tt><tt class="py-op">.</tt><tt class="py-name">dispatcher</tt><tt class="py-op">.</tt><tt id="link-21" class="py-name"><a title="simx.base.channel.ChannelBridge.__init__
simx.base.extension.Extension.__init__
simx.base.node.Node.__init__
simx.base.radio.RadioRedirect.__init__
simx.base.tossim.TossimBase.__init__
simx.dyntopo.Link.BasicLinkModel.__init__
simx.dyntopo.Topo.GenericTopo.__init__
simx.event.event.Manager.__init__
simx.event.event.PriorityQueue.__init__
simx.inject.inject.Inject.__init__
simx.inject.inject.InvalidVersionWarning.__init__
simx.inject.queue.FifoQueue.__init__
simx.inject.queue.QueueFullWarning.__init__
simx.inject.wiretap.InjectDownstream.__init__
simx.inject.wiretap.InjectPacketSock.__init__
simx.inject.wiretap.InjectSock.__init__
simx.inject.wiretap.InjectTrigger.__init__
simx.inject.wiretap.InjectUpstream.__init__
simx.probe.parse.LookupError.__init__
simx.probe.parse.ProbeLink.__init__
simx.probe.parse.ProbeLoader.__init__
simx.probe.parse.ReplacementError.__init__
simx.probe.probe.CachingProber.__init__
simx.probe.probe.Probe.__init__
simx.probe.probe.ProbeArray.__init__
simx.probe.probe.ProbeStruct.__init__
simx.probe.probedef.Array.__init__
simx.probe.probedef.Definition.__init__
simx.probe.probedef.Link.__init__
simx.probe.probedef.Primitive.__init__
simx.probe.probedef.Struct.__init__
simx.sensor.extension.SensorExtension.__init__
simx.sensor.sensor.SensorControl.__init__
simx.sensor.sensor.SensorError.__init__
simx.sensor.streamer.BinaryStreamer.__init__
simx.sensor.streamer.SacStreamer.__init__
simx.sensor.streamer.Streamer.__init__
simx.sensor.streamer.TextStreamer.__init__
simx.sync.time_control.TimeControl.__init__" class="py-name" href="#" onclick="return doclink('link-21', '__init__', 'link-17');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">)</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line"> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">        <tt class="py-comment"># maintained with callbacks from InjectSock, etc.</tt> </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">upstream</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">bridge_source</tt> <tt class="py-op">=</tt> <tt class="py-name">None</tt> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line"> </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">        <tt class="py-comment"># of (client, packet)</tt> </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># where client is the source, or None if from the proxy source</tt> </tt>
<a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_in</tt> <tt class="py-op">=</tt> <tt id="link-22" class="py-name"><a title="simx.inject.queue.FifoQueue" class="py-name" href="#" onclick="return doclink('link-22', 'FifoQueue', 'link-12');">FifoQueue</a></tt><tt class="py-op">(</tt><tt class="py-name">queue_in_size</tt><tt class="py-op">)</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line">        <tt class="py-comment"># of (target, packet)</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># where target is a client to send to, or None to send to all</tt> </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_out</tt> <tt class="py-op">=</tt> <tt id="link-23" class="py-name"><a title="simx.inject.queue.FifoQueue" class="py-name" href="#" onclick="return doclink('link-23', 'FifoQueue', 'link-12');">FifoQueue</a></tt><tt class="py-op">(</tt><tt class="py-name">queue_out_size</tt><tt class="py-op">)</tt> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line"> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-24" class="py-name" targets="Method simx.inject.inject.Inject._init_server()=simx.inject.inject.Inject-class.html#_init_server"><a title="simx.inject.inject.Inject._init_server" class="py-name" href="#" onclick="return doclink('link-24', '_init_server', 'link-24');">_init_server</a></tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-string">""</tt><tt class="py-op">,</tt> <tt class="py-name">port</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-25" class="py-name" targets="Method simx.inject.inject.Inject._init_trigger()=simx.inject.inject.Inject-class.html#_init_trigger"><a title="simx.inject.inject.Inject._init_trigger" class="py-name" href="#" onclick="return doclink('link-25', '_init_trigger', 'link-25');">_init_trigger</a></tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-string">"127.0.0.1"</tt><tt class="py-op">,</tt> <tt class="py-name">port</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line"><tt class="py-comment">#        if bridge_port is not None:</tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line"><tt class="py-comment"></tt><tt class="py-comment">#            self._init_bridge(("127.0.0.1", bridge_port))</tt> </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line"><tt class="py-comment"></tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">thread</tt> <tt class="py-op">=</tt> <tt class="py-name">None</tt> </tt>
</div><a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line"> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line"> </tt>
<a name="Inject._init_server"></a><div id="Inject._init_server-def"><a name="L103"></a><tt class="py-lineno">103</tt> <a class="py-toggle" href="#" id="Inject._init_server-toggle" onclick="return toggle('Inject._init_server');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_init_server">_init_server</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">server_addr</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._init_server-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._init_server-expanded"><a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line"><tt class="py-docstring">        Setup server socket.</tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">create_socket</tt><tt class="py-op">(</tt><tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">AF_INET</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SOCK_STREAM</tt><tt class="py-op">)</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">setsockopt</tt><tt class="py-op">(</tt><tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SOL_SOCKET</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SO_REUSEADDR</tt><tt class="py-op">,</tt> <tt class="py-number">1</tt><tt class="py-op">)</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-26" class="py-name" targets="Method simx.probe.probedef.Array.bind()=simx.probe.probedef.Array-class.html#bind,Method simx.probe.probedef.Definition.bind()=simx.probe.probedef.Definition-class.html#bind,Method simx.probe.probedef.Primitive.bind()=simx.probe.probedef.Primitive-class.html#bind,Method simx.probe.probedef.Struct.bind()=simx.probe.probedef.Struct-class.html#bind"><a title="simx.probe.probedef.Array.bind
simx.probe.probedef.Definition.bind
simx.probe.probedef.Primitive.bind
simx.probe.probedef.Struct.bind" class="py-name" href="#" onclick="return doclink('link-26', 'bind', 'link-26');">bind</a></tt><tt class="py-op">(</tt><tt class="py-name">server_addr</tt><tt class="py-op">)</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">listen</tt><tt class="py-op">(</tt><tt id="link-27" class="py-name"><a title="simx.inject.inject.CONNECTION_QUEUE_SIZE" class="py-name" href="#" onclick="return doclink('link-27', 'CONNECTION_QUEUE_SIZE', 'link-16');">CONNECTION_QUEUE_SIZE</a></tt><tt class="py-op">)</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt><tt class="py-op">[</tt><tt class="py-name">self</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt> </tt>
</div><a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line"> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line"> </tt>
<a name="Inject._init_bridge"></a><div id="Inject._init_bridge-def"><a name="L114"></a><tt class="py-lineno">114</tt> <a class="py-toggle" href="#" id="Inject._init_bridge-toggle" onclick="return toggle('Inject._init_bridge');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_init_bridge">_init_bridge</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">bridge_addr</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._init_bridge-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._init_bridge-expanded"><a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line"><tt class="py-docstring">        Setup bridge socket.</tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line">        <tt class="py-name">source</tt> <tt class="py-op">=</tt> <tt id="link-28" class="py-name"><a title="simx.inject.wiretap.InjectDownstream" class="py-name" href="#" onclick="return doclink('link-28', 'InjectDownstream', 'link-3');">InjectDownstream</a></tt><tt class="py-op">(</tt><tt class="py-name">sf_inject</tt><tt class="py-op">=</tt><tt class="py-name">self</tt><tt class="py-op">)</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">        <tt class="py-name">source</tt><tt class="py-op">.</tt><tt class="py-name">create_socket</tt><tt class="py-op">(</tt><tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">AF_INET</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SOCK_STREAM</tt><tt class="py-op">)</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">        <tt class="py-name">source</tt><tt class="py-op">.</tt><tt id="link-29" class="py-name" targets="Method simx.sensor.sensor.SensorControl.connect()=simx.sensor.sensor.SensorControl-class.html#connect"><a title="simx.sensor.sensor.SensorControl.connect" class="py-name" href="#" onclick="return doclink('link-29', 'connect', 'link-29');">connect</a></tt><tt class="py-op">(</tt><tt class="py-name">bridge_addr</tt><tt class="py-op">)</tt> </tt>
<a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line">        <tt class="py-comment"># sim-sf will block until it receives the serial-forward</tt> </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># version and, since it (sf.process()) does not perform a GIL</tt> </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># release, this thread will never resume. This will ensure</tt> </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># that the sim-sf serial forwarder doesn't hang (here) by</tt> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># forcing data onto the wire.</tt> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">source</tt><tt class="py-op">.</tt><tt class="py-name">send</tt><tt class="py-op">(</tt><tt id="link-30" class="py-name"><a title="simx.inject.inject.SFCLIENT_MAGIC
simx.inject.util.SFCLIENT_MAGIC" class="py-name" href="#" onclick="return doclink('link-30', 'SFCLIENT_MAGIC', 'link-10');">SFCLIENT_MAGIC</a></tt><tt class="py-op">)</tt> </tt>
<a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">bridge_source</tt> <tt class="py-op">=</tt> <tt class="py-name">source</tt> </tt>
</div><a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line"> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line"> </tt>
<a name="Inject._init_trigger"></a><div id="Inject._init_trigger-def"><a name="L130"></a><tt class="py-lineno">130</tt> <a class="py-toggle" href="#" id="Inject._init_trigger-toggle" onclick="return toggle('Inject._init_trigger');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_init_trigger">_init_trigger</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">server_addr</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._init_trigger-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._init_trigger-expanded"><a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line"><tt class="py-docstring">        Setup trigger socket.</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line"><tt class="py-docstring">        The trigger is used to interrupt the asyncore loop and force</tt> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line"><tt class="py-docstring">        examination of the message queue.</tt> </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">        <tt class="py-name">trigger</tt> <tt class="py-op">=</tt> <tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">socket</tt><tt class="py-op">(</tt><tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">AF_INET</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SOCK_STREAM</tt><tt class="py-op">)</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">        <tt class="py-name">trigger</tt><tt class="py-op">.</tt><tt id="link-31" class="py-name"><a title="simx.sensor.sensor.SensorControl.connect" class="py-name" href="#" onclick="return doclink('link-31', 'connect', 'link-29');">connect</a></tt><tt class="py-op">(</tt><tt class="py-name">server_addr</tt><tt class="py-op">)</tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line">        <tt class="py-name">trigger</tt><tt class="py-op">.</tt><tt class="py-name">shutdown</tt><tt class="py-op">(</tt><tt class="py-name">socket</tt><tt class="py-op">.</tt><tt class="py-name">SHUT_RD</tt><tt class="py-op">)</tt> </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line">        <tt class="py-comment"># How the handle_accept identifies this as a trigger. Very</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># important to prevent blocking with handle_accept+sync_read.</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">trigger</tt><tt class="py-op">.</tt><tt class="py-name">send</tt><tt class="py-op">(</tt><tt id="link-32" class="py-name"><a title="simx.inject.inject.TRIGGER_MAGIC
simx.inject.util.TRIGGER_MAGIC" class="py-name" href="#" onclick="return doclink('link-32', 'TRIGGER_MAGIC', 'link-9');">TRIGGER_MAGIC</a></tt><tt class="py-op">)</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">trigger</tt> <tt class="py-op">=</tt> <tt class="py-name">trigger</tt> </tt>
</div><a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line"> </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line"> </tt>
<a name="Inject.packet_read"></a><div id="Inject.packet_read-def"><a name="L146"></a><tt class="py-lineno">146</tt> <a class="py-toggle" href="#" id="Inject.packet_read-toggle" onclick="return toggle('Inject.packet_read');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#packet_read">packet_read</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">conn</tt><tt class="py-op">,</tt> <tt class="py-param">packet</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.packet_read-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.packet_read-expanded"><a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line"><tt class="py-docstring">        Read in a packet and dispatch -- asyncore callback.</tt> </tt>
<a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">conn</tt> <tt class="py-op">==</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">bridge_source</tt><tt class="py-op">:</tt> </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line">            <tt class="py-comment"># TODO: fix (huh?)</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">send_packet_upstream</tt><tt class="py-op">(</tt><tt class="py-name">packet</tt><tt class="py-op">)</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_in</tt><tt class="py-op">.</tt><tt id="link-33" class="py-name" targets="Method simx.inject.queue.FifoQueue.fifo_put()=simx.inject.queue.FifoQueue-class.html#fifo_put"><a title="simx.inject.queue.FifoQueue.fifo_put" class="py-name" href="#" onclick="return doclink('link-33', 'fifo_put', 'link-33');">fifo_put</a></tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-name">conn</tt><tt class="py-op">,</tt> <tt class="py-name">packet</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">            <tt class="py-comment"># foward to motes (should be filtered)</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-keyword">if</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">bridge_source</tt><tt class="py-op">:</tt> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">bridge_source</tt><tt class="py-op">.</tt><tt id="link-34" class="py-name" targets="Method simx.inject.wiretap.InjectPacketSock.write_packet()=simx.inject.wiretap.InjectPacketSock-class.html#write_packet,Method simx.inject.wiretap.InjectTrigger.write_packet()=simx.inject.wiretap.InjectTrigger-class.html#write_packet"><a title="simx.inject.wiretap.InjectPacketSock.write_packet
simx.inject.wiretap.InjectTrigger.write_packet" class="py-name" href="#" onclick="return doclink('link-34', 'write_packet', 'link-34');">write_packet</a></tt><tt class="py-op">(</tt><tt class="py-name">packet</tt><tt class="py-op">)</tt> </tt>
</div><a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line"> </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line">             </tt>
<a name="Inject.handle_accept"></a><div id="Inject.handle_accept-def"><a name="L160"></a><tt class="py-lineno">160</tt> <a class="py-toggle" href="#" id="Inject.handle_accept-toggle" onclick="return toggle('Inject.handle_accept');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#handle_accept">handle_accept</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.handle_accept-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.handle_accept-expanded"><a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line"><tt class="py-docstring">        Process new connections (sf-client or trigger) -- asyncore</tt> </tt>
<a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line"><tt class="py-docstring">        callback.</tt> </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line">        <tt class="py-name">client</tt><tt class="py-op">,</tt> <tt class="py-name">addr</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">accept</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line">        <tt class="py-comment"># Determine who connected and if they look valid. This is done</tt> </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-comment"># first to siphon off the 'trigger' handler. It also blocks.</tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-name">magic</tt> <tt class="py-op">=</tt> <tt id="link-35" class="py-name"><a title="simx.inject.util.sync_read" class="py-name" href="#" onclick="return doclink('link-35', 'sync_read', 'link-6');">sync_read</a></tt><tt class="py-op">(</tt><tt class="py-name">client</tt><tt class="py-op">,</tt> <tt class="py-number">2</tt><tt class="py-op">)</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line"> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt id="link-36" class="py-name"><a title="simx.inject.util.is_trigger" class="py-name" href="#" onclick="return doclink('link-36', 'is_trigger', 'link-7');">is_trigger</a></tt><tt class="py-op">(</tt><tt class="py-name">magic</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line">            <tt id="link-37" class="py-name"><a title="simx.inject.wiretap.InjectTrigger" class="py-name" href="#" onclick="return doclink('link-37', 'InjectTrigger', 'link-4');">InjectTrigger</a></tt><tt class="py-op">(</tt><tt class="py-name">sf_inject</tt><tt class="py-op">=</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">=</tt><tt class="py-name">client</tt><tt class="py-op">)</tt> </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line"> </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-38" class="py-name"><a title="simx.inject.util.is_sfclient" class="py-name" href="#" onclick="return doclink('link-38', 'is_sfclient', 'link-8');">is_sfclient</a></tt><tt class="py-op">(</tt><tt class="py-name">magic</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line">            <tt id="link-39" class="py-name"><a title="simx.inject.wiretap.InjectUpstream" class="py-name" href="#" onclick="return doclink('link-39', 'InjectUpstream', 'link-2');">InjectUpstream</a></tt><tt class="py-op">(</tt><tt class="py-name">sf_inject</tt><tt class="py-op">=</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">socket</tt><tt class="py-op">=</tt><tt class="py-name">client</tt><tt class="py-op">)</tt> </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line">            <tt class="py-name">client</tt><tt class="py-op">.</tt><tt class="py-name">send</tt><tt class="py-op">(</tt><tt id="link-40" class="py-name"><a title="simx.inject.inject.SFCLIENT_MAGIC
simx.inject.util.SFCLIENT_MAGIC" class="py-name" href="#" onclick="return doclink('link-40', 'SFCLIENT_MAGIC', 'link-10');">SFCLIENT_MAGIC</a></tt><tt class="py-op">)</tt> </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line"> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line">            <tt class="py-name">warn</tt><tt class="py-op">(</tt><tt id="link-41" class="py-name" targets="Class simx.inject.inject.InvalidVersionWarning=simx.inject.inject.InvalidVersionWarning-class.html"><a title="simx.inject.inject.InvalidVersionWarning" class="py-name" href="#" onclick="return doclink('link-41', 'InvalidVersionWarning', 'link-41');">InvalidVersionWarning</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line">            <tt class="py-name">client</tt><tt class="py-op">.</tt><tt class="py-name">close</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L180"></a><tt class="py-lineno">180</tt>  <tt class="py-line"> </tt>
<a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line"> </tt>
<a name="Inject.attach_conn"></a><div id="Inject.attach_conn-def"><a name="L182"></a><tt class="py-lineno">182</tt> <a class="py-toggle" href="#" id="Inject.attach_conn-toggle" onclick="return toggle('Inject.attach_conn');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#attach_conn">attach_conn</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">conn</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.attach_conn-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.attach_conn-expanded"><a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line"><tt class="py-docstring">        Attach a connections.</tt> </tt>
<a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">conn</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt><tt class="py-op">:</tt> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt class="py-name">isinstance</tt><tt class="py-op">(</tt><tt class="py-name">conn</tt><tt class="py-op">,</tt> <tt id="link-42" class="py-name"><a title="simx.inject.wiretap.InjectUpstream" class="py-name" href="#" onclick="return doclink('link-42', 'InjectUpstream', 'link-2');">InjectUpstream</a></tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">upstream</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">conn</tt><tt class="py-op">)</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt><tt class="py-op">[</tt><tt class="py-name">conn</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">conn</tt> </tt>
</div><a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line"> </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line"> </tt>
<a name="Inject.detach_conn"></a><div id="Inject.detach_conn-def"><a name="L192"></a><tt class="py-lineno">192</tt> <a class="py-toggle" href="#" id="Inject.detach_conn-toggle" onclick="return toggle('Inject.detach_conn');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#detach_conn">detach_conn</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">conn</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.detach_conn-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.detach_conn-expanded"><a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line"><tt class="py-docstring">        Remove a connection.</tt> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">conn</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">upstream</tt><tt class="py-op">:</tt> </tt>
<a name="L197"></a><tt class="py-lineno">197</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">upstream</tt><tt class="py-op">.</tt><tt id="link-43" class="py-name" targets="Method simx.base.radio.RadioRedirect.remove()=simx.base.radio.RadioRedirect-class.html#remove"><a title="simx.base.radio.RadioRedirect.remove" class="py-name" href="#" onclick="return doclink('link-43', 'remove', 'link-43');">remove</a></tt><tt class="py-op">(</tt><tt class="py-name">conn</tt><tt class="py-op">)</tt> </tt>
<a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line">        <tt class="py-keyword">del</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt><tt class="py-op">[</tt><tt class="py-name">conn</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
</div><a name="L199"></a><tt class="py-lineno">199</tt>  <tt class="py-line"> </tt>
<a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line">    <tt class="py-comment">#</tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-comment"># Internal</tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-comment">#</tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line"><tt class="py-comment"></tt> </tt>
<a name="Inject._message_to_packet"></a><div id="Inject._message_to_packet-def"><a name="L204"></a><tt class="py-lineno">204</tt> <a class="py-toggle" href="#" id="Inject._message_to_packet-toggle" onclick="return toggle('Inject._message_to_packet');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_message_to_packet">_message_to_packet</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">msg</tt><tt class="py-op">,</tt> <tt class="py-param">dest</tt><tt class="py-op">=</tt><tt class="py-number">0xFFFF</tt><tt class="py-op">,</tt> <tt class="py-param">group</tt><tt class="py-op">=</tt><tt class="py-number">0xAA</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._message_to_packet-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._message_to_packet-expanded"><a name="L205"></a><tt class="py-lineno">205</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line"><tt class="py-docstring">        Wraps a message in an AM (Serial) packet.</tt> </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line">        <tt class="py-name">payload</tt> <tt class="py-op">=</tt> <tt class="py-name">msg</tt><tt class="py-op">.</tt><tt class="py-name">dataGet</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line">        <tt class="py-name">am_type</tt> <tt class="py-op">=</tt> <tt class="py-name">msg</tt><tt class="py-op">.</tt><tt class="py-name">amType</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line">        <tt class="py-name">pkt</tt> <tt class="py-op">=</tt> <tt class="py-name">SerialPacket</tt><tt class="py-op">(</tt><tt class="py-name">None</tt><tt class="py-op">)</tt> </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line">        <tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">set_header_dest</tt><tt class="py-op">(</tt><tt class="py-name">dest</tt><tt class="py-op">)</tt> </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line">        <tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">set_header_group</tt><tt class="py-op">(</tt><tt class="py-name">group</tt><tt class="py-op">)</tt> </tt>
<a name="L213"></a><tt class="py-lineno">213</tt>  <tt class="py-line">        <tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">set_header_type</tt><tt class="py-op">(</tt><tt class="py-name">int</tt><tt class="py-op">(</tt><tt class="py-name">am_type</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L214"></a><tt class="py-lineno">214</tt>  <tt class="py-line">        <tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">set_header_length</tt><tt class="py-op">(</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">payload</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L215"></a><tt class="py-lineno">215</tt>  <tt class="py-line">        <tt class="py-comment"># first byte, always 0, identifies as AM packet</tt> </tt>
<a name="L216"></a><tt class="py-lineno">216</tt>  <tt class="py-line"><tt class="py-comment"></tt>        <tt class="py-keyword">return</tt> <tt class="py-name">chr</tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">dataGet</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">:</tt><tt class="py-name">pkt</tt><tt class="py-op">.</tt><tt class="py-name">offset_data</tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">+</tt> <tt class="py-name">payload</tt> </tt>
</div><a name="L217"></a><tt class="py-lineno">217</tt>  <tt class="py-line"> </tt>
<a name="L218"></a><tt class="py-lineno">218</tt>  <tt class="py-line"> </tt>
<a name="Inject._send_queued_packets"></a><div id="Inject._send_queued_packets-def"><a name="L219"></a><tt class="py-lineno">219</tt> <a class="py-toggle" href="#" id="Inject._send_queued_packets-toggle" onclick="return toggle('Inject._send_queued_packets');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_send_queued_packets">_send_queued_packets</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._send_queued_packets-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._send_queued_packets-expanded"><a name="L220"></a><tt class="py-lineno">220</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L221"></a><tt class="py-lineno">221</tt>  <tt class="py-line"><tt class="py-docstring">        Flush all queued out packets onto the wire.</tt> </tt>
<a name="L222"></a><tt class="py-lineno">222</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L223"></a><tt class="py-lineno">223</tt>  <tt class="py-line">        <tt class="py-keyword">while</tt> <tt class="py-keyword">not</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_out</tt><tt class="py-op">.</tt><tt id="link-44" class="py-name" targets="Method simx.event.event.PriorityQueue.empty()=simx.event.event.PriorityQueue-class.html#empty"><a title="simx.event.event.PriorityQueue.empty" class="py-name" href="#" onclick="return doclink('link-44', 'empty', 'link-44');">empty</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L224"></a><tt class="py-lineno">224</tt>  <tt class="py-line">            <tt class="py-op">(</tt><tt class="py-name">client</tt><tt class="py-op">,</tt> <tt class="py-name">message</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_out</tt><tt class="py-op">.</tt><tt id="link-45" class="py-name" targets="Method simx.probe.probe.Probe.get()=simx.probe.probe.Probe-class.html#get,Method simx.probe.probe.ProbeArray.get()=simx.probe.probe.ProbeArray-class.html#get,Method simx.probe.probe.ProbeStruct.get()=simx.probe.probe.ProbeStruct-class.html#get"><a title="simx.probe.probe.Probe.get
simx.probe.probe.ProbeArray.get
simx.probe.probe.ProbeStruct.get" class="py-name" href="#" onclick="return doclink('link-45', 'get', 'link-45');">get</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L225"></a><tt class="py-lineno">225</tt>  <tt class="py-line">            <tt class="py-name">serial_packet</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-46" class="py-name" targets="Method simx.inject.inject.Inject._message_to_packet()=simx.inject.inject.Inject-class.html#_message_to_packet"><a title="simx.inject.inject.Inject._message_to_packet" class="py-name" href="#" onclick="return doclink('link-46', '_message_to_packet', 'link-46');">_message_to_packet</a></tt><tt class="py-op">(</tt><tt class="py-name">message</tt><tt class="py-op">)</tt> </tt>
<a name="L226"></a><tt class="py-lineno">226</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt class="py-name">client</tt> <tt class="py-keyword">is</tt> <tt class="py-keyword">not</tt> <tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L227"></a><tt class="py-lineno">227</tt>  <tt class="py-line">                <tt class="py-comment"># send to specific connection</tt> </tt>
<a name="L228"></a><tt class="py-lineno">228</tt>  <tt class="py-line"><tt class="py-comment"></tt>                <tt class="py-name">client</tt><tt class="py-op">.</tt><tt id="link-47" class="py-name"><a title="simx.inject.wiretap.InjectPacketSock.write_packet
simx.inject.wiretap.InjectTrigger.write_packet" class="py-name" href="#" onclick="return doclink('link-47', 'write_packet', 'link-34');">write_packet</a></tt><tt class="py-op">(</tt><tt class="py-name">serial_packet</tt><tt class="py-op">)</tt> </tt>
<a name="L229"></a><tt class="py-lineno">229</tt>  <tt class="py-line">            <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L230"></a><tt class="py-lineno">230</tt>  <tt class="py-line">                <tt class="py-comment"># send to all upstream connections</tt> </tt>
<a name="L231"></a><tt class="py-lineno">231</tt>  <tt class="py-line"><tt class="py-comment"></tt>                <tt class="py-keyword">for</tt> <tt class="py-name">conn</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">upstream</tt><tt class="py-op">:</tt> </tt>
<a name="L232"></a><tt class="py-lineno">232</tt>  <tt class="py-line">                    <tt class="py-name">conn</tt><tt class="py-op">.</tt><tt id="link-48" class="py-name"><a title="simx.inject.wiretap.InjectPacketSock.write_packet
simx.inject.wiretap.InjectTrigger.write_packet" class="py-name" href="#" onclick="return doclink('link-48', 'write_packet', 'link-34');">write_packet</a></tt><tt class="py-op">(</tt><tt class="py-name">serial_packet</tt><tt class="py-op">)</tt> </tt>
</div><a name="L233"></a><tt class="py-lineno">233</tt>  <tt class="py-line"> </tt>
<a name="L234"></a><tt class="py-lineno">234</tt>  <tt class="py-line"> </tt>
<a name="Inject._thread_pump"></a><div id="Inject._thread_pump-def"><a name="L235"></a><tt class="py-lineno">235</tt> <a class="py-toggle" href="#" id="Inject._thread_pump-toggle" onclick="return toggle('Inject._thread_pump');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#_thread_pump">_thread_pump</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject._thread_pump-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject._thread_pump-expanded"><a name="L236"></a><tt class="py-lineno">236</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L237"></a><tt class="py-lineno">237</tt>  <tt class="py-line"><tt class="py-docstring">        Pump that runs inside the dispatch thread. This never normally</tt> </tt>
<a name="L238"></a><tt class="py-lineno">238</tt>  <tt class="py-line"><tt class="py-docstring">        terminates.</tt> </tt>
<a name="L239"></a><tt class="py-lineno">239</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L240"></a><tt class="py-lineno">240</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-49" class="py-name"><a title="simx.inject.inject.Inject.log" class="py-name" href="#" onclick="return doclink('link-49', 'log', 'link-18');">log</a></tt><tt class="py-op">.</tt><tt class="py-name">debug</tt><tt class="py-op">(</tt><tt class="py-string">"Pump started"</tt><tt class="py-op">)</tt> </tt>
<a name="L241"></a><tt class="py-lineno">241</tt>  <tt class="py-line">        <tt class="py-keyword">while</tt> <tt class="py-name">True</tt><tt class="py-op">:</tt> </tt>
<a name="L242"></a><tt class="py-lineno">242</tt>  <tt class="py-line">            <tt class="py-name">asyncore</tt><tt class="py-op">.</tt><tt class="py-name">loop</tt><tt class="py-op">(</tt><tt id="link-50" class="py-name"><a title="simx.inject.inject.SELECT_IDLE_SECONDS" class="py-name" href="#" onclick="return doclink('link-50', 'SELECT_IDLE_SECONDS', 'link-15');">SELECT_IDLE_SECONDS</a></tt><tt class="py-op">,</tt> <tt class="py-name">False</tt><tt class="py-op">,</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">map</tt><tt class="py-op">,</tt> <tt class="py-number">1</tt><tt class="py-op">)</tt> </tt>
<a name="L243"></a><tt class="py-lineno">243</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-51" class="py-name" targets="Method simx.inject.inject.Inject._send_queued_packets()=simx.inject.inject.Inject-class.html#_send_queued_packets"><a title="simx.inject.inject.Inject._send_queued_packets" class="py-name" href="#" onclick="return doclink('link-51', '_send_queued_packets', 'link-51');">_send_queued_packets</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L244"></a><tt class="py-lineno">244</tt>  <tt class="py-line"> </tt>
<a name="L245"></a><tt class="py-lineno">245</tt>  <tt class="py-line"> </tt>
<a name="L246"></a><tt class="py-lineno">246</tt>  <tt class="py-line">    <tt class="py-comment">#</tt> </tt>
<a name="L247"></a><tt class="py-lineno">247</tt>  <tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-comment"># Public</tt> </tt>
<a name="L248"></a><tt class="py-lineno">248</tt>  <tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-comment">#</tt> </tt>
<a name="L249"></a><tt class="py-lineno">249</tt>  <tt class="py-line"><tt class="py-comment"></tt> </tt>
<a name="Inject.read_packets"></a><div id="Inject.read_packets-def"><a name="L250"></a><tt class="py-lineno">250</tt> <a class="py-toggle" href="#" id="Inject.read_packets-toggle" onclick="return toggle('Inject.read_packets');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#read_packets">read_packets</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.read_packets-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.read_packets-expanded"><a name="L251"></a><tt class="py-lineno">251</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L252"></a><tt class="py-lineno">252</tt>  <tt class="py-line"><tt class="py-docstring">        Returns a list of (client, packet) for all incoming packets.</tt> </tt>
<a name="L253"></a><tt class="py-lineno">253</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L254"></a><tt class="py-lineno">254</tt>  <tt class="py-line"><tt class="py-docstring">        The packets are removed from the incoming queue and have the</tt> </tt>
<a name="L255"></a><tt class="py-lineno">255</tt>  <tt class="py-line"><tt class="py-docstring">        AM (Serial) header stripped.</tt> </tt>
<a name="L256"></a><tt class="py-lineno">256</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L257"></a><tt class="py-lineno">257</tt>  <tt class="py-line">        <tt class="py-name">read</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L258"></a><tt class="py-lineno">258</tt>  <tt class="py-line">        <tt class="py-keyword">while</tt> <tt class="py-keyword">not</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_in</tt><tt class="py-op">.</tt><tt id="link-52" class="py-name"><a title="simx.event.event.PriorityQueue.empty" class="py-name" href="#" onclick="return doclink('link-52', 'empty', 'link-44');">empty</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L259"></a><tt class="py-lineno">259</tt>  <tt class="py-line">            <tt class="py-op">(</tt><tt class="py-name">client</tt><tt class="py-op">,</tt> <tt class="py-name">data</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_in</tt><tt class="py-op">.</tt><tt id="link-53" class="py-name"><a title="simx.probe.probe.Probe.get
simx.probe.probe.ProbeArray.get
simx.probe.probe.ProbeStruct.get" class="py-name" href="#" onclick="return doclink('link-53', 'get', 'link-45');">get</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L260"></a><tt class="py-lineno">260</tt>  <tt class="py-line">            <tt class="py-name">read</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-name">client</tt><tt class="py-op">,</tt> <tt class="py-name">data</tt><tt class="py-op">[</tt><tt class="py-number">8</tt><tt class="py-op">:</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L261"></a><tt class="py-lineno">261</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">read</tt> </tt>
</div><a name="L262"></a><tt class="py-lineno">262</tt>  <tt class="py-line"> </tt>
<a name="L263"></a><tt class="py-lineno">263</tt>  <tt class="py-line"> </tt>
<a name="Inject.inject"></a><div id="Inject.inject-def"><a name="L264"></a><tt class="py-lineno">264</tt> <a class="py-toggle" href="#" id="Inject.inject-toggle" onclick="return toggle('Inject.inject');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#inject">inject</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">message</tt><tt class="py-op">,</tt> <tt class="py-param">target</tt><tt class="py-op">=</tt><tt class="py-name">None</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.inject-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.inject-expanded"><a name="L265"></a><tt class="py-lineno">265</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L266"></a><tt class="py-lineno">266</tt>  <tt class="py-line"><tt class="py-docstring">        Inject a message.</tt> </tt>
<a name="L267"></a><tt class="py-lineno">267</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L268"></a><tt class="py-lineno">268</tt>  <tt class="py-line"><tt class="py-docstring">        The message is sent to target. If target is None the message</tt> </tt>
<a name="L269"></a><tt class="py-lineno">269</tt>  <tt class="py-line"><tt class="py-docstring">        is sent to everyone. This is safe to call outside the event</tt> </tt>
<a name="L270"></a><tt class="py-lineno">270</tt>  <tt class="py-line"><tt class="py-docstring">        thread.</tt> </tt>
<a name="L271"></a><tt class="py-lineno">271</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L272"></a><tt class="py-lineno">272</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">q_out</tt><tt class="py-op">.</tt><tt id="link-54" class="py-name"><a title="simx.inject.queue.FifoQueue.fifo_put" class="py-name" href="#" onclick="return doclink('link-54', 'fifo_put', 'link-33');">fifo_put</a></tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-name">target</tt><tt class="py-op">,</tt> <tt class="py-name">message</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L273"></a><tt class="py-lineno">273</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">trigger</tt><tt class="py-op">.</tt><tt class="py-name">send</tt><tt class="py-op">(</tt><tt class="py-string">"t"</tt><tt class="py-op">)</tt> </tt>
</div><a name="L274"></a><tt class="py-lineno">274</tt>  <tt class="py-line"> </tt>
<a name="L275"></a><tt class="py-lineno">275</tt>  <tt class="py-line"> </tt>
<a name="Inject.start"></a><div id="Inject.start-def"><a name="L276"></a><tt class="py-lineno">276</tt> <a class="py-toggle" href="#" id="Inject.start-toggle" onclick="return toggle('Inject.start');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.inject.inject.Inject-class.html#start">start</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Inject.start-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="Inject.start-expanded"><a name="L277"></a><tt class="py-lineno">277</tt>  <tt class="py-line">        <tt class="py-docstring">"""</tt> </tt>
<a name="L278"></a><tt class="py-lineno">278</tt>  <tt class="py-line"><tt class="py-docstring">        Spawn a thread and start running the injection bridge.</tt> </tt>
<a name="L279"></a><tt class="py-lineno">279</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L280"></a><tt class="py-lineno">280</tt>  <tt class="py-line"><tt class="py-docstring">        Returns self.</tt> </tt>
<a name="L281"></a><tt class="py-lineno">281</tt>  <tt class="py-line"><tt class="py-docstring">        """</tt> </tt>
<a name="L282"></a><tt class="py-lineno">282</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">launcher</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L283"></a><tt class="py-lineno">283</tt>  <tt class="py-line">            <tt class="py-docstring">"Terminate on pump exception"</tt> </tt>
<a name="L284"></a><tt class="py-lineno">284</tt>  <tt class="py-line">            <tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L285"></a><tt class="py-lineno">285</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-55" class="py-name" targets="Method simx.inject.inject.Inject._thread_pump()=simx.inject.inject.Inject-class.html#_thread_pump"><a title="simx.inject.inject.Inject._thread_pump" class="py-name" href="#" onclick="return doclink('link-55', '_thread_pump', 'link-55');">_thread_pump</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L286"></a><tt class="py-lineno">286</tt>  <tt class="py-line">            <tt class="py-keyword">except</tt><tt class="py-op">:</tt> </tt>
<a name="L287"></a><tt class="py-lineno">287</tt>  <tt class="py-line">                <tt class="py-name">traceback</tt><tt class="py-op">.</tt><tt class="py-name">print_exc</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L288"></a><tt class="py-lineno">288</tt>  <tt class="py-line">                <tt class="py-keyword">print</tt> <tt class="py-op">&gt;&gt;</tt><tt class="py-name">sys</tt><tt class="py-op">.</tt><tt class="py-name">stderr</tt><tt class="py-op">,</tt> <tt class="py-string">"!!! INJECTOR TERMINATED !!!"</tt> </tt>
<a name="L289"></a><tt class="py-lineno">289</tt>  <tt class="py-line">                <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">_exit</tt><tt class="py-op">(</tt><tt class="py-number">1</tt><tt class="py-op">)</tt> </tt>
</div><a name="L290"></a><tt class="py-lineno">290</tt>  <tt class="py-line"> </tt>
<a name="L291"></a><tt class="py-lineno">291</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">thread</tt> <tt class="py-op">=</tt> <tt class="py-name">thread</tt><tt class="py-op">.</tt><tt class="py-name">start_new_thread</tt><tt class="py-op">(</tt><tt class="py-name">launcher</tt><tt class="py-op">,</tt> <tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L292"></a><tt class="py-lineno">292</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">self</tt> </tt>
</div></div><a name="L293"></a><tt class="py-lineno">293</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Wed Aug 12 00:17:37 2009
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
