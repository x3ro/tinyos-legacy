<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>simx.dyntopo.Topo</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        Package&nbsp;simx ::
        <a href="simx.dyntopo-module.html">Package&nbsp;dyntopo</a> ::
        Module&nbsp;Topo
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="simx.dyntopo.Topo-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="simx.dyntopo.Topo-module.html">Module simx.dyntopo.Topo</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">math</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-0" class="py-name" targets="Module simx.dyntopo.Link=simx.dyntopo.Link-module.html,Class simx.probe.probedef.Link=simx.probe.probedef.Link-class.html"><a title="simx.dyntopo.Link
simx.probe.probedef.Link" class="py-name" href="#" onclick="return doclink('link-0', 'Link', 'link-0');">Link</a></tt> <tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Class simx.dyntopo.Link.BasicLinkModel=simx.dyntopo.Link.BasicLinkModel-class.html"><a title="simx.dyntopo.Link.BasicLinkModel" class="py-name" href="#" onclick="return doclink('link-1', 'BasicLinkModel', 'link-1');">BasicLinkModel</a></tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-2" class="py-name" targets="Module simx.dyntopo.Support=simx.dyntopo.Support-module.html"><a title="simx.dyntopo.Support" class="py-name" href="#" onclick="return doclink('link-2', 'Support', 'link-2');">Support</a></tt> <tt class="py-keyword">import</tt> <tt id="link-3" class="py-name" targets="Function simx.dyntopo.Support.extendMote()=simx.dyntopo.Support-module.html#extendMote"><a title="simx.dyntopo.Support.extendMote" class="py-name" href="#" onclick="return doclink('link-3', 'extendMote', 'link-3');">extendMote</a></tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-4" class="py-name" targets="Module simx.dyntopo.Manager=simx.dyntopo.Manager-module.html,Class simx.event.event.Manager=simx.event.event.Manager-class.html"><a title="simx.dyntopo.Manager
simx.event.event.Manager" class="py-name" href="#" onclick="return doclink('link-4', 'Manager', 'link-4');">Manager</a></tt> <tt class="py-keyword">import</tt> <tt id="link-5" class="py-name" targets="Class simx.dyntopo.Manager.NodeManager=simx.dyntopo.Manager.NodeManager-class.html"><a title="simx.dyntopo.Manager.NodeManager" class="py-name" href="#" onclick="return doclink('link-5', 'NodeManager', 'link-5');">NodeManager</a></tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt id="link-6" class="py-name" targets="Variable simx.dyntopo.Topo.TOSSIM_MAX_NODES=simx.dyntopo.Topo-module.html#TOSSIM_MAX_NODES"><a title="simx.dyntopo.Topo.TOSSIM_MAX_NODES" class="py-name" href="#" onclick="return doclink('link-6', 'TOSSIM_MAX_NODES', 'link-6');">TOSSIM_MAX_NODES</a></tt> <tt class="py-op">=</tt> <tt class="py-number">1000</tt> <tt class="py-comment"># as per TOS 2.1 default</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"> </tt>
<a name="GenericNode"></a><div id="GenericNode-def"><a name="L8"></a><tt class="py-lineno">  8</tt> <a class="py-toggle" href="#" id="GenericNode-toggle" onclick="return toggle('GenericNode');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericNode-class.html">GenericNode</a><tt class="py-op">(</tt><tt class="py-base-class">object</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericNode-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="GenericNode-expanded"><a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line">    <tt class="py-keyword">pass</tt> </tt>
</div><a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo"></a><div id="GenericTopo-def"><a name="L12"></a><tt class="py-lineno"> 12</tt> <a class="py-toggle" href="#" id="GenericTopo-toggle" onclick="return toggle('GenericTopo');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html">GenericTopo</a><tt class="py-op">(</tt><tt class="py-base-class">NodeManager</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="GenericTopo-expanded"><a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-docstring">    Creates a generic topology (that is not tied to TOSSIM).</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-docstring">    This can be useful to generate and save different topologies that</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"><tt class="py-docstring">    can be examined and/or loaded later without needing to integrate</tt> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring">    with TOSSIM.</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">    Since these are not real motes, the only TOSSIM Mote-like property</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"><tt class="py-docstring">    they have is an ID.</tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line">    <tt class="py-comment">#TODO: support link model generation</tt> </tt>
<a name="GenericTopo.__init__"></a><div id="GenericTopo.__init__-def"><a name="L25"></a><tt class="py-lineno"> 25</tt> <a class="py-toggle" href="#" id="GenericTopo.__init__-toggle" onclick="return toggle('GenericTopo.__init__');">-</a><tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.__init__-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.__init__-expanded"><a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-name">None</tt><tt class="py-op">]</tt> <tt class="py-op">*</tt> <tt id="link-7" class="py-name"><a title="simx.dyntopo.Topo.TOSSIM_MAX_NODES" class="py-name" href="#" onclick="return doclink('link-7', 'TOSSIM_MAX_NODES', 'link-6');">TOSSIM_MAX_NODES</a></tt> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_links</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-op">}</tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line">        <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt> <tt class="py-op">=</tt> <tt id="link-8" class="py-name"><a title="simx.dyntopo.Link.BasicLinkModel" class="py-name" href="#" onclick="return doclink('link-8', 'BasicLinkModel', 'link-1');">BasicLinkModel</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.getNode"></a><div id="GenericTopo.getNode-def"><a name="L31"></a><tt class="py-lineno"> 31</tt> <a class="py-toggle" href="#" id="GenericTopo.getNode-toggle" onclick="return toggle('GenericTopo.getNode');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#getNode">getNode</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">i</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.getNode-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.getNode-expanded"><a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">        <tt class="py-name">n</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">n</tt><tt class="py-op">:</tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line">            <tt class="py-name">n</tt> <tt class="py-op">=</tt> <tt id="link-9" class="py-name" targets="Class simx.dyntopo.Topo.GenericNode=simx.dyntopo.Topo.GenericNode-class.html"><a title="simx.dyntopo.Topo.GenericNode" class="py-name" href="#" onclick="return doclink('link-9', 'GenericNode', 'link-9');">GenericNode</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line">            <tt id="link-10" class="py-name"><a title="simx.dyntopo.Support.extendMote" class="py-name" href="#" onclick="return doclink('link-10', 'extendMote', 'link-3');">extendMote</a></tt><tt class="py-op">(</tt><tt class="py-name">n</tt><tt class="py-op">,</tt> <tt id="link-11" class="py-name" targets="Static Method simx.dyntopo.Link.BasicLinkModel.txmap()=simx.dyntopo.Link.BasicLinkModel-class.html#txmap"><a title="simx.dyntopo.Link.BasicLinkModel.txmap" class="py-name" href="#" onclick="return doclink('link-11', 'txmap', 'link-11');">txmap</a></tt><tt class="py-op">=</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt><tt class="py-op">.</tt><tt id="link-12" class="py-name"><a title="simx.dyntopo.Link.BasicLinkModel.txmap" class="py-name" href="#" onclick="return doclink('link-12', 'txmap', 'link-11');">txmap</a></tt><tt class="py-op">)</tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line">            <tt class="py-name">n</tt><tt class="py-op">.</tt><tt id="link-13" class="py-name" targets="Method simx.base.node.Node.id()=simx.base.node.Node-class.html#id"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-13', 'id', 'link-13');">id</a></tt> <tt class="py-op">=</tt> <tt class="py-keyword">lambda</tt><tt class="py-op">:</tt> <tt class="py-name">i</tt> <tt class="py-comment"># give it an ID</tt> </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">n</tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line"> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">n</tt> </tt>
</div><a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line"> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.maxNodes"></a><div id="GenericTopo.maxNodes-def"><a name="L42"></a><tt class="py-lineno"> 42</tt> <a class="py-toggle" href="#" id="GenericTopo.maxNodes-toggle" onclick="return toggle('GenericTopo.maxNodes');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#maxNodes">maxNodes</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.maxNodes-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.maxNodes-expanded"><a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt id="link-14" class="py-name"><a title="simx.dyntopo.Topo.TOSSIM_MAX_NODES" class="py-name" href="#" onclick="return doclink('link-14', 'TOSSIM_MAX_NODES', 'link-6');">TOSSIM_MAX_NODES</a></tt> </tt>
</div><a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line"> </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.nodes"></a><div id="GenericTopo.nodes-def"><a name="L46"></a><tt class="py-lineno"> 46</tt> <a class="py-toggle" href="#" id="GenericTopo.nodes-toggle" onclick="return toggle('GenericTopo.nodes');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#nodes">nodes</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.nodes-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.nodes-expanded"><a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">filter</tt><tt class="py-op">(</tt><tt class="py-keyword">lambda</tt> <tt class="py-name">n</tt><tt class="py-op">:</tt> <tt class="py-name">n</tt> <tt class="py-keyword">is</tt> <tt class="py-keyword">not</tt> <tt class="py-name">None</tt><tt class="py-op">,</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">)</tt> </tt>
</div><a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line"> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.gain"></a><div id="GenericTopo.gain-def"><a name="L50"></a><tt class="py-lineno"> 50</tt> <a class="py-toggle" href="#" id="GenericTopo.gain-toggle" onclick="return toggle('GenericTopo.gain');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#gain">gain</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">a</tt><tt class="py-op">,</tt> <tt class="py-param">b</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.gain-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.gain-expanded"><a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_links</tt><tt class="py-op">.</tt><tt id="link-15" class="py-name" targets="Method simx.probe.probe.Probe.get()=simx.probe.probe.Probe-class.html#get,Method simx.probe.probe.ProbeArray.get()=simx.probe.probe.ProbeArray-class.html#get,Method simx.probe.probe.ProbeStruct.get()=simx.probe.probe.ProbeStruct-class.html#get"><a title="simx.probe.probe.Probe.get
simx.probe.probe.ProbeArray.get
simx.probe.probe.ProbeStruct.get" class="py-name" href="#" onclick="return doclink('link-15', 'get', 'link-15');">get</a></tt><tt class="py-op">(</tt><tt class="py-op">(</tt><tt class="py-name">a</tt><tt class="py-op">.</tt><tt id="link-16" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-16', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-17" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-17', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
</div><a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line"> </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.needsRebuild"></a><div id="GenericTopo.needsRebuild-def"><a name="L54"></a><tt class="py-lineno"> 54</tt> <a class="py-toggle" href="#" id="GenericTopo.needsRebuild-toggle" onclick="return toggle('GenericTopo.needsRebuild');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#needsRebuild">needsRebuild</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.needsRebuild-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.needsRebuild-expanded"><a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line">        <tt class="py-keyword">raise</tt> <tt class="py-name">NotImplementedError</tt> </tt>
</div><a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line"> </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line"> </tt>
<a name="GenericTopo.rebuildModel"></a><div id="GenericTopo.rebuildModel-def"><a name="L58"></a><tt class="py-lineno"> 58</tt> <a class="py-toggle" href="#" id="GenericTopo.rebuildModel-toggle" onclick="return toggle('GenericTopo.rebuildModel');">-</a><tt class="py-line">    <tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo.GenericTopo-class.html#rebuildModel">rebuildModel</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="GenericTopo.rebuildModel-collapsed" style="display:none;" pad="+++" indent="++++++++"></div><div id="GenericTopo.rebuildModel-expanded"><a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line">        <tt id="link-18" class="py-name" targets="Method simx.dyntopo.Manager.NodeManager.nodes()=simx.dyntopo.Manager.NodeManager-class.html#nodes,Method simx.dyntopo.Topo.GenericTopo.nodes()=simx.dyntopo.Topo.GenericTopo-class.html#nodes"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-18', 'nodes', 'link-18');">nodes</a></tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-19" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-19', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line">        <tt class="py-keyword">for</tt> <tt class="py-name">i</tt><tt class="py-op">,</tt> <tt class="py-name">a</tt> <tt class="py-keyword">in</tt> <tt class="py-name">enumerate</tt><tt class="py-op">(</tt><tt id="link-20" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-20', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line">            <tt class="py-name">ai</tt> <tt class="py-op">=</tt> <tt class="py-name">a</tt><tt class="py-op">.</tt><tt id="link-21" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-21', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">b</tt> <tt class="py-keyword">in</tt> <tt class="py-name">map</tt><tt class="py-op">(</tt><tt class="py-keyword">lambda</tt> <tt class="py-name">x</tt><tt class="py-op">:</tt> <tt id="link-22" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-22', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">[</tt><tt class="py-name">x</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-name">i</tt><tt class="py-op">+</tt><tt class="py-number">1</tt><tt class="py-op">,</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt id="link-23" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-23', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line">                <tt class="py-name">bi</tt> <tt class="py-op">=</tt> <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-24" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-24', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line">                <tt class="py-op">(</tt><tt class="py-name">ga</tt><tt class="py-op">,</tt> <tt class="py-name">gb</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt><tt class="py-op">.</tt><tt id="link-25" class="py-name" targets="Method simx.base.radio.RadioRedirect.gain()=simx.base.radio.RadioRedirect-class.html#gain,Method simx.dyntopo.Link.BasicLinkModel.gain()=simx.dyntopo.Link.BasicLinkModel-class.html#gain,Method simx.dyntopo.Manager.NodeManager.gain()=simx.dyntopo.Manager.NodeManager-class.html#gain,Method simx.dyntopo.Topo.GenericTopo.gain()=simx.dyntopo.Topo.GenericTopo-class.html#gain"><a title="simx.base.radio.RadioRedirect.gain
simx.dyntopo.Link.BasicLinkModel.gain
simx.dyntopo.Manager.NodeManager.gain
simx.dyntopo.Topo.GenericTopo.gain" class="py-name" href="#" onclick="return doclink('link-25', 'gain', 'link-25');">gain</a></tt><tt class="py-op">(</tt><tt class="py-name">a</tt><tt class="py-op">,</tt> <tt class="py-name">b</tt><tt class="py-op">)</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_links</tt><tt class="py-op">[</tt><tt class="py-op">(</tt><tt class="py-name">ai</tt><tt class="py-op">,</tt> <tt class="py-name">bi</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">ga</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_links</tt><tt class="py-op">[</tt><tt class="py-op">(</tt><tt class="py-name">bi</tt><tt class="py-op">,</tt> <tt class="py-name">ai</tt><tt class="py-op">)</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">gb</tt> </tt>
</div></div><a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line"> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line"> </tt>
<a name="TossimTopo"></a><div id="TossimTopo-def"><a name="L69"></a><tt class="py-lineno"> 69</tt> <a class="py-toggle" href="#" id="TossimTopo-toggle" onclick="return toggle('TossimTopo');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="simx.dyntopo.Topo-module.html#TossimTopo">TossimTopo</a><tt class="py-op">(</tt><tt class="py-param">BASE</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-param">kws</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="TossimTopo-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="TossimTopo-expanded"><a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line"><tt class="py-docstring">    Create a TOSSIM wrapper/topology map manager.</tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line"><tt class="py-docstring">    tossim_class should be the TOSSIM module, likely just TOSSIM.</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line"><tt class="py-docstring">    This actually creates a new class and instantiates a corresponding</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line"><tt class="py-docstring">    object. The extra layer is to allow direct injection of the</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line"><tt class="py-docstring">    superclass.</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line"> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">    <tt class="py-name">DYNAMIC</tt> <tt class="py-op">=</tt> <tt class="py-name">kws</tt><tt class="py-op">.</tt><tt id="link-26" class="py-name"><a title="simx.probe.probe.Probe.get
simx.probe.probe.ProbeArray.get
simx.probe.probe.ProbeStruct.get" class="py-name" href="#" onclick="return doclink('link-26', 'get', 'link-15');">get</a></tt><tt class="py-op">(</tt><tt class="py-string">"dynamic"</tt><tt class="py-op">)</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line"> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">    <tt class="py-keyword">class</tt> <tt class="py-def-name">_Manager</tt><tt class="py-op">(</tt><tt class="py-base-class">NodeManager</tt><tt class="py-op">,</tt> <tt class="py-base-class">BASE</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">         </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">__init__</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-param">kws</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">            <tt class="py-name">BASE</tt><tt class="py-op">.</tt><tt id="link-27" class="py-name" targets="Method simx.base.channel.ChannelBridge.__init__()=simx.base.channel.ChannelBridge-class.html#__init__,Method simx.base.extension.Extension.__init__()=simx.base.extension.Extension-class.html#__init__,Method simx.base.node.Node.__init__()=simx.base.node.Node-class.html#__init__,Method simx.base.radio.RadioRedirect.__init__()=simx.base.radio.RadioRedirect-class.html#__init__,Method simx.base.tossim.TossimBase.__init__()=simx.base.tossim.TossimBase-class.html#__init__,Method simx.dyntopo.Link.BasicLinkModel.__init__()=simx.dyntopo.Link.BasicLinkModel-class.html#__init__,Method simx.dyntopo.Topo.GenericTopo.__init__()=simx.dyntopo.Topo.GenericTopo-class.html#__init__,Method simx.event.event.Manager.__init__()=simx.event.event.Manager-class.html#__init__,Method simx.event.event.PriorityQueue.__init__()=simx.event.event.PriorityQueue-class.html#__init__,Method simx.inject.inject.Inject.__init__()=simx.inject.inject.Inject-class.html#__init__,Method simx.inject.inject.InvalidVersionWarning.__init__()=simx.inject.inject.InvalidVersionWarning-class.html#__init__,Method simx.inject.queue.FifoQueue.__init__()=simx.inject.queue.FifoQueue-class.html#__init__,Method simx.inject.queue.QueueFullWarning.__init__()=simx.inject.queue.QueueFullWarning-class.html#__init__,Method simx.inject.wiretap.InjectDownstream.__init__()=simx.inject.wiretap.InjectDownstream-class.html#__init__,Method simx.inject.wiretap.InjectPacketSock.__init__()=simx.inject.wiretap.InjectPacketSock-class.html#__init__,Method simx.inject.wiretap.InjectSock.__init__()=simx.inject.wiretap.InjectSock-class.html#__init__,Method simx.inject.wiretap.InjectTrigger.__init__()=simx.inject.wiretap.InjectTrigger-class.html#__init__,Method simx.inject.wiretap.InjectUpstream.__init__()=simx.inject.wiretap.InjectUpstream-class.html#__init__,Method simx.probe.parse.LookupError.__init__()=simx.probe.parse.LookupError-class.html#__init__,Method simx.probe.parse.ProbeLink.__init__()=simx.probe.parse.ProbeLink-class.html#__init__,Method simx.probe.parse.ProbeLoader.__init__()=simx.probe.parse.ProbeLoader-class.html#__init__,Method simx.probe.parse.ReplacementError.__init__()=simx.probe.parse.ReplacementError-class.html#__init__,Method simx.probe.probe.CachingProber.__init__()=simx.probe.probe.CachingProber-class.html#__init__,Method simx.probe.probe.Probe.__init__()=simx.probe.probe.Probe-class.html#__init__,Method simx.probe.probe.ProbeArray.__init__()=simx.probe.probe.ProbeArray-class.html#__init__,Method simx.probe.probe.ProbeStruct.__init__()=simx.probe.probe.ProbeStruct-class.html#__init__,Method simx.probe.probedef.Array.__init__()=simx.probe.probedef.Array-class.html#__init__,Method simx.probe.probedef.Definition.__init__()=simx.probe.probedef.Definition-class.html#__init__,Method simx.probe.probedef.Link.__init__()=simx.probe.probedef.Link-class.html#__init__,Method simx.probe.probedef.Primitive.__init__()=simx.probe.probedef.Primitive-class.html#__init__,Method simx.probe.probedef.Struct.__init__()=simx.probe.probedef.Struct-class.html#__init__,Method simx.sensor.extension.SensorExtension.__init__()=simx.sensor.extension.SensorExtension-class.html#__init__,Method simx.sensor.sensor.SensorControl.__init__()=simx.sensor.sensor.SensorControl-class.html#__init__,Method simx.sensor.sensor.SensorError.__init__()=simx.sensor.sensor.SensorError-class.html#__init__,Method simx.sensor.streamer.BinaryStreamer.__init__()=simx.sensor.streamer.BinaryStreamer-class.html#__init__,Method simx.sensor.streamer.SacStreamer.__init__()=simx.sensor.streamer.SacStreamer-class.html#__init__,Method simx.sensor.streamer.Streamer.__init__()=simx.sensor.streamer.Streamer-class.html#__init__,Method simx.sensor.streamer.TextStreamer.__init__()=simx.sensor.streamer.TextStreamer-class.html#__init__,Method simx.sync.time_control.TimeControl.__init__()=simx.sync.time_control.TimeControl-class.html#__init__"><a title="simx.base.channel.ChannelBridge.__init__
simx.base.extension.Extension.__init__
simx.base.node.Node.__init__
simx.base.radio.RadioRedirect.__init__
simx.base.tossim.TossimBase.__init__
simx.dyntopo.Link.BasicLinkModel.__init__
simx.dyntopo.Topo.GenericTopo.__init__
simx.event.event.Manager.__init__
simx.event.event.PriorityQueue.__init__
simx.inject.inject.Inject.__init__
simx.inject.inject.InvalidVersionWarning.__init__
simx.inject.queue.FifoQueue.__init__
simx.inject.queue.QueueFullWarning.__init__
simx.inject.wiretap.InjectDownstream.__init__
simx.inject.wiretap.InjectPacketSock.__init__
simx.inject.wiretap.InjectSock.__init__
simx.inject.wiretap.InjectTrigger.__init__
simx.inject.wiretap.InjectUpstream.__init__
simx.probe.parse.LookupError.__init__
simx.probe.parse.ProbeLink.__init__
simx.probe.parse.ProbeLoader.__init__
simx.probe.parse.ReplacementError.__init__
simx.probe.probe.CachingProber.__init__
simx.probe.probe.Probe.__init__
simx.probe.probe.ProbeArray.__init__
simx.probe.probe.ProbeStruct.__init__
simx.probe.probedef.Array.__init__
simx.probe.probedef.Definition.__init__
simx.probe.probedef.Link.__init__
simx.probe.probedef.Primitive.__init__
simx.probe.probedef.Struct.__init__
simx.sensor.extension.SensorExtension.__init__
simx.sensor.sensor.SensorControl.__init__
simx.sensor.sensor.SensorError.__init__
simx.sensor.streamer.BinaryStreamer.__init__
simx.sensor.streamer.SacStreamer.__init__
simx.sensor.streamer.Streamer.__init__
simx.sensor.streamer.TextStreamer.__init__
simx.sync.time_control.TimeControl.__init__" class="py-name" href="#" onclick="return doclink('link-27', '__init__', 'link-27');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-name">opts</tt><tt class="py-op">)</tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-name">None</tt><tt class="py-op">]</tt> <tt class="py-op">*</tt> <tt id="link-28" class="py-name"><a title="simx.dyntopo.Topo.TOSSIM_MAX_NODES" class="py-name" href="#" onclick="return doclink('link-28', 'TOSSIM_MAX_NODES', 'link-6');">TOSSIM_MAX_NODES</a></tt> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">change_hooks</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">link_hooks</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dynamic</tt> <tt class="py-op">=</tt> <tt class="py-name">False</tt> </tt>
</div><a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line"> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">addChangeHook</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">hook</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">change_hooks</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">hook</tt><tt class="py-op">)</tt> </tt>
</div><a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line"> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">addLinkHook</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">hook</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">link_hooks</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">hook</tt><tt class="py-op">)</tt> </tt>
</div><a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line"> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">moteOnChange</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">mote</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">hook</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">change_hooks</tt><tt class="py-op">:</tt> </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line">                <tt class="py-name">hook</tt><tt class="py-op">(</tt><tt class="py-name">mote</tt><tt class="py-op">)</tt> </tt>
</div><a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line"> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">linkChanged</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">mote</tt><tt class="py-op">,</tt> <tt class="py-param">other</tt><tt class="py-op">,</tt> <tt class="py-param">gain</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">hook</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">link_hooks</tt><tt class="py-op">:</tt> </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line">                <tt class="py-name">hook</tt><tt class="py-op">(</tt><tt class="py-name">mote</tt><tt class="py-op">,</tt> <tt class="py-name">other</tt><tt class="py-op">,</tt> <tt id="link-29" class="py-name"><a title="simx.base.radio.RadioRedirect.gain
simx.dyntopo.Link.BasicLinkModel.gain
simx.dyntopo.Manager.NodeManager.gain
simx.dyntopo.Topo.GenericTopo.gain" class="py-name" href="#" onclick="return doclink('link-29', 'gain', 'link-25');">gain</a></tt><tt class="py-op">)</tt> </tt>
</div><a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line"> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">getNode</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">i</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-param">kws</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line">            <tt class="py-name">n</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">n</tt><tt class="py-op">:</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line">                <tt class="py-name">n</tt> <tt class="py-op">=</tt> <tt class="py-name">BASE</tt><tt class="py-op">.</tt><tt id="link-30" class="py-name" targets="Method simx.dyntopo.Manager.NodeManager.getNode()=simx.dyntopo.Manager.NodeManager-class.html#getNode,Method simx.dyntopo.Topo.GenericTopo.getNode()=simx.dyntopo.Topo.GenericTopo-class.html#getNode"><a title="simx.dyntopo.Manager.NodeManager.getNode
simx.dyntopo.Topo.GenericTopo.getNode" class="py-name" href="#" onclick="return doclink('link-30', 'getNode', 'link-30');">getNode</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">i</tt><tt class="py-op">)</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">n</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line">                <tt class="py-name">options</tt> <tt class="py-op">=</tt> <tt class="py-op">{</tt><tt class="py-string">"onchange"</tt><tt class="py-op">:</tt> <tt class="py-keyword">lambda</tt> <tt class="py-name">x</tt><tt class="py-op">:</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">moteOnChange</tt><tt class="py-op">(</tt><tt class="py-name">x</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line">                           <tt class="py-string">"monitor"</tt><tt class="py-op">:</tt> <tt class="py-name">self</tt><tt class="py-op">,</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line">                           <tt class="py-string">"radio"</tt><tt class="py-op">:</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-31" class="py-name" targets="Module simx.base.radio=simx.base.radio-module.html,Method simx.base.tossim.TossimBase.radio()=simx.base.tossim.TossimBase-class.html#radio"><a title="simx.base.radio
simx.base.tossim.TossimBase.radio" class="py-name" href="#" onclick="return doclink('link-31', 'radio', 'link-31');">radio</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line">                           <tt class="py-string">"txmap"</tt><tt class="py-op">:</tt> <tt class="py-keyword">lambda</tt> <tt class="py-name">x</tt><tt class="py-op">:</tt> <tt class="py-name">x</tt><tt class="py-op">}</tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line">                <tt class="py-name">options</tt><tt class="py-op">.</tt><tt class="py-name">update</tt><tt class="py-op">(</tt><tt class="py-name">kws</tt><tt class="py-op">)</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line">                <tt id="link-32" class="py-name"><a title="simx.dyntopo.Support.extendMote" class="py-name" href="#" onclick="return doclink('link-32', 'extendMote', 'link-3');">extendMote</a></tt><tt class="py-op">(</tt><tt class="py-name">n</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-name">options</tt><tt class="py-op">)</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line"> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">n</tt> </tt>
</div><a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line"> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">needsRebuild</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">False</tt> </tt>
</div><a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line"> </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">rebuildModel</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">False</tt> </tt>
</div><a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line"> </tt>
<a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">maxNodes</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt id="link-33" class="py-name"><a title="simx.dyntopo.Topo.TOSSIM_MAX_NODES" class="py-name" href="#" onclick="return doclink('link-33', 'TOSSIM_MAX_NODES', 'link-6');">TOSSIM_MAX_NODES</a></tt> </tt>
</div><a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line"> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">nodes</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">filter</tt><tt class="py-op">(</tt><tt class="py-keyword">lambda</tt> <tt class="py-name">n</tt><tt class="py-op">:</tt> <tt class="py-name">n</tt> <tt class="py-keyword">is</tt> <tt class="py-keyword">not</tt> <tt class="py-name">None</tt><tt class="py-op">,</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">_nodes</tt><tt class="py-op">)</tt> </tt>
</div><a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line"> </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">poweredNodes</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line"><tt class="py-docstring">            List of nodes that are 'on'.</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">filter</tt><tt class="py-op">(</tt><tt class="py-keyword">lambda</tt> <tt class="py-name">n</tt><tt class="py-op">:</tt> <tt class="py-name">n</tt><tt class="py-op">.</tt><tt class="py-name">isOn</tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-34" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-34', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
</div><a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line"> </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">activeNodes</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line"><tt class="py-docstring">            List of nodes that have been accessed.</tt> </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line">            <tt class="py-comment">#return filter(lambda n: n.isOn(), self.nodes())</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-35" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-35', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line"> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">gain</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">a</tt><tt class="py-op">,</tt> <tt class="py-param">b</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">            <tt class="py-op">(</tt><tt class="py-name">src</tt><tt class="py-op">,</tt> <tt class="py-name">dest</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-op">(</tt><tt class="py-name">a</tt><tt class="py-op">.</tt><tt id="link-36" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-36', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-37" class="py-name"><a title="simx.base.node.Node.id" class="py-name" href="#" onclick="return doclink('link-37', 'id', 'link-13');">id</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L146"></a><tt class="py-lineno">146</tt>  <tt class="py-line">            <tt class="py-name">r</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-38" class="py-name"><a title="simx.base.radio
simx.base.tossim.TossimBase.radio" class="py-name" href="#" onclick="return doclink('link-38', 'radio', 'link-31');">radio</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt class="py-name">r</tt><tt class="py-op">.</tt><tt id="link-39" class="py-name" targets="Method simx.base.radio.RadioRedirect.connected()=simx.base.radio.RadioRedirect-class.html#connected"><a title="simx.base.radio.RadioRedirect.connected" class="py-name" href="#" onclick="return doclink('link-39', 'connected', 'link-39');">connected</a></tt><tt class="py-op">(</tt><tt class="py-name">src</tt><tt class="py-op">,</tt> <tt class="py-name">dest</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">                <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-40" class="py-name"><a title="simx.base.radio
simx.base.tossim.TossimBase.radio" class="py-name" href="#" onclick="return doclink('link-40', 'radio', 'link-31');">radio</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">.</tt><tt id="link-41" class="py-name"><a title="simx.base.radio.RadioRedirect.gain
simx.dyntopo.Link.BasicLinkModel.gain
simx.dyntopo.Manager.NodeManager.gain
simx.dyntopo.Topo.GenericTopo.gain" class="py-name" href="#" onclick="return doclink('link-41', 'gain', 'link-25');">gain</a></tt><tt class="py-op">(</tt><tt class="py-name">src</tt><tt class="py-op">,</tt> <tt class="py-name">dest</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line"> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">    <tt class="py-comment"># Dynamic just provides basics</tt> </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line"><tt class="py-comment"></tt>    <tt class="py-keyword">if</tt> <tt class="py-keyword">not</tt> <tt class="py-name">DYNAMIC</tt><tt class="py-op">:</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">        <tt class="py-keyword">return</tt> <tt class="py-name">_Manager</tt><tt class="py-op">(</tt><tt class="py-op">*</tt><tt class="py-name">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-name">kws</tt><tt class="py-op">)</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line"> </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line">             </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">    <tt class="py-keyword">class</tt> <tt class="py-def-name">_DynManager</tt><tt class="py-op">(</tt><tt class="py-base-class">_Manager</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line"> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">__init__</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-param">kws</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line">            <tt class="py-name">_Manager</tt><tt class="py-op">.</tt><tt id="link-42" class="py-name"><a title="simx.base.channel.ChannelBridge.__init__
simx.base.extension.Extension.__init__
simx.base.node.Node.__init__
simx.base.radio.RadioRedirect.__init__
simx.base.tossim.TossimBase.__init__
simx.dyntopo.Link.BasicLinkModel.__init__
simx.dyntopo.Topo.GenericTopo.__init__
simx.event.event.Manager.__init__
simx.event.event.PriorityQueue.__init__
simx.inject.inject.Inject.__init__
simx.inject.inject.InvalidVersionWarning.__init__
simx.inject.queue.FifoQueue.__init__
simx.inject.queue.QueueFullWarning.__init__
simx.inject.wiretap.InjectDownstream.__init__
simx.inject.wiretap.InjectPacketSock.__init__
simx.inject.wiretap.InjectSock.__init__
simx.inject.wiretap.InjectTrigger.__init__
simx.inject.wiretap.InjectUpstream.__init__
simx.probe.parse.LookupError.__init__
simx.probe.parse.ProbeLink.__init__
simx.probe.parse.ProbeLoader.__init__
simx.probe.parse.ReplacementError.__init__
simx.probe.probe.CachingProber.__init__
simx.probe.probe.Probe.__init__
simx.probe.probe.ProbeArray.__init__
simx.probe.probe.ProbeStruct.__init__
simx.probe.probedef.Array.__init__
simx.probe.probedef.Definition.__init__
simx.probe.probedef.Link.__init__
simx.probe.probedef.Primitive.__init__
simx.probe.probedef.Struct.__init__
simx.sensor.extension.SensorExtension.__init__
simx.sensor.sensor.SensorControl.__init__
simx.sensor.sensor.SensorError.__init__
simx.sensor.streamer.BinaryStreamer.__init__
simx.sensor.streamer.SacStreamer.__init__
simx.sensor.streamer.Streamer.__init__
simx.sensor.streamer.TextStreamer.__init__
simx.sync.time_control.TimeControl.__init__" class="py-name" href="#" onclick="return doclink('link-42', '__init__', 'link-27');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-name">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-name">kws</tt><tt class="py-op">)</tt> </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line">            <tt class="py-comment"># of type TopoNode, index is ID</tt> </tt>
<a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt> <tt class="py-op">=</tt> <tt id="link-43" class="py-name"><a title="simx.dyntopo.Link.BasicLinkModel" class="py-name" href="#" onclick="return doclink('link-43', 'BasicLinkModel', 'link-1');">BasicLinkModel</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">block_reenter</tt> <tt class="py-op">=</tt> <tt class="py-name">False</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line">            <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dynamic</tt> <tt class="py-op">=</tt> <tt class="py-name">True</tt> </tt>
</div><a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line">             </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line"> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">moteOnChange</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">mote</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line"><tt class="py-docstring">            Invoked by a mote whenever an internal change occurs.</tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">block_reenter</tt><tt class="py-op">:</tt> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">                <tt class="py-keyword">return</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line"> </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line">            <tt class="py-comment"># Rebuild txgain (should check if txgain is modified and</tt> </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-comment"># use flag)</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">block_reenter</tt> <tt class="py-op">=</tt> <tt class="py-name">True</tt> </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">rebuildLinks_Isolated</tt><tt class="py-op">(</tt><tt class="py-name">mote</tt><tt class="py-op">)</tt> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line">            <tt class="py-keyword">finally</tt><tt class="py-op">:</tt> </tt>
<a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line">                <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">block_reenter</tt> <tt class="py-op">=</tt> <tt class="py-name">False</tt> </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line">                 </tt>
<a name="L180"></a><tt class="py-lineno">180</tt>  <tt class="py-line">            <tt class="py-name">_Manager</tt><tt class="py-op">.</tt><tt class="py-name">moteOnChange</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">mote</tt><tt class="py-op">)</tt> </tt>
</div><a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line">             </tt>
<a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line"> </tt>
<a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">getNode</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">i</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-param">kws</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">_Manager</tt><tt class="py-op">.</tt><tt id="link-44" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.getNode
simx.dyntopo.Topo.GenericTopo.getNode" class="py-name" href="#" onclick="return doclink('link-44', 'getNode', 'link-30');">getNode</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">i</tt><tt class="py-op">,</tt> <tt id="link-45" class="py-name"><a title="simx.dyntopo.Link.BasicLinkModel.txmap" class="py-name" href="#" onclick="return doclink('link-45', 'txmap', 'link-11');">txmap</a></tt><tt class="py-op">=</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt><tt class="py-op">.</tt><tt id="link-46" class="py-name"><a title="simx.dyntopo.Link.BasicLinkModel.txmap" class="py-name" href="#" onclick="return doclink('link-46', 'txmap', 'link-11');">txmap</a></tt><tt class="py-op">)</tt> </tt>
</div><a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line"> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line"> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">needsRebuild</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line"><tt class="py-docstring">            Returns True iff at least one of the nodes is "dirty".</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line">            <tt class="py-keyword">return</tt> <tt class="py-name">any</tt><tt class="py-op">(</tt><tt class="py-name">True</tt> <tt class="py-keyword">for</tt> <tt class="py-name">x</tt> <tt class="py-keyword">in</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-47" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-47', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> <tt class="py-keyword">if</tt> <tt class="py-name">x</tt><tt class="py-op">.</tt><tt class="py-name">dirty</tt><tt class="py-op">)</tt> </tt>
</div><a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line"> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line"> </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">rebuildModel</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line"><tt class="py-docstring">            Completely re-builds the radio-model.</tt> </tt>
<a name="L197"></a><tt class="py-lineno">197</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line"><tt class="py-docstring">            This should be called after a TX-power or position change</tt> </tt>
<a name="L199"></a><tt class="py-lineno">199</tt>  <tt class="py-line"><tt class="py-docstring">            or a change to the topology in general.</tt> </tt>
<a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line"><tt class="py-docstring">            **I have NO IDEA how and/or if this will work with the</tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line"><tt class="py-docstring">              TOSSIM/T2 noise model. (For now I just ignore it.)</tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L204"></a><tt class="py-lineno">204</tt>  <tt class="py-line">            <tt id="link-48" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-48', 'nodes', 'link-18');">nodes</a></tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-49" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-49', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L205"></a><tt class="py-lineno">205</tt>  <tt class="py-line"> </tt>
<a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">a</tt> <tt class="py-keyword">in</tt> <tt id="link-50" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-50', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">:</tt> </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line">                <tt class="py-keyword">for</tt> <tt class="py-name">b</tt> <tt class="py-keyword">in</tt> <tt class="py-name">a</tt><tt class="py-op">.</tt><tt id="link-51" class="py-name" targets="Method simx.base.node.Node.neighbors()=simx.base.node.Node-class.html#neighbors"><a title="simx.base.node.Node.neighbors" class="py-name" href="#" onclick="return doclink('link-51', 'neighbors', 'link-51');">neighbors</a></tt><tt class="py-op">:</tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line">                    <tt class="py-op">(</tt><tt class="py-name">gain_a</tt><tt class="py-op">,</tt> <tt class="py-name">gain_b</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt><tt class="py-op">.</tt><tt id="link-52" class="py-name"><a title="simx.base.radio.RadioRedirect.gain
simx.dyntopo.Link.BasicLinkModel.gain
simx.dyntopo.Manager.NodeManager.gain
simx.dyntopo.Topo.GenericTopo.gain" class="py-name" href="#" onclick="return doclink('link-52', 'gain', 'link-25');">gain</a></tt><tt class="py-op">(</tt><tt class="py-name">a</tt><tt class="py-op">,</tt> <tt class="py-name">b</tt><tt class="py-op">)</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line">                    <tt class="py-name">a</tt><tt class="py-op">.</tt><tt id="link-53" class="py-name" targets="Method simx.base.radio.RadioRedirect.add()=simx.base.radio.RadioRedirect-class.html#add"><a title="simx.base.radio.RadioRedirect.add" class="py-name" href="#" onclick="return doclink('link-53', 'add', 'link-53');">add</a></tt><tt class="py-op">(</tt><tt class="py-name">b</tt><tt class="py-op">,</tt> <tt class="py-name">gain_a</tt><tt class="py-op">)</tt> </tt>
<a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line">                    <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-54" class="py-name"><a title="simx.base.radio.RadioRedirect.add" class="py-name" href="#" onclick="return doclink('link-54', 'add', 'link-53');">add</a></tt><tt class="py-op">(</tt><tt class="py-name">a</tt><tt class="py-op">,</tt> <tt class="py-name">gain_b</tt><tt class="py-op">)</tt> </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line"> </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">n</tt> <tt class="py-keyword">in</tt> <tt id="link-55" class="py-name"><a title="simx.dyntopo.Manager.NodeManager.nodes
simx.dyntopo.Topo.GenericTopo.nodes" class="py-name" href="#" onclick="return doclink('link-55', 'nodes', 'link-18');">nodes</a></tt><tt class="py-op">:</tt> </tt>
<a name="L213"></a><tt class="py-lineno">213</tt>  <tt class="py-line">                <tt class="py-name">n</tt><tt class="py-op">.</tt><tt class="py-name">mark_clean</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L214"></a><tt class="py-lineno">214</tt>  <tt class="py-line"> </tt>
<a name="L215"></a><tt class="py-lineno">215</tt>  <tt class="py-line"> </tt>
<a name="L216"></a><tt class="py-lineno">216</tt>  <tt class="py-line">        <tt class="py-keyword">def</tt> <tt class="py-def-name">rebuildLinks_Isolated</tt><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">node</tt><tt class="py-op">,</tt> <tt class="py-param">link_in</tt><tt class="py-op">=</tt><tt class="py-name">True</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L217"></a><tt class="py-lineno">217</tt>  <tt class="py-line">            <tt class="py-docstring">"""</tt> </tt>
<a name="L218"></a><tt class="py-lineno">218</tt>  <tt class="py-line"><tt class="py-docstring">            Rebuilds information for a single node.</tt> </tt>
<a name="L219"></a><tt class="py-lineno">219</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L220"></a><tt class="py-lineno">220</tt>  <tt class="py-line"><tt class="py-docstring">            If link_in is True then neighbor links will be re-applied</tt> </tt>
<a name="L221"></a><tt class="py-lineno">221</tt>  <tt class="py-line"><tt class="py-docstring">            as well. (Not rebuilding neighbors is useful for a txgain</tt> </tt>
<a name="L222"></a><tt class="py-lineno">222</tt>  <tt class="py-line"><tt class="py-docstring">            change; the node positions are the same but the outward</tt> </tt>
<a name="L223"></a><tt class="py-lineno">223</tt>  <tt class="py-line"><tt class="py-docstring">            gain is reduced.)</tt> </tt>
<a name="L224"></a><tt class="py-lineno">224</tt>  <tt class="py-line"><tt class="py-docstring">            """</tt> </tt>
<a name="L225"></a><tt class="py-lineno">225</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">other</tt> <tt class="py-keyword">in</tt> <tt id="link-56" class="py-name" targets="Module simx.base.node=simx.base.node-module.html,Variable simx.probe.probe.Probe.node=simx.probe.probe.Probe-class.html#node"><a title="simx.base.node
simx.probe.probe.Probe.node" class="py-name" href="#" onclick="return doclink('link-56', 'node', 'link-56');">node</a></tt><tt class="py-op">.</tt><tt id="link-57" class="py-name"><a title="simx.base.node.Node.neighbors" class="py-name" href="#" onclick="return doclink('link-57', 'neighbors', 'link-51');">neighbors</a></tt><tt class="py-op">:</tt> </tt>
<a name="L226"></a><tt class="py-lineno">226</tt>  <tt class="py-line">                <tt class="py-op">(</tt><tt class="py-name">gain_out</tt><tt class="py-op">,</tt> <tt class="py-name">gain_in</tt><tt class="py-op">)</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">model</tt><tt class="py-op">.</tt><tt id="link-58" class="py-name"><a title="simx.base.radio.RadioRedirect.gain
simx.dyntopo.Link.BasicLinkModel.gain
simx.dyntopo.Manager.NodeManager.gain
simx.dyntopo.Topo.GenericTopo.gain" class="py-name" href="#" onclick="return doclink('link-58', 'gain', 'link-25');">gain</a></tt><tt class="py-op">(</tt><tt id="link-59" class="py-name"><a title="simx.base.node
simx.probe.probe.Probe.node" class="py-name" href="#" onclick="return doclink('link-59', 'node', 'link-56');">node</a></tt><tt class="py-op">,</tt> <tt class="py-name">other</tt><tt class="py-op">)</tt> </tt>
<a name="L227"></a><tt class="py-lineno">227</tt>  <tt class="py-line">                <tt id="link-60" class="py-name"><a title="simx.base.node
simx.probe.probe.Probe.node" class="py-name" href="#" onclick="return doclink('link-60', 'node', 'link-56');">node</a></tt><tt class="py-op">.</tt><tt id="link-61" class="py-name"><a title="simx.base.radio.RadioRedirect.add" class="py-name" href="#" onclick="return doclink('link-61', 'add', 'link-53');">add</a></tt><tt class="py-op">(</tt><tt class="py-name">other</tt><tt class="py-op">,</tt> <tt class="py-name">gain_out</tt><tt class="py-op">)</tt> </tt>
<a name="L228"></a><tt class="py-lineno">228</tt>  <tt class="py-line">                <tt class="py-keyword">if</tt> <tt class="py-name">link_in</tt><tt class="py-op">:</tt> </tt>
<a name="L229"></a><tt class="py-lineno">229</tt>  <tt class="py-line">                    <tt class="py-name">other</tt><tt class="py-op">.</tt><tt id="link-62" class="py-name"><a title="simx.base.radio.RadioRedirect.add" class="py-name" href="#" onclick="return doclink('link-62', 'add', 'link-53');">add</a></tt><tt class="py-op">(</tt><tt id="link-63" class="py-name"><a title="simx.base.node
simx.probe.probe.Probe.node" class="py-name" href="#" onclick="return doclink('link-63', 'node', 'link-56');">node</a></tt><tt class="py-op">,</tt> <tt class="py-name">gain_in</tt><tt class="py-op">)</tt> </tt>
<a name="L230"></a><tt class="py-lineno">230</tt>  <tt class="py-line"> </tt>
<a name="L231"></a><tt class="py-lineno">231</tt>  <tt class="py-line">            <tt class="py-comment"># TODO: This is broken, the node isn't necc. entirely clean</tt> </tt>
<a name="L232"></a><tt class="py-lineno">232</tt>  <tt class="py-line"><tt class="py-comment"></tt>            <tt id="link-64" class="py-name"><a title="simx.base.node
simx.probe.probe.Probe.node" class="py-name" href="#" onclick="return doclink('link-64', 'node', 'link-56');">node</a></tt><tt class="py-op">.</tt><tt class="py-name">mark_clean</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L233"></a><tt class="py-lineno">233</tt>  <tt class="py-line"> </tt>
<a name="L234"></a><tt class="py-lineno">234</tt>  <tt class="py-line">  </tt>
<a name="L235"></a><tt class="py-lineno">235</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">_DynManager</tt><tt class="py-op">(</tt><tt class="py-op">*</tt><tt class="py-name">opts</tt><tt class="py-op">,</tt> <tt class="py-op">**</tt><tt class="py-name">kws</tt><tt class="py-op">)</tt> </tt>
</div><a name="L236"></a><tt class="py-lineno">236</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Wed Aug 12 00:17:37 2009
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
