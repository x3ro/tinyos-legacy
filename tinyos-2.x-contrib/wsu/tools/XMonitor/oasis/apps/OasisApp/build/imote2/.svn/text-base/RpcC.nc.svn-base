// *** WARNING ****** WARNING ****** WARNING ****** WARNING ****** WARNING ***
// ***                                                                     ***
// *** This file was automatically generated by generateRpc.pl.   ***
// *** Any and all changes made to this file WILL BE LOST!                 ***
// ***                                                                     ***
// *** WARNING ****** WARNING ****** WARNING ****** WARNING ****** WARNING ***

includes Rpc;

configuration RpcC {
  provides {
    interface StdControl;
  }
  uses {
    interface Receive as CommandReceive;
	interface Send as ResponseSend;

#ifndef USE_MULTIHOP_LQI
    interface SendMsg as ResponseSendMsg;
#endif
  }

}
implementation {

  components 
    RpcM
	,LedsC
	;

    components EventReportM;
    components GenericCommProM;
    components MultiHopLQI;
    components RamSymbolsM;
    components SNMSM;
    components SmartSensingM;
    RpcM.EventReportM_EventConfig -> EventReportM.EventConfig;
    RpcM.GenericCommProM_getRFChannel -> GenericCommProM.getRFChannel;
    RpcM.GenericCommProM_getRFPower -> GenericCommProM.getRFPower;
    RpcM.GenericCommProM_setRFChannel -> GenericCommProM.setRFChannel;
    RpcM.GenericCommProM_setRFPower -> GenericCommProM.setRFPower;
    RpcM.MultiHopLQI_RouteRpcCtrl -> MultiHopLQI.RouteRpcCtrl;
    RpcM.RamSymbolsM_peek -> RamSymbolsM.peek;
    RpcM.RamSymbolsM_poke -> RamSymbolsM.poke;
    RpcM.SNMSM_ledsOn -> SNMSM.ledsOn;
    RpcM.SNMSM_restart -> SNMSM.restart;
    RpcM.SmartSensingM_SensingConfig -> SmartSensingM.SensingConfig;
    RpcM.SmartSensingM_eraseFlash -> SmartSensingM.eraseFlash;

  //now do all the wiring for the rpc communication:
  StdControl = RpcM;
  

  CommandReceive = RpcM;
  ResponseSend = RpcM;

#ifndef USE_MULTIHOP_LQI
  ResponseSendMsg = RpcM;
#endif

  RpcM.Leds -> LedsC;

}
