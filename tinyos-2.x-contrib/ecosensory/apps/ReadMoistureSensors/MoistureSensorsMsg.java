/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MoistureSensorsMsg'
 * message type.
 */

public class MoistureSensorsMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new MoistureSensorsMsg of size 28. */
    public MoistureSensorsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MoistureSensorsMsg of the given data_length. */
    public MoistureSensorsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg with the given data_length
     * and base offset.
     */
    public MoistureSensorsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg using the given byte array
     * as backing store.
     */
    public MoistureSensorsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MoistureSensorsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MoistureSensorsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg embedded in the given message
     * at the given base offset.
     */
    public MoistureSensorsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoistureSensorsMsg embedded in the given message
     * at the given base offset and length.
     */
    public MoistureSensorsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MoistureSensorsMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc00=0x"+Long.toHexString(get_adc00())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc01=0x"+Long.toHexString(get_adc01())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc02=0x"+Long.toHexString(get_adc02())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc03=0x"+Long.toHexString(get_adc03())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc04=0x"+Long.toHexString(get_adc04())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc05=0x"+Long.toHexString(get_adc05())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc10=0x"+Long.toHexString(get_adc10())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc11=0x"+Long.toHexString(get_adc11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc12=0x"+Long.toHexString(get_adc12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc13=0x"+Long.toHexString(get_adc13())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc14=0x"+Long.toHexString(get_adc14())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [adc15=0x"+Long.toHexString(get_adc15())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timestamp=0x"+Long.toHexString(get_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc00
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc00' is signed (false).
     */
    public static boolean isSigned_adc00() {
        return false;
    }

    /**
     * Return whether the field 'adc00' is an array (false).
     */
    public static boolean isArray_adc00() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc00'
     */
    public static int offset_adc00() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc00'
     */
    public static int offsetBits_adc00() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'adc00'
     */
    public int get_adc00() {
        return (int)getUIntBEElement(offsetBits_adc00(), 16);
    }

    /**
     * Set the value of the field 'adc00'
     */
    public void set_adc00(int value) {
        setUIntBEElement(offsetBits_adc00(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc00'
     */
    public static int size_adc00() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc00'
     */
    public static int sizeBits_adc00() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc01
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc01' is signed (false).
     */
    public static boolean isSigned_adc01() {
        return false;
    }

    /**
     * Return whether the field 'adc01' is an array (false).
     */
    public static boolean isArray_adc01() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc01'
     */
    public static int offset_adc01() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc01'
     */
    public static int offsetBits_adc01() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'adc01'
     */
    public int get_adc01() {
        return (int)getUIntBEElement(offsetBits_adc01(), 16);
    }

    /**
     * Set the value of the field 'adc01'
     */
    public void set_adc01(int value) {
        setUIntBEElement(offsetBits_adc01(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc01'
     */
    public static int size_adc01() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc01'
     */
    public static int sizeBits_adc01() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc02
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc02' is signed (false).
     */
    public static boolean isSigned_adc02() {
        return false;
    }

    /**
     * Return whether the field 'adc02' is an array (false).
     */
    public static boolean isArray_adc02() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc02'
     */
    public static int offset_adc02() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc02'
     */
    public static int offsetBits_adc02() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'adc02'
     */
    public int get_adc02() {
        return (int)getUIntBEElement(offsetBits_adc02(), 16);
    }

    /**
     * Set the value of the field 'adc02'
     */
    public void set_adc02(int value) {
        setUIntBEElement(offsetBits_adc02(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc02'
     */
    public static int size_adc02() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc02'
     */
    public static int sizeBits_adc02() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc03
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc03' is signed (false).
     */
    public static boolean isSigned_adc03() {
        return false;
    }

    /**
     * Return whether the field 'adc03' is an array (false).
     */
    public static boolean isArray_adc03() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc03'
     */
    public static int offset_adc03() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc03'
     */
    public static int offsetBits_adc03() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'adc03'
     */
    public int get_adc03() {
        return (int)getUIntBEElement(offsetBits_adc03(), 16);
    }

    /**
     * Set the value of the field 'adc03'
     */
    public void set_adc03(int value) {
        setUIntBEElement(offsetBits_adc03(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc03'
     */
    public static int size_adc03() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc03'
     */
    public static int sizeBits_adc03() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc04
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc04' is signed (false).
     */
    public static boolean isSigned_adc04() {
        return false;
    }

    /**
     * Return whether the field 'adc04' is an array (false).
     */
    public static boolean isArray_adc04() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc04'
     */
    public static int offset_adc04() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc04'
     */
    public static int offsetBits_adc04() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'adc04'
     */
    public int get_adc04() {
        return (int)getUIntBEElement(offsetBits_adc04(), 16);
    }

    /**
     * Set the value of the field 'adc04'
     */
    public void set_adc04(int value) {
        setUIntBEElement(offsetBits_adc04(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc04'
     */
    public static int size_adc04() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc04'
     */
    public static int sizeBits_adc04() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc05
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc05' is signed (false).
     */
    public static boolean isSigned_adc05() {
        return false;
    }

    /**
     * Return whether the field 'adc05' is an array (false).
     */
    public static boolean isArray_adc05() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc05'
     */
    public static int offset_adc05() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc05'
     */
    public static int offsetBits_adc05() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'adc05'
     */
    public int get_adc05() {
        return (int)getUIntBEElement(offsetBits_adc05(), 16);
    }

    /**
     * Set the value of the field 'adc05'
     */
    public void set_adc05(int value) {
        setUIntBEElement(offsetBits_adc05(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc05'
     */
    public static int size_adc05() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc05'
     */
    public static int sizeBits_adc05() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc10
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc10' is signed (false).
     */
    public static boolean isSigned_adc10() {
        return false;
    }

    /**
     * Return whether the field 'adc10' is an array (false).
     */
    public static boolean isArray_adc10() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc10'
     */
    public static int offset_adc10() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc10'
     */
    public static int offsetBits_adc10() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'adc10'
     */
    public int get_adc10() {
        return (int)getUIntBEElement(offsetBits_adc10(), 16);
    }

    /**
     * Set the value of the field 'adc10'
     */
    public void set_adc10(int value) {
        setUIntBEElement(offsetBits_adc10(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc10'
     */
    public static int size_adc10() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc10'
     */
    public static int sizeBits_adc10() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc11
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc11' is signed (false).
     */
    public static boolean isSigned_adc11() {
        return false;
    }

    /**
     * Return whether the field 'adc11' is an array (false).
     */
    public static boolean isArray_adc11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc11'
     */
    public static int offset_adc11() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc11'
     */
    public static int offsetBits_adc11() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'adc11'
     */
    public int get_adc11() {
        return (int)getUIntBEElement(offsetBits_adc11(), 16);
    }

    /**
     * Set the value of the field 'adc11'
     */
    public void set_adc11(int value) {
        setUIntBEElement(offsetBits_adc11(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc11'
     */
    public static int size_adc11() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc11'
     */
    public static int sizeBits_adc11() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc12
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc12' is signed (false).
     */
    public static boolean isSigned_adc12() {
        return false;
    }

    /**
     * Return whether the field 'adc12' is an array (false).
     */
    public static boolean isArray_adc12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc12'
     */
    public static int offset_adc12() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc12'
     */
    public static int offsetBits_adc12() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'adc12'
     */
    public int get_adc12() {
        return (int)getUIntBEElement(offsetBits_adc12(), 16);
    }

    /**
     * Set the value of the field 'adc12'
     */
    public void set_adc12(int value) {
        setUIntBEElement(offsetBits_adc12(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc12'
     */
    public static int size_adc12() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc12'
     */
    public static int sizeBits_adc12() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc13
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc13' is signed (false).
     */
    public static boolean isSigned_adc13() {
        return false;
    }

    /**
     * Return whether the field 'adc13' is an array (false).
     */
    public static boolean isArray_adc13() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc13'
     */
    public static int offset_adc13() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc13'
     */
    public static int offsetBits_adc13() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'adc13'
     */
    public int get_adc13() {
        return (int)getUIntBEElement(offsetBits_adc13(), 16);
    }

    /**
     * Set the value of the field 'adc13'
     */
    public void set_adc13(int value) {
        setUIntBEElement(offsetBits_adc13(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc13'
     */
    public static int size_adc13() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc13'
     */
    public static int sizeBits_adc13() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc14
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc14' is signed (false).
     */
    public static boolean isSigned_adc14() {
        return false;
    }

    /**
     * Return whether the field 'adc14' is an array (false).
     */
    public static boolean isArray_adc14() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc14'
     */
    public static int offset_adc14() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc14'
     */
    public static int offsetBits_adc14() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'adc14'
     */
    public int get_adc14() {
        return (int)getUIntBEElement(offsetBits_adc14(), 16);
    }

    /**
     * Set the value of the field 'adc14'
     */
    public void set_adc14(int value) {
        setUIntBEElement(offsetBits_adc14(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc14'
     */
    public static int size_adc14() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc14'
     */
    public static int sizeBits_adc14() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: adc15
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'adc15' is signed (false).
     */
    public static boolean isSigned_adc15() {
        return false;
    }

    /**
     * Return whether the field 'adc15' is an array (false).
     */
    public static boolean isArray_adc15() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'adc15'
     */
    public static int offset_adc15() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'adc15'
     */
    public static int offsetBits_adc15() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'adc15'
     */
    public int get_adc15() {
        return (int)getUIntBEElement(offsetBits_adc15(), 16);
    }

    /**
     * Set the value of the field 'adc15'
     */
    public void set_adc15(int value) {
        setUIntBEElement(offsetBits_adc15(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'adc15'
     */
    public static int size_adc15() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'adc15'
     */
    public static int sizeBits_adc15() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timestamp
    //   Field type: int, unsigned
    //   Offset (bits): 208
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timestamp' is signed (false).
     */
    public static boolean isSigned_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'timestamp' is an array (false).
     */
    public static boolean isArray_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timestamp'
     */
    public static int offset_timestamp() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timestamp'
     */
    public static int offsetBits_timestamp() {
        return 208;
    }

    /**
     * Return the value (as a int) of the field 'timestamp'
     */
    public int get_timestamp() {
        return (int)getUIntBEElement(offsetBits_timestamp(), 16);
    }

    /**
     * Set the value of the field 'timestamp'
     */
    public void set_timestamp(int value) {
        setUIntBEElement(offsetBits_timestamp(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'timestamp'
     */
    public static int size_timestamp() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timestamp'
     */
    public static int sizeBits_timestamp() {
        return 16;
    }

}
