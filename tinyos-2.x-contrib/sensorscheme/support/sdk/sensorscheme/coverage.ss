(ssmodule
    coverage
  
  (require "std.scm" "selector.scm" "network.scm")
  
  (include list < > >= <= number? boolean? symbol? eq?)
  
  (define numlist (lambda (n) (if (> n 0) (cons n (numlist (- n 1))) '())))
  (define tail-recursion (lambda (n out) (if (> n 0) (tail-recursion (- n 1) (cons n out)) out)))
  (define var (apply - (list 1 2 3 5)))
  (let/cc exit
    (set-car! (cons 1 2) 
              (length (eval '(list (< 1 0)
                                   (> -1 0)
                                   (>= 1 8)
                                   (<= 8191 12)
                                   (number? 16)
                                   (boolean? #t)
                                   (symbol? 'a)
                                   (eq? 3762 3762)))))  (set! var (let ((a (* 4095 20))
                                                                        (b (% 1543 56)))
                                                                    (set-cdr! (cons 1 2) 3)
                                                                    (car (cons (if (> (/ a b) (- 1 (+ a b)))
                                                                                   #f #t) '()))))
    
    (call-at-time (+ (now) 16) (lambda () 
                                 (bcast (cons '+  (tail-recursion 50 ())))
                                 (send-serial (cons '+ (map (lambda (x) (+ x 65535)) (numlist 15))))
                                 (blink 8201)
                                 (exit #f))))
  )


((%nil%              0 %special%)
 (#t                 1 %primitive%)
 (#f                 2 %primitive%)
 ; read symbols
 (%brclose%          3 %special%)
 (%dot%              4 %special%)
 ; the special forms
 (%lambda%           5 %special%)
 (if                 6 %special%)
 (quote              7 %special%)
 (%define%           8 %special%)
 (set!               9 %primitive%)
 (%closure%         10 %special%)
 (%continuation%    11 %special%)
 (%primitive%       12 %special%)
 
 ; all other natively defined symbols
 (id                13 %primitive%)
 (defined?          14 %primitive%)
 (eval              15 %primitive%)
 (apply             16 %primitive%)
 (call/cc           17 %primitive%)
 (car               18 %primitive%)
 (cdr               19 %primitive%)
 (set-car!          20 %primitive%)
 (set-cdr!          21 %primitive%)
 (cons              22 %primitive%)
 (+                 23 %primitive%)
 (-                 24 %primitive%)
 (*                 25 %primitive%)
 (/                 26 %primitive%)
 (%                 27 %primitive%)
 (bitwise-ior       28 %primitive%)
 (bitwise-and       29 %primitive%)
 (bitwise-xor       30 %primitive%)
 (bitwise-not       31 %primitive%)
 (null?             32 %primitive%)
 (pair?             33 %primitive%)
 (symbol?           34 %primitive%)
 (number?           35 %primitive%)
 (boolean?          36 %primitive%)
 (>                 37 %primitive%)
 (>=                38 %primitive%)
 (<                 39 %primitive%)
 (<=                40 %primitive%)
 (eq?               41 %primitive%)
 (not               42 %primitive%)
 (rand              43 %primitive%)
 (now               44 %primitive%)
 (append            45 %primitive%)
 (list              46 %primitive%)
 (call-at-time      47 %primitive%)
 (eval-handler      48 %primitive%)
 (sensor            49 %primitive%)
 (blink             50 %primitive%)
 (send-serial       51 %primitive%)
 (send-sink         52 %primitive%)
 (bcast             53 %primitive%)
 (send-local        54 %primitive%)
 (get-neighbors     55 %primitive%)
 (hops              56 %primitive%)
 (relcast-message   57 %primitive%)
 )