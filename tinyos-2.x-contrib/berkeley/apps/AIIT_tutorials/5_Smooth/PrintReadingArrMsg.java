/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PrintReadingArrMsg'
 * message type.
 */

public class PrintReadingArrMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 12;

    /** Create a new PrintReadingArrMsg of size 28. */
    public PrintReadingArrMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PrintReadingArrMsg of the given data_length. */
    public PrintReadingArrMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg with the given data_length
     * and base offset.
     */
    public PrintReadingArrMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg using the given byte array
     * as backing store.
     */
    public PrintReadingArrMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PrintReadingArrMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PrintReadingArrMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg embedded in the given message
     * at the given base offset.
     */
    public PrintReadingArrMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PrintReadingArrMsg embedded in the given message
     * at the given base offset and length.
     */
    public PrintReadingArrMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PrintReadingArrMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [min=0x"+Long.toHexString(get_min())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [max=0x"+Long.toHexString(get_max())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [mean=0x"+Long.toHexString(get_mean())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [raw_reading=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_raw_reading(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [smooth_reading=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_smooth_reading(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: min
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'min' is signed (false).
     */
    public static boolean isSigned_min() {
        return false;
    }

    /**
     * Return whether the field 'min' is an array (false).
     */
    public static boolean isArray_min() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'min'
     */
    public static int offset_min() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'min'
     */
    public static int offsetBits_min() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'min'
     */
    public int get_min() {
        return (int)getUIntBEElement(offsetBits_min(), 16);
    }

    /**
     * Set the value of the field 'min'
     */
    public void set_min(int value) {
        setUIntBEElement(offsetBits_min(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'min'
     */
    public static int size_min() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'min'
     */
    public static int sizeBits_min() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: max
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'max' is signed (false).
     */
    public static boolean isSigned_max() {
        return false;
    }

    /**
     * Return whether the field 'max' is an array (false).
     */
    public static boolean isArray_max() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'max'
     */
    public static int offset_max() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'max'
     */
    public static int offsetBits_max() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'max'
     */
    public int get_max() {
        return (int)getUIntBEElement(offsetBits_max(), 16);
    }

    /**
     * Set the value of the field 'max'
     */
    public void set_max(int value) {
        setUIntBEElement(offsetBits_max(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'max'
     */
    public static int size_max() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'max'
     */
    public static int sizeBits_max() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: mean
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'mean' is signed (false).
     */
    public static boolean isSigned_mean() {
        return false;
    }

    /**
     * Return whether the field 'mean' is an array (false).
     */
    public static boolean isArray_mean() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'mean'
     */
    public static int offset_mean() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'mean'
     */
    public static int offsetBits_mean() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'mean'
     */
    public int get_mean() {
        return (int)getUIntBEElement(offsetBits_mean(), 16);
    }

    /**
     * Set the value of the field 'mean'
     */
    public void set_mean(int value) {
        setUIntBEElement(offsetBits_mean(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'mean'
     */
    public static int size_mean() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'mean'
     */
    public static int sizeBits_mean() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: raw_reading
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'raw_reading' is signed (false).
     */
    public static boolean isSigned_raw_reading() {
        return false;
    }

    /**
     * Return whether the field 'raw_reading' is an array (true).
     */
    public static boolean isArray_raw_reading() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'raw_reading'
     */
    public static int offset_raw_reading(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'raw_reading'
     */
    public static int offsetBits_raw_reading(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'raw_reading' as a int[]
     */
    public int[] get_raw_reading() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_raw_reading(0); index0++) {
            tmp[index0] = getElement_raw_reading(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'raw_reading' from the given int[]
     */
    public void set_raw_reading(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_raw_reading(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'raw_reading'
     */
    public int getElement_raw_reading(int index1) {
        return (int)getUIntBEElement(offsetBits_raw_reading(index1), 16);
    }

    /**
     * Set an element of the array 'raw_reading'
     */
    public void setElement_raw_reading(int index1, int value) {
        setUIntBEElement(offsetBits_raw_reading(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'raw_reading'
     */
    public static int totalSize_raw_reading() {
        return (80 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'raw_reading'
     */
    public static int totalSizeBits_raw_reading() {
        return 80;
    }

    /**
     * Return the size, in bytes, of each element of the array 'raw_reading'
     */
    public static int elementSize_raw_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'raw_reading'
     */
    public static int elementSizeBits_raw_reading() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'raw_reading'
     */
    public static int numDimensions_raw_reading() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'raw_reading'
     */
    public static int numElements_raw_reading() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'raw_reading'
     * for the given dimension.
     */
    public static int numElements_raw_reading(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: smooth_reading
    //   Field type: int[], unsigned
    //   Offset (bits): 144
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'smooth_reading' is signed (false).
     */
    public static boolean isSigned_smooth_reading() {
        return false;
    }

    /**
     * Return whether the field 'smooth_reading' is an array (true).
     */
    public static boolean isArray_smooth_reading() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'smooth_reading'
     */
    public static int offset_smooth_reading(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'smooth_reading'
     */
    public static int offsetBits_smooth_reading(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'smooth_reading' as a int[]
     */
    public int[] get_smooth_reading() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_smooth_reading(0); index0++) {
            tmp[index0] = getElement_smooth_reading(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'smooth_reading' from the given int[]
     */
    public void set_smooth_reading(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_smooth_reading(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'smooth_reading'
     */
    public int getElement_smooth_reading(int index1) {
        return (int)getUIntBEElement(offsetBits_smooth_reading(index1), 16);
    }

    /**
     * Set an element of the array 'smooth_reading'
     */
    public void setElement_smooth_reading(int index1, int value) {
        setUIntBEElement(offsetBits_smooth_reading(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'smooth_reading'
     */
    public static int totalSize_smooth_reading() {
        return (80 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'smooth_reading'
     */
    public static int totalSizeBits_smooth_reading() {
        return 80;
    }

    /**
     * Return the size, in bytes, of each element of the array 'smooth_reading'
     */
    public static int elementSize_smooth_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'smooth_reading'
     */
    public static int elementSizeBits_smooth_reading() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'smooth_reading'
     */
    public static int numDimensions_smooth_reading() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'smooth_reading'
     */
    public static int numElements_smooth_reading() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'smooth_reading'
     * for the given dimension.
     */
    public static int numElements_smooth_reading(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
