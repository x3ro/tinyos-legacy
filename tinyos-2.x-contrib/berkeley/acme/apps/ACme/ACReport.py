#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'AcReport'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 39

# The Active Message type associated with this message.
AM_TYPE = -1

class AcReport(tinyos.message.Message.Message):
    # Create a new AcReport of size 39.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=39):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <AcReport> \n"
        try:
            s += "  [power=0x%x]\n" % (self.get_power())
        except:
            pass
        try:
            s += "  [energy=0x%x]\n" % (self.get_energy())
        except:
            pass
        try:
            s += "  [maxPower=0x%x]\n" % (self.get_maxPower())
        except:
            pass
        try:
            s += "  [minPower=0x%x]\n" % (self.get_minPower())
        except:
            pass
        try:
            s += "  [averagePower=0x%x]\n" % (self.get_averagePower())
        except:
            pass
        try:
            s += "  [totalEnergy=0x%x]\n" % (self.get_totalEnergy())
        except:
            pass
        try:
            s += "  [seq=0x%x]\n" % (self.get_seq())
        except:
            pass
        try:
            s += "  [route.hop_limit=0x%x]\n" % (self.get_route_hop_limit())
        except:
            pass
        try:
            s += "  [route.parent=0x%x]\n" % (self.get_route_parent())
        except:
            pass
        try:
            s += "  [route.parent_metric=0x%x]\n" % (self.get_route_parent_metric())
        except:
            pass
        try:
            s += "  [route.parent_etx=0x%x]\n" % (self.get_route_parent_etx())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: power
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'power' is signed (False).
    #
    def isSigned_power(self):
        return False
    
    #
    # Return whether the field 'power' is an array (False).
    #
    def isArray_power(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'power'
    #
    def offset_power(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'power'
    #
    def offsetBits_power(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'power'
    #
    def get_power(self):
        return self.getUIntElement(self.offsetBits_power(), 32, 1)
    
    #
    # Set the value of the field 'power'
    #
    def set_power(self, value):
        self.setUIntElement(self.offsetBits_power(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'power'
    #
    def size_power(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'power'
    #
    def sizeBits_power(self):
        return 32
    
    #
    # Accessor methods for field: energy
    #   Field type: long
    #   Offset (bits): 32
    #   Size (bits): 32
    #

    #
    # Return whether the field 'energy' is signed (False).
    #
    def isSigned_energy(self):
        return False
    
    #
    # Return whether the field 'energy' is an array (False).
    #
    def isArray_energy(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'energy'
    #
    def offset_energy(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'energy'
    #
    def offsetBits_energy(self):
        return 32
    
    #
    # Return the value (as a long) of the field 'energy'
    #
    def get_energy(self):
        return self.getUIntElement(self.offsetBits_energy(), 32, 1)
    
    #
    # Set the value of the field 'energy'
    #
    def set_energy(self, value):
        self.setUIntElement(self.offsetBits_energy(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'energy'
    #
    def size_energy(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'energy'
    #
    def sizeBits_energy(self):
        return 32
    
    #
    # Accessor methods for field: maxPower
    #   Field type: long
    #   Offset (bits): 64
    #   Size (bits): 32
    #

    #
    # Return whether the field 'maxPower' is signed (False).
    #
    def isSigned_maxPower(self):
        return False
    
    #
    # Return whether the field 'maxPower' is an array (False).
    #
    def isArray_maxPower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'maxPower'
    #
    def offset_maxPower(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'maxPower'
    #
    def offsetBits_maxPower(self):
        return 64
    
    #
    # Return the value (as a long) of the field 'maxPower'
    #
    def get_maxPower(self):
        return self.getUIntElement(self.offsetBits_maxPower(), 32, 1)
    
    #
    # Set the value of the field 'maxPower'
    #
    def set_maxPower(self, value):
        self.setUIntElement(self.offsetBits_maxPower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'maxPower'
    #
    def size_maxPower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'maxPower'
    #
    def sizeBits_maxPower(self):
        return 32
    
    #
    # Accessor methods for field: minPower
    #   Field type: long
    #   Offset (bits): 96
    #   Size (bits): 32
    #

    #
    # Return whether the field 'minPower' is signed (False).
    #
    def isSigned_minPower(self):
        return False
    
    #
    # Return whether the field 'minPower' is an array (False).
    #
    def isArray_minPower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'minPower'
    #
    def offset_minPower(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'minPower'
    #
    def offsetBits_minPower(self):
        return 96
    
    #
    # Return the value (as a long) of the field 'minPower'
    #
    def get_minPower(self):
        return self.getUIntElement(self.offsetBits_minPower(), 32, 1)
    
    #
    # Set the value of the field 'minPower'
    #
    def set_minPower(self, value):
        self.setUIntElement(self.offsetBits_minPower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'minPower'
    #
    def size_minPower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'minPower'
    #
    def sizeBits_minPower(self):
        return 32
    
    #
    # Accessor methods for field: averagePower
    #   Field type: long
    #   Offset (bits): 128
    #   Size (bits): 32
    #

    #
    # Return whether the field 'averagePower' is signed (False).
    #
    def isSigned_averagePower(self):
        return False
    
    #
    # Return whether the field 'averagePower' is an array (False).
    #
    def isArray_averagePower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'averagePower'
    #
    def offset_averagePower(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'averagePower'
    #
    def offsetBits_averagePower(self):
        return 128
    
    #
    # Return the value (as a long) of the field 'averagePower'
    #
    def get_averagePower(self):
        return self.getUIntElement(self.offsetBits_averagePower(), 32, 1)
    
    #
    # Set the value of the field 'averagePower'
    #
    def set_averagePower(self, value):
        self.setUIntElement(self.offsetBits_averagePower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'averagePower'
    #
    def size_averagePower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'averagePower'
    #
    def sizeBits_averagePower(self):
        return 32
    
    #
    # Accessor methods for field: totalEnergy
    #   Field type: long
    #   Offset (bits): 160
    #   Size (bits): 64
    #

    #
    # Return whether the field 'totalEnergy' is signed (False).
    #
    def isSigned_totalEnergy(self):
        return False
    
    #
    # Return whether the field 'totalEnergy' is an array (False).
    #
    def isArray_totalEnergy(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'totalEnergy'
    #
    def offset_totalEnergy(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'totalEnergy'
    #
    def offsetBits_totalEnergy(self):
        return 160
    
    #
    # Return the value (as a long) of the field 'totalEnergy'
    #
    def get_totalEnergy(self):
        return self.getUIntElement(self.offsetBits_totalEnergy(), 64, 1)
    
    #
    # Set the value of the field 'totalEnergy'
    #
    def set_totalEnergy(self, value):
        self.setUIntElement(self.offsetBits_totalEnergy(), 64, value, 1)
    
    #
    # Return the size, in bytes, of the field 'totalEnergy'
    #
    def size_totalEnergy(self):
        return (64 / 8)
    
    #
    # Return the size, in bits, of the field 'totalEnergy'
    #
    def sizeBits_totalEnergy(self):
        return 64
    
    #
    # Accessor methods for field: seq
    #   Field type: long
    #   Offset (bits): 224
    #   Size (bits): 32
    #

    #
    # Return whether the field 'seq' is signed (False).
    #
    def isSigned_seq(self):
        return False
    
    #
    # Return whether the field 'seq' is an array (False).
    #
    def isArray_seq(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seq'
    #
    def offset_seq(self):
        return (224 / 8)
    
    #
    # Return the offset (in bits) of the field 'seq'
    #
    def offsetBits_seq(self):
        return 224
    
    #
    # Return the value (as a long) of the field 'seq'
    #
    def get_seq(self):
        return self.getUIntElement(self.offsetBits_seq(), 32, 1)
    
    #
    # Set the value of the field 'seq'
    #
    def set_seq(self, value):
        self.setUIntElement(self.offsetBits_seq(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seq'
    #
    def size_seq(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'seq'
    #
    def sizeBits_seq(self):
        return 32
    
    #
    # Accessor methods for field: route.hop_limit
    #   Field type: short
    #   Offset (bits): 256
    #   Size (bits): 8
    #

    #
    # Return whether the field 'route.hop_limit' is signed (False).
    #
    def isSigned_route_hop_limit(self):
        return False
    
    #
    # Return whether the field 'route.hop_limit' is an array (False).
    #
    def isArray_route_hop_limit(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.hop_limit'
    #
    def offset_route_hop_limit(self):
        return (256 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.hop_limit'
    #
    def offsetBits_route_hop_limit(self):
        return 256
    
    #
    # Return the value (as a short) of the field 'route.hop_limit'
    #
    def get_route_hop_limit(self):
        return self.getUIntElement(self.offsetBits_route_hop_limit(), 8, 1)
    
    #
    # Set the value of the field 'route.hop_limit'
    #
    def set_route_hop_limit(self, value):
        self.setUIntElement(self.offsetBits_route_hop_limit(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.hop_limit'
    #
    def size_route_hop_limit(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'route.hop_limit'
    #
    def sizeBits_route_hop_limit(self):
        return 8
    
    #
    # Accessor methods for field: route.parent
    #   Field type: int
    #   Offset (bits): 264
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent' is signed (False).
    #
    def isSigned_route_parent(self):
        return False
    
    #
    # Return whether the field 'route.parent' is an array (False).
    #
    def isArray_route_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent'
    #
    def offset_route_parent(self):
        return (264 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent'
    #
    def offsetBits_route_parent(self):
        return 264
    
    #
    # Return the value (as a int) of the field 'route.parent'
    #
    def get_route_parent(self):
        return self.getUIntElement(self.offsetBits_route_parent(), 16, 1)
    
    #
    # Set the value of the field 'route.parent'
    #
    def set_route_parent(self, value):
        self.setUIntElement(self.offsetBits_route_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent'
    #
    def size_route_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent'
    #
    def sizeBits_route_parent(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_metric
    #   Field type: int
    #   Offset (bits): 280
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_metric' is signed (False).
    #
    def isSigned_route_parent_metric(self):
        return False
    
    #
    # Return whether the field 'route.parent_metric' is an array (False).
    #
    def isArray_route_parent_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_metric'
    #
    def offset_route_parent_metric(self):
        return (280 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_metric'
    #
    def offsetBits_route_parent_metric(self):
        return 280
    
    #
    # Return the value (as a int) of the field 'route.parent_metric'
    #
    def get_route_parent_metric(self):
        return self.getUIntElement(self.offsetBits_route_parent_metric(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_metric'
    #
    def set_route_parent_metric(self, value):
        self.setUIntElement(self.offsetBits_route_parent_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_metric'
    #
    def size_route_parent_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_metric'
    #
    def sizeBits_route_parent_metric(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_etx
    #   Field type: int
    #   Offset (bits): 296
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_etx' is signed (False).
    #
    def isSigned_route_parent_etx(self):
        return False
    
    #
    # Return whether the field 'route.parent_etx' is an array (False).
    #
    def isArray_route_parent_etx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_etx'
    #
    def offset_route_parent_etx(self):
        return (296 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_etx'
    #
    def offsetBits_route_parent_etx(self):
        return 296
    
    #
    # Return the value (as a int) of the field 'route.parent_etx'
    #
    def get_route_parent_etx(self):
        return self.getUIntElement(self.offsetBits_route_parent_etx(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_etx'
    #
    def set_route_parent_etx(self, value):
        self.setUIntElement(self.offsetBits_route_parent_etx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_etx'
    #
    def size_route_parent_etx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_etx'
    #
    def sizeBits_route_parent_etx(self):
        return 16
    
