#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'AcReport'
# message type.
#

import Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 43

# The Active Message type associated with this message.
AM_TYPE = -1

class AcReport(Message.Message):
    # Create a new AcReport of size 43.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=43):
        Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <AcReport> \n"
        try:
            s += "  [averagePower=0x%x]\n" % (self.get_averagePower())
        except:
            pass
        try:
            s += "  [maxPower=0x%x]\n" % (self.get_maxPower())
        except:
            pass
        try:
            s += "  [minPower=0x%x]\n" % (self.get_minPower())
        except:
            pass
        try:
            s += "  [cumulativeEnergy=0x%x]\n" % (self.get_cumulativeEnergy())
        except:
            pass
        try:
            s += "  [apparentPower=0x%x]\n" % (self.get_apparentPower())
        except:
            pass
        try:
            s += "  [seq=0x%x]\n" % (self.get_seq())
        except:
            pass
        try:
            s += "  [eui64=";
            for i in range(0, 8):
                s += "0x%x " % (self.getElement_eui64(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [route.hop_limit=0x%x]\n" % (self.get_route_hop_limit())
        except:
            pass
        try:
            s += "  [route.parent=0x%x]\n" % (self.get_route_parent())
        except:
            pass
        try:
            s += "  [route.parent_metric=0x%x]\n" % (self.get_route_parent_metric())
        except:
            pass
        try:
            s += "  [route.parent_etx=0x%x]\n" % (self.get_route_parent_etx())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: averagePower
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'averagePower' is signed (False).
    #
    def isSigned_averagePower(self):
        return False
    
    #
    # Return whether the field 'averagePower' is an array (False).
    #
    def isArray_averagePower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'averagePower'
    #
    def offset_averagePower(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'averagePower'
    #
    def offsetBits_averagePower(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'averagePower'
    #
    def get_averagePower(self):
        return self.getUIntElement(self.offsetBits_averagePower(), 32, 1)
    
    #
    # Set the value of the field 'averagePower'
    #
    def set_averagePower(self, value):
        self.setUIntElement(self.offsetBits_averagePower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'averagePower'
    #
    def size_averagePower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'averagePower'
    #
    def sizeBits_averagePower(self):
        return 32
    
    #
    # Accessor methods for field: maxPower
    #   Field type: long
    #   Offset (bits): 32
    #   Size (bits): 32
    #

    #
    # Return whether the field 'maxPower' is signed (False).
    #
    def isSigned_maxPower(self):
        return False
    
    #
    # Return whether the field 'maxPower' is an array (False).
    #
    def isArray_maxPower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'maxPower'
    #
    def offset_maxPower(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'maxPower'
    #
    def offsetBits_maxPower(self):
        return 32
    
    #
    # Return the value (as a long) of the field 'maxPower'
    #
    def get_maxPower(self):
        return self.getUIntElement(self.offsetBits_maxPower(), 32, 1)
    
    #
    # Set the value of the field 'maxPower'
    #
    def set_maxPower(self, value):
        self.setUIntElement(self.offsetBits_maxPower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'maxPower'
    #
    def size_maxPower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'maxPower'
    #
    def sizeBits_maxPower(self):
        return 32
    
    #
    # Accessor methods for field: minPower
    #   Field type: long
    #   Offset (bits): 64
    #   Size (bits): 32
    #

    #
    # Return whether the field 'minPower' is signed (False).
    #
    def isSigned_minPower(self):
        return False
    
    #
    # Return whether the field 'minPower' is an array (False).
    #
    def isArray_minPower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'minPower'
    #
    def offset_minPower(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'minPower'
    #
    def offsetBits_minPower(self):
        return 64
    
    #
    # Return the value (as a long) of the field 'minPower'
    #
    def get_minPower(self):
        return self.getUIntElement(self.offsetBits_minPower(), 32, 1)
    
    #
    # Set the value of the field 'minPower'
    #
    def set_minPower(self, value):
        self.setUIntElement(self.offsetBits_minPower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'minPower'
    #
    def size_minPower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'minPower'
    #
    def sizeBits_minPower(self):
        return 32
    
    #
    # Accessor methods for field: cumulativeEnergy
    #   Field type: long
    #   Offset (bits): 96
    #   Size (bits): 64
    #

    #
    # Return whether the field 'cumulativeEnergy' is signed (False).
    #
    def isSigned_cumulativeEnergy(self):
        return False
    
    #
    # Return whether the field 'cumulativeEnergy' is an array (False).
    #
    def isArray_cumulativeEnergy(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'cumulativeEnergy'
    #
    def offset_cumulativeEnergy(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'cumulativeEnergy'
    #
    def offsetBits_cumulativeEnergy(self):
        return 96
    
    #
    # Return the value (as a long) of the field 'cumulativeEnergy'
    #
    def get_cumulativeEnergy(self):
        return self.getUIntElement(self.offsetBits_cumulativeEnergy(), 64, 1)
    
    #
    # Set the value of the field 'cumulativeEnergy'
    #
    def set_cumulativeEnergy(self, value):
        self.setUIntElement(self.offsetBits_cumulativeEnergy(), 64, value, 1)
    
    #
    # Return the size, in bytes, of the field 'cumulativeEnergy'
    #
    def size_cumulativeEnergy(self):
        return (64 / 8)
    
    #
    # Return the size, in bits, of the field 'cumulativeEnergy'
    #
    def sizeBits_cumulativeEnergy(self):
        return 64
    
    #
    # Accessor methods for field: apparentPower
    #   Field type: long
    #   Offset (bits): 160
    #   Size (bits): 32
    #

    #
    # Return whether the field 'apparentPower' is signed (False).
    #
    def isSigned_apparentPower(self):
        return False
    
    #
    # Return whether the field 'apparentPower' is an array (False).
    #
    def isArray_apparentPower(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'apparentPower'
    #
    def offset_apparentPower(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'apparentPower'
    #
    def offsetBits_apparentPower(self):
        return 160
    
    #
    # Return the value (as a long) of the field 'apparentPower'
    #
    def get_apparentPower(self):
        return self.getUIntElement(self.offsetBits_apparentPower(), 32, 1)
    
    #
    # Set the value of the field 'apparentPower'
    #
    def set_apparentPower(self, value):
        self.setUIntElement(self.offsetBits_apparentPower(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'apparentPower'
    #
    def size_apparentPower(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'apparentPower'
    #
    def sizeBits_apparentPower(self):
        return 32
    
    #
    # Accessor methods for field: seq
    #   Field type: long
    #   Offset (bits): 192
    #   Size (bits): 32
    #

    #
    # Return whether the field 'seq' is signed (False).
    #
    def isSigned_seq(self):
        return False
    
    #
    # Return whether the field 'seq' is an array (False).
    #
    def isArray_seq(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seq'
    #
    def offset_seq(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'seq'
    #
    def offsetBits_seq(self):
        return 192
    
    #
    # Return the value (as a long) of the field 'seq'
    #
    def get_seq(self):
        return self.getUIntElement(self.offsetBits_seq(), 32, 1)
    
    #
    # Set the value of the field 'seq'
    #
    def set_seq(self, value):
        self.setUIntElement(self.offsetBits_seq(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seq'
    #
    def size_seq(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'seq'
    #
    def sizeBits_seq(self):
        return 32
    
    #
    # Accessor methods for field: eui64
    #   Field type: short[]
    #   Offset (bits): 224
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'eui64' is signed (False).
    #
    def isSigned_eui64(self):
        return False
    
    #
    # Return whether the field 'eui64' is an array (True).
    #
    def isArray_eui64(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'eui64'
    #
    def offset_eui64(self, index1):
        offset = 224
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'eui64'
    #
    def offsetBits_eui64(self, index1):
        offset = 224
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'eui64' as a short[]
    #
    def get_eui64(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_eui64(0)):
                tmp[index0] = self.getElement_eui64(index0)
        return tmp
    
    #
    # Set the contents of the array 'eui64' from the given short[]
    #
    def set_eui64(self, value):
        for index0 in range(0, len(value)):
            self.setElement_eui64(index0, value[index0])

    #
    # Return an element (as a short) of the array 'eui64'
    #
    def getElement_eui64(self, index1):
        return self.getUIntElement(self.offsetBits_eui64(index1), 8, 1)
    
    #
    # Set an element of the array 'eui64'
    #
    def setElement_eui64(self, index1, value):
        self.setUIntElement(self.offsetBits_eui64(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'eui64'
    #
    def totalSize_eui64(self):
        return (64 / 8)
    
    #
    # Return the total size, in bits, of the array 'eui64'
    #
    def totalSizeBits_eui64(self):
        return 64
    
    #
    # Return the size, in bytes, of each element of the array 'eui64'
    #
    def elementSize_eui64(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'eui64'
    #
    def elementSizeBits_eui64(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'eui64'
    #
    def numDimensions_eui64(self):
        return 1
    
    #
    # Return the number of elements in the array 'eui64'
    #
    def numElements_eui64():
        return 8
    
    #
    # Return the number of elements in the array 'eui64'
    # for the given dimension.
    #
    def numElements_eui64(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'eui64' with a String
    #
    def setString_eui64(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_eui64(i, ord(s[i]));
         self.setElement_eui64(l, 0) #null terminate
    
    #
    # Read the array 'eui64' as a String
    #
    def getString_eui64(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_eui64(i) == chr(0):
                break
            carr += self.getElement_eui64(i)
        return carr
    
    #
    # Accessor methods for field: route.hop_limit
    #   Field type: short
    #   Offset (bits): 288
    #   Size (bits): 8
    #

    #
    # Return whether the field 'route.hop_limit' is signed (False).
    #
    def isSigned_route_hop_limit(self):
        return False
    
    #
    # Return whether the field 'route.hop_limit' is an array (False).
    #
    def isArray_route_hop_limit(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.hop_limit'
    #
    def offset_route_hop_limit(self):
        return (288 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.hop_limit'
    #
    def offsetBits_route_hop_limit(self):
        return 288
    
    #
    # Return the value (as a short) of the field 'route.hop_limit'
    #
    def get_route_hop_limit(self):
        return self.getUIntElement(self.offsetBits_route_hop_limit(), 8, 1)
    
    #
    # Set the value of the field 'route.hop_limit'
    #
    def set_route_hop_limit(self, value):
        self.setUIntElement(self.offsetBits_route_hop_limit(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.hop_limit'
    #
    def size_route_hop_limit(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'route.hop_limit'
    #
    def sizeBits_route_hop_limit(self):
        return 8
    
    #
    # Accessor methods for field: route.parent
    #   Field type: int
    #   Offset (bits): 296
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent' is signed (False).
    #
    def isSigned_route_parent(self):
        return False
    
    #
    # Return whether the field 'route.parent' is an array (False).
    #
    def isArray_route_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent'
    #
    def offset_route_parent(self):
        return (296 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent'
    #
    def offsetBits_route_parent(self):
        return 296
    
    #
    # Return the value (as a int) of the field 'route.parent'
    #
    def get_route_parent(self):
        return self.getUIntElement(self.offsetBits_route_parent(), 16, 1)
    
    #
    # Set the value of the field 'route.parent'
    #
    def set_route_parent(self, value):
        self.setUIntElement(self.offsetBits_route_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent'
    #
    def size_route_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent'
    #
    def sizeBits_route_parent(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_metric
    #   Field type: int
    #   Offset (bits): 312
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_metric' is signed (False).
    #
    def isSigned_route_parent_metric(self):
        return False
    
    #
    # Return whether the field 'route.parent_metric' is an array (False).
    #
    def isArray_route_parent_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_metric'
    #
    def offset_route_parent_metric(self):
        return (312 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_metric'
    #
    def offsetBits_route_parent_metric(self):
        return 312
    
    #
    # Return the value (as a int) of the field 'route.parent_metric'
    #
    def get_route_parent_metric(self):
        return self.getUIntElement(self.offsetBits_route_parent_metric(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_metric'
    #
    def set_route_parent_metric(self, value):
        self.setUIntElement(self.offsetBits_route_parent_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_metric'
    #
    def size_route_parent_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_metric'
    #
    def sizeBits_route_parent_metric(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_etx
    #   Field type: int
    #   Offset (bits): 328
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_etx' is signed (False).
    #
    def isSigned_route_parent_etx(self):
        return False
    
    #
    # Return whether the field 'route.parent_etx' is an array (False).
    #
    def isArray_route_parent_etx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_etx'
    #
    def offset_route_parent_etx(self):
        return (328 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_etx'
    #
    def offsetBits_route_parent_etx(self):
        return 328
    
    #
    # Return the value (as a int) of the field 'route.parent_etx'
    #
    def get_route_parent_etx(self):
        return self.getUIntElement(self.offsetBits_route_parent_etx(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_etx'
    #
    def set_route_parent_etx(self, value):
        self.setUIntElement(self.offsetBits_route_parent_etx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_etx'
    #
    def size_route_parent_etx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_etx'
    #
    def sizeBits_route_parent_etx(self):
        return 16
    
