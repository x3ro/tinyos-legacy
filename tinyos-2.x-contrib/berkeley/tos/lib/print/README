README for print

Author/Contact:

  Prabal Dutta <prabal@cs.berkeley.edu>

Description:

  A simple printf-like utility that writes to the raw serial port
  using the standard TinyOS 2.0 UART libraries, so it should be 
  portable to any T2-compliant platform.

  Inspired by SODebug, Jay Taneja's nprintf library, and Kevin Klues'
  printf library, but simpler and/or more portable.

  Usage:

  1. Include PrintC in the components clause of the configuration file
     (no need to wire it to anything):

       configuration MyAppC {
       }
       implementation {
         ...
         components PrintC;
         ...
       }

  2. Add the following include directive to the module code:

       #include "print.h"

  3. Call print like you would normally call printf in code:

       print("c=%c, d=%d, s=%s, x=%x, %%=%%\r\n", 'c', 5, "str", 10);

     The current implementation supports print spooling for only a 
     single call (the call returns before the data is transmitted).
     If two successive writes occur too quickly in a row, then the 
     second will fail.  Since the print call returns SUCCESS if the
     call was spooled, EBUSY if the spool is full, and FAIL if there
     is an error, a caller can use the return code to determine
     whether to retry the call.  This is particularly necessary if 
     print is being called in a tight loop.  In such cases, consider 
     using code that looks like:

       error_t e;
       do {
         e = print("x=%d\n", x);
       } while e == EBUSY;

     NOTE that sending even a few characters over the UART can take 
     hundreds of microseconds, during which time the above code will
     spin.  While spinning may be appropriate for a few microseconds,
     it can cause serious problems over longer timescales when used
     with the non-preemptive, run-to-completion semantics of TinyOS.
     WARNING: use print in loops with great care.

  4. Add the following line to the program's Makefile to tell the 
     compiler where it can find the print library:

       CFLAGS += -I<path to print library>

     For example:

       CFLAGS += -I/opt/tinyos-2.x-contrib/berkeley/tos/lib/print

  5. Program the mote (e.g. Telos).  For example:

       make telosb install

  6. Open a terminal program (e.g. Hyperterm) with the appropriate
     settings (e.g. 115200-N-8-1 with no flow control for Telos B) to
     see output.  Alternately, if you're using Linux and your mote is
     connected to a tty, say ttyUSB0, you might try typing the
     following two lines at the prompt:

       stty -F /dev/ttyUSB0 cread clocal 115200 raw
       cat /dev/ttyUSB0

Tools:

  None

Known bugs/limitations:

  None
