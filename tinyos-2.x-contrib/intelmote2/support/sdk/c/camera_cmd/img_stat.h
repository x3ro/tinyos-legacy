/**
 * This file is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This file defines the layout of the 'img_stat' message type.
 */

#ifndef IMG_STAT_H
#define IMG_STAT_H
#include <message.h>

enum {
  /** The default size of this message type in bytes. */
  IMG_STAT_SIZE = 19,

  /** The Active Message type associated with this message. */
  IMG_STAT_AM_TYPE = 5,

  /* Field node_id: type uint16_t, offset (bits) 0, size (bits) 16 */
  /** Offset (in bytes) of the field 'node_id' */
  IMG_STAT_NODE_ID_OFFSET = 0,
  /** Offset (in bits) of the field 'node_id' */
  IMG_STAT_NODE_ID_OFFSETBITS = 0,
  /** Size (in bytes) of the field 'node_id' */
  IMG_STAT_NODE_ID_SIZE = 2,
  /** Size (in bits) of the field 'node_id' */
  IMG_STAT_NODE_ID_SIZEBITS = 16,

  /* Field type: type uint8_t, offset (bits) 16, size (bits) 8 */
  /** Offset (in bytes) of the field 'type' */
  IMG_STAT_TYPE_OFFSET = 2,
  /** Offset (in bits) of the field 'type' */
  IMG_STAT_TYPE_OFFSETBITS = 16,
  /** Size (in bytes) of the field 'type' */
  IMG_STAT_TYPE_SIZE = 1,
  /** Size (in bits) of the field 'type' */
  IMG_STAT_TYPE_SIZEBITS = 8,

  /* Field width: type uint16_t, offset (bits) 24, size (bits) 16 */
  /** Offset (in bytes) of the field 'width' */
  IMG_STAT_WIDTH_OFFSET = 3,
  /** Offset (in bits) of the field 'width' */
  IMG_STAT_WIDTH_OFFSETBITS = 24,
  /** Size (in bytes) of the field 'width' */
  IMG_STAT_WIDTH_SIZE = 2,
  /** Size (in bits) of the field 'width' */
  IMG_STAT_WIDTH_SIZEBITS = 16,

  /* Field height: type uint16_t, offset (bits) 40, size (bits) 16 */
  /** Offset (in bytes) of the field 'height' */
  IMG_STAT_HEIGHT_OFFSET = 5,
  /** Offset (in bits) of the field 'height' */
  IMG_STAT_HEIGHT_OFFSETBITS = 40,
  /** Size (in bytes) of the field 'height' */
  IMG_STAT_HEIGHT_SIZE = 2,
  /** Size (in bits) of the field 'height' */
  IMG_STAT_HEIGHT_SIZEBITS = 16,

  /* Field data_size: type uint32_t, offset (bits) 56, size (bits) 32 */
  /** Offset (in bytes) of the field 'data_size' */
  IMG_STAT_DATA_SIZE_OFFSET = 7,
  /** Offset (in bits) of the field 'data_size' */
  IMG_STAT_DATA_SIZE_OFFSETBITS = 56,
  /** Size (in bytes) of the field 'data_size' */
  IMG_STAT_DATA_SIZE_SIZE = 4,
  /** Size (in bits) of the field 'data_size' */
  IMG_STAT_DATA_SIZE_SIZEBITS = 32,

  /* Field timeAcq: type uint32_t, offset (bits) 88, size (bits) 32 */
  /** Offset (in bytes) of the field 'timeAcq' */
  IMG_STAT_TIMEACQ_OFFSET = 11,
  /** Offset (in bits) of the field 'timeAcq' */
  IMG_STAT_TIMEACQ_OFFSETBITS = 88,
  /** Size (in bytes) of the field 'timeAcq' */
  IMG_STAT_TIMEACQ_SIZE = 4,
  /** Size (in bits) of the field 'timeAcq' */
  IMG_STAT_TIMEACQ_SIZEBITS = 32,

  /* Field timeProc: type uint32_t, offset (bits) 120, size (bits) 32 */
  /** Offset (in bytes) of the field 'timeProc' */
  IMG_STAT_TIMEPROC_OFFSET = 15,
  /** Offset (in bits) of the field 'timeProc' */
  IMG_STAT_TIMEPROC_OFFSETBITS = 120,
  /** Size (in bytes) of the field 'timeProc' */
  IMG_STAT_TIMEPROC_SIZE = 4,
  /** Size (in bits) of the field 'timeProc' */
  IMG_STAT_TIMEPROC_SIZEBITS = 32,
};

/**
 * Return the value of the field 'node_id'
 */
uint16_t img_stat_node_id_get(tmsg_t *msg);

/**
 * Set the value of the field 'node_id'
 */
void img_stat_node_id_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'type'
 */
uint8_t img_stat_type_get(tmsg_t *msg);

/**
 * Set the value of the field 'type'
 */
void img_stat_type_set(tmsg_t *msg, uint8_t value);

/**
 * Return the value of the field 'width'
 */
uint16_t img_stat_width_get(tmsg_t *msg);

/**
 * Set the value of the field 'width'
 */
void img_stat_width_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'height'
 */
uint16_t img_stat_height_get(tmsg_t *msg);

/**
 * Set the value of the field 'height'
 */
void img_stat_height_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'data_size'
 */
uint32_t img_stat_data_size_get(tmsg_t *msg);

/**
 * Set the value of the field 'data_size'
 */
void img_stat_data_size_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'timeAcq'
 */
uint32_t img_stat_timeAcq_get(tmsg_t *msg);

/**
 * Set the value of the field 'timeAcq'
 */
void img_stat_timeAcq_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'timeProc'
 */
uint32_t img_stat_timeProc_get(tmsg_t *msg);

/**
 * Set the value of the field 'timeProc'
 */
void img_stat_timeProc_set(tmsg_t *msg, uint32_t value);

#endif
