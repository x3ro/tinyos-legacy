-------------------------------------------------------------------------------
Author/Contact:
---------------
 Brano Kusy: branislav.kusy@gmail.com
 Miklos Maroti: mmaroti@gmail.com

-------------------------------------------------------------------------------
DESCRIPTION:
------------
 TestTimeSyncC component verifies the precision of FTSP (TOSDIR/lib/
 ftsp). TestTimeSyncPollerC is a beacon (reference broadcaster). Each client
 (TestTimeSyncC app) responds to the beacon's radio msgs by sending data to base
 station (BaseStation).

-------------------------------------------------------------------------------
TUNABLE PARAMETERS:
-------------------
 TIMESYNC_RATE (seconds) - how often will each node transmit the time sync msg
 TIMESYNC_DEBUG - if defined, the multi-hop network is enforced by software,
                  requires special TOS_NODE_IDs
 TIMESYNC_POLLER_RATE - how often will the poller send the beacon message

-------------------------------------------------------------------------------
STEP BY STEP GUIDE TO RUN OUR TEST:
--------------------------------------------
 We propose the following test setup:

 - base station is connected to PC. On the PC side you should run FTSPDataLogger
   java application that parses FTSP report messages (see data/readme),
 - one dedicated beacon (TestTimeSyncPollerC) broadcasts TimeSyncPoll msgs
 - several clients (TestTimeSyncC) that wire 1) TimeSyncC component providing
   timesync, and 2) TimeSyncDebuggerC compoenent reporting performance data back
   to the base station.
 - all clients should be within radio range of both base station and poller

Addressing scheme for multihop:

 - upload motes with 'make micaz install.addr'
 - addr should be unique; if using TIMESYNC_DEBUG option, the network
   connectivity is setup as a 2D grid, where addr=0xXY defines the node's
   location in the grid.
 - for example, FTSP's Sensys'04 evaluation uses the following setup:
     63 motes with addresses: 0x5ij; i,j={0,1,...,7}; i!=4 && j!=4,
      1 mote with address 0x444 (instead of 0x544);
   this creates an 8x8 grid with the max hop distance 7 - the first root will
   be elected in the middle (because 0x444 < ix5ij)

-------------------------------------------------------------------------------
REPORTED DATA: TimeSyncPollReply
--------------------------------
 The most important reported data is the global time of arrival of the beacons.
 The beacon msg arrives to all clients at the same time instant, thus reported
 global times should be the same for all clients, if FTSP works properly.

 Each message contains:
 - the node ID of the mote that is sending this report (uint16_t)
 - the  sequence number of the polling message that is increased by the poller
   for each new polling msg (uint16_t)
 - the global time when the polling message arrived (uint32_t)
 - the local time when the  polling message arrived (uint32_t)
 - the skew (the speed ratio between the clocks of the root of the network  and
   the receiving node). Note, this value is normalized to 0, so 0 means  that
   the two clocks run with the same speed. (float)
 - the boolean value saying whether the node is synchronized or not. If a node
   is not synchronized, the global time is not valid (uint8_t)
 - the id of the root of the time sync multi-hop algorithm. (uint16_t)
 - the sequence number of the last time synchronizataion msg received from the
   current root (uint8_t)
 - the number of entries currently stored in the linear regression table
   (uint8_t)
