/*
 * WMTP - Wireless Modular Transport Protocol
 *
 * Copyright (c) 2008 Luis D. Pedrosa and IT - Instituto de Telecomunicacoes
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Address:
 * Instituto Superior Tecnico - Taguspark Campus
 * Av. Prof. Dr. Cavaco Silva, 2744-016 Porto Salvo
 *
 * E-Mail:
 * luis.pedrosa@tagus.ist.utl.pt
 */

/**
 * Basic interface provided to monitor the WMTP core.
 *
 * This interface allows WMTP plugins to monitor the core.
 *
 * @author Luis D. Pedrosa <luis.pedrosa@tagus.ist.utl.pt>
 * @author Hugo Freire <hugo.freire@ist.utl.pt> (port to TinyOS 2.x)
**/

#include "Wmtp.h"

interface WmtpCoreMonitor {

    /**
     * Notifies that a new service was registered.
     *
     * @param ServiceSpecification The newly registered service specification.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ServiceRegistered( WmtpServiceSpecification_t *ServiceSpecification );

    /**
     * Notifies that a service was canceled.
     *
     * @param ServiceSpecification The canceled service specification.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ServiceCanceled( WmtpServiceSpecification_t *ServiceSpecification );

    /**
     * Notifies that a connection was opened, local or otherwise.
     *
     * @param ConnectionSpecification The connection specification that
     *                                identifies the newly opened connection.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ConnectionOpened( WmtpConnectionSpecification_t *ConnectionSpecification );

    /**
     * Notifies that a connection was closed, local or otherwise.
     *
     * @param ConnectionSpecification The connection specification that
     *                                identifies the closed connection.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ConnectionClosed( WmtpConnectionSpecification_t *ConnectionSpecification );

    /**
     * Gets the maximum size of the core queue.
     *
     * @return The maximum size of the core queue.
    **/
    command uint8_t GetCoreQueueMaxSize();

    /**
     * Gets the number of queue elements currently available.
     *
     * @return The number of queue elements currently available.
    **/
    command uint8_t GetCoreQueueAvailability();

    /**
     * Notifies that a packet was generated by an application.
     *
     * @param Packet The packet's queue element.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t GeneratedPacket( WmtpQueueElement_t *Packet );

    /**
     * Notifies that a packet was received.
     *
     * @param Packet The packet's queue element.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ReceivedPacket( WmtpQueueElement_t *Packet );

    /**
     * Notifies that a packet is being delivered to an application.
     *
     * @param Packet The packet's queue element.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t DeliveringPacket( WmtpQueueElement_t *Packet );

    /**
     * Notifies that a packet is being sent.
     *
     * @param Packet The packet's queue element.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t SendingPacket( WmtpQueueElement_t *Packet );

    /**
     * Notifies that a packet is being removed from the core queue.
     *
     * @param Packet The packet's queue element.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t DroppingPacket( WmtpQueueElement_t *Packet );

    /**
     * Notifies that a WMTP Message received.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t ReceivedWmtpMsg();

    /**
     * Notifies that a WMTP Message is being sent.
     *
     * @param Packet The queue element containing the connection local part of
     *               the WmtpMsg, NULL if the WmtpMsg doesn't have a connection
     *               local part.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t SendingWmtpMsg();

    /**
     * Notifies that a WMTP Message was sent.
     *
     * @return An error code indicating the status of the operation.
    **/
    event error_t SentWmtpMsg();
}
