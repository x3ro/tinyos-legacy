/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReferenceMsg'
 * message type.
 */

public class ReferenceMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 180;

    /** Create a new ReferenceMsg of size 10. */
    public ReferenceMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReferenceMsg of the given data_length. */
    public ReferenceMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg with the given data_length
     * and base offset.
     */
    public ReferenceMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg using the given byte array
     * as backing store.
     */
    public ReferenceMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public ReferenceMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReferenceMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg embedded in the given message
     * at the given base offset.
     */
    public ReferenceMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReferenceMsg embedded in the given message
     * at the given base offset and length.
     */
    public ReferenceMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReferenceMsg> \n";
      try {
        s += "  [srcAddr=0x"+Long.toHexString(get_srcAddr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [refTimestamp=0x"+Long.toHexString(get_refTimestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [refId=0x"+Long.toHexString(get_refId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: srcAddr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'srcAddr' is signed (false).
     */
    public static boolean isSigned_srcAddr() {
        return false;
    }

    /**
     * Return whether the field 'srcAddr' is an array (false).
     */
    public static boolean isArray_srcAddr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'srcAddr'
     */
    public static int offset_srcAddr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'srcAddr'
     */
    public static int offsetBits_srcAddr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'srcAddr'
     */
    public int get_srcAddr() {
        return (int)getUIntBEElement(offsetBits_srcAddr(), 16);
    }

    /**
     * Set the value of the field 'srcAddr'
     */
    public void set_srcAddr(int value) {
        setUIntBEElement(offsetBits_srcAddr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'srcAddr'
     */
    public static int size_srcAddr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'srcAddr'
     */
    public static int sizeBits_srcAddr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: refTimestamp
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'refTimestamp' is signed (false).
     */
    public static boolean isSigned_refTimestamp() {
        return false;
    }

    /**
     * Return whether the field 'refTimestamp' is an array (false).
     */
    public static boolean isArray_refTimestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'refTimestamp'
     */
    public static int offset_refTimestamp() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'refTimestamp'
     */
    public static int offsetBits_refTimestamp() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'refTimestamp'
     */
    public long get_refTimestamp() {
        return (long)getUIntBEElement(offsetBits_refTimestamp(), 32);
    }

    /**
     * Set the value of the field 'refTimestamp'
     */
    public void set_refTimestamp(long value) {
        setUIntBEElement(offsetBits_refTimestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'refTimestamp'
     */
    public static int size_refTimestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'refTimestamp'
     */
    public static int sizeBits_refTimestamp() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: refId
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'refId' is signed (false).
     */
    public static boolean isSigned_refId() {
        return false;
    }

    /**
     * Return whether the field 'refId' is an array (false).
     */
    public static boolean isArray_refId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'refId'
     */
    public static int offset_refId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'refId'
     */
    public static int offsetBits_refId() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'refId'
     */
    public long get_refId() {
        return (long)getUIntBEElement(offsetBits_refId(), 32);
    }

    /**
     * Set the value of the field 'refId'
     */
    public void set_refId(long value) {
        setUIntBEElement(offsetBits_refId(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'refId'
     */
    public static int size_refId() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'refId'
     */
    public static int sizeBits_refId() {
        return 32;
    }

}
