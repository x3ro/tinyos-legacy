/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'java'
 * message type.
 */

package message;

public class PktTestMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 114;

    /** Create a new java of size 20. */
    public PktTestMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new java of the given data_length. */
    public PktTestMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java with the given data_length
     * and base offset.
     */
    public PktTestMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store.
     */
    public PktTestMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset.
     */
    public PktTestMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PktTestMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset.
     */
    public PktTestMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset and length.
     */
    public PktTestMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <java> \n";
      try {
        s += "  [rcv_inter_pkts=0x"+Long.toHexString(get_rcv_inter_pkts())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rcv_bs_pkts=0x"+Long.toHexString(get_rcv_bs_pkts())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rtx_camera_count=0x"+Long.toHexString(get_rtx_camera_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rtx_inter_count=0x"+Long.toHexString(get_rtx_inter_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [frame_num=0x"+Long.toHexString(get_frame_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rcv_inter_pkts
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rcv_inter_pkts' is signed (false).
     */
    public static boolean isSigned_rcv_inter_pkts() {
        return false;
    }

    /**
     * Return whether the field 'rcv_inter_pkts' is an array (false).
     */
    public static boolean isArray_rcv_inter_pkts() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rcv_inter_pkts'
     */
    public static int offset_rcv_inter_pkts() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rcv_inter_pkts'
     */
    public static int offsetBits_rcv_inter_pkts() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'rcv_inter_pkts'
     */
    public long get_rcv_inter_pkts() {
        return (long)getUIntBEElement(offsetBits_rcv_inter_pkts(), 32);
    }

    /**
     * Set the value of the field 'rcv_inter_pkts'
     */
    public void set_rcv_inter_pkts(long value) {
        setUIntBEElement(offsetBits_rcv_inter_pkts(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rcv_inter_pkts'
     */
    public static int size_rcv_inter_pkts() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rcv_inter_pkts'
     */
    public static int sizeBits_rcv_inter_pkts() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rcv_bs_pkts
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rcv_bs_pkts' is signed (false).
     */
    public static boolean isSigned_rcv_bs_pkts() {
        return false;
    }

    /**
     * Return whether the field 'rcv_bs_pkts' is an array (false).
     */
    public static boolean isArray_rcv_bs_pkts() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rcv_bs_pkts'
     */
    public static int offset_rcv_bs_pkts() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rcv_bs_pkts'
     */
    public static int offsetBits_rcv_bs_pkts() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'rcv_bs_pkts'
     */
    public long get_rcv_bs_pkts() {
        return (long)getUIntBEElement(offsetBits_rcv_bs_pkts(), 32);
    }

    /**
     * Set the value of the field 'rcv_bs_pkts'
     */
    public void set_rcv_bs_pkts(long value) {
        setUIntBEElement(offsetBits_rcv_bs_pkts(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rcv_bs_pkts'
     */
    public static int size_rcv_bs_pkts() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rcv_bs_pkts'
     */
    public static int sizeBits_rcv_bs_pkts() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rtx_camera_count
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rtx_camera_count' is signed (false).
     */
    public static boolean isSigned_rtx_camera_count() {
        return false;
    }

    /**
     * Return whether the field 'rtx_camera_count' is an array (false).
     */
    public static boolean isArray_rtx_camera_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rtx_camera_count'
     */
    public static int offset_rtx_camera_count() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rtx_camera_count'
     */
    public static int offsetBits_rtx_camera_count() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'rtx_camera_count'
     */
    public long get_rtx_camera_count() {
        return (long)getUIntBEElement(offsetBits_rtx_camera_count(), 32);
    }

    /**
     * Set the value of the field 'rtx_camera_count'
     */
    public void set_rtx_camera_count(long value) {
        setUIntBEElement(offsetBits_rtx_camera_count(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rtx_camera_count'
     */
    public static int size_rtx_camera_count() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rtx_camera_count'
     */
    public static int sizeBits_rtx_camera_count() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rtx_inter_count
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rtx_inter_count' is signed (false).
     */
    public static boolean isSigned_rtx_inter_count() {
        return false;
    }

    /**
     * Return whether the field 'rtx_inter_count' is an array (false).
     */
    public static boolean isArray_rtx_inter_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rtx_inter_count'
     */
    public static int offset_rtx_inter_count() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rtx_inter_count'
     */
    public static int offsetBits_rtx_inter_count() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'rtx_inter_count'
     */
    public long get_rtx_inter_count() {
        return (long)getUIntBEElement(offsetBits_rtx_inter_count(), 32);
    }

    /**
     * Set the value of the field 'rtx_inter_count'
     */
    public void set_rtx_inter_count(long value) {
        setUIntBEElement(offsetBits_rtx_inter_count(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rtx_inter_count'
     */
    public static int size_rtx_inter_count() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rtx_inter_count'
     */
    public static int sizeBits_rtx_inter_count() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: frame_num
    //   Field type: long, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'frame_num' is signed (false).
     */
    public static boolean isSigned_frame_num() {
        return false;
    }

    /**
     * Return whether the field 'frame_num' is an array (false).
     */
    public static boolean isArray_frame_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'frame_num'
     */
    public static int offset_frame_num() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'frame_num'
     */
    public static int offsetBits_frame_num() {
        return 128;
    }

    /**
     * Return the value (as a long) of the field 'frame_num'
     */
    public long get_frame_num() {
        return (long)getUIntBEElement(offsetBits_frame_num(), 32);
    }

    /**
     * Set the value of the field 'frame_num'
     */
    public void set_frame_num(long value) {
        setUIntBEElement(offsetBits_frame_num(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'frame_num'
     */
    public static int size_frame_num() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'frame_num'
     */
    public static int sizeBits_frame_num() {
        return 32;
    }

}
