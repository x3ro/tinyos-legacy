/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'java'
 * message type.
 */

package message;

public class QueueTestMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 115;

    /** Create a new java of size 6. */
    public QueueTestMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new java of the given data_length. */
    public QueueTestMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java with the given data_length
     * and base offset.
     */
    public QueueTestMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store.
     */
    public QueueTestMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset.
     */
    public QueueTestMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public QueueTestMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset.
     */
    public QueueTestMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset and length.
     */
    public QueueTestMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <java> \n";
      try {
        s += "  [tx_pause=0x"+Long.toHexString(get_tx_pause())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [queue_size=0x"+Long.toHexString(get_queue_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [queue_delta=0x"+Long.toHexString(get_queue_delta())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tx_pause
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tx_pause' is signed (false).
     */
    public static boolean isSigned_tx_pause() {
        return false;
    }

    /**
     * Return whether the field 'tx_pause' is an array (false).
     */
    public static boolean isArray_tx_pause() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tx_pause'
     */
    public static int offset_tx_pause() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tx_pause'
     */
    public static int offsetBits_tx_pause() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'tx_pause'
     */
    public int get_tx_pause() {
        return (int)getUIntBEElement(offsetBits_tx_pause(), 16);
    }

    /**
     * Set the value of the field 'tx_pause'
     */
    public void set_tx_pause(int value) {
        setUIntBEElement(offsetBits_tx_pause(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'tx_pause'
     */
    public static int size_tx_pause() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tx_pause'
     */
    public static int sizeBits_tx_pause() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: queue_size
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'queue_size' is signed (false).
     */
    public static boolean isSigned_queue_size() {
        return false;
    }

    /**
     * Return whether the field 'queue_size' is an array (false).
     */
    public static boolean isArray_queue_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'queue_size'
     */
    public static int offset_queue_size() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'queue_size'
     */
    public static int offsetBits_queue_size() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'queue_size'
     */
    public int get_queue_size() {
        return (int)getUIntBEElement(offsetBits_queue_size(), 16);
    }

    /**
     * Set the value of the field 'queue_size'
     */
    public void set_queue_size(int value) {
        setUIntBEElement(offsetBits_queue_size(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'queue_size'
     */
    public static int size_queue_size() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'queue_size'
     */
    public static int sizeBits_queue_size() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: queue_delta
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'queue_delta' is signed (false).
     */
    public static boolean isSigned_queue_delta() {
        return false;
    }

    /**
     * Return whether the field 'queue_delta' is an array (false).
     */
    public static boolean isArray_queue_delta() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'queue_delta'
     */
    public static int offset_queue_delta() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'queue_delta'
     */
    public static int offsetBits_queue_delta() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'queue_delta'
     */
    public int get_queue_delta() {
        return (int)getUIntBEElement(offsetBits_queue_delta(), 16);
    }

    /**
     * Set the value of the field 'queue_delta'
     */
    public void set_queue_delta(int value) {
        setUIntBEElement(offsetBits_queue_delta(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'queue_delta'
     */
    public static int size_queue_delta() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'queue_delta'
     */
    public static int sizeBits_queue_delta() {
        return 16;
    }

}
