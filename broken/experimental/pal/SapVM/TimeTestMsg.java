/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TimeTestMsg'
 * message type.
 */

public class TimeTestMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 21;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 153;

    /** Create a new TimeTestMsg of size 21. */
    public TimeTestMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TimeTestMsg of the given data_length. */
    public TimeTestMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg with the given data_length
     * and base offset.
     */
    public TimeTestMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg using the given byte array
     * as backing store.
     */
    public TimeTestMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TimeTestMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TimeTestMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg embedded in the given message
     * at the given base offset.
     */
    public TimeTestMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeTestMsg embedded in the given message
     * at the given base offset and length.
     */
    public TimeTestMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TimeTestMsg> \n";
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ms=0x"+Long.toHexString(get_ms())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ticks=0x"+Long.toHexString(get_ticks())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [remaining=0x"+Long.toHexString(get_remaining())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [offset=0x"+Long.toHexString(get_offset())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [synchronized=0x"+Long.toHexString(get_synchronized())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'count'
     */
    public long get_count() {
        return (long)getUIntElement(offsetBits_count(), 32);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(long value) {
        setUIntElement(offsetBits_count(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ms
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ms' is signed (false).
     */
    public static boolean isSigned_ms() {
        return false;
    }

    /**
     * Return whether the field 'ms' is an array (false).
     */
    public static boolean isArray_ms() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ms'
     */
    public static int offset_ms() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ms'
     */
    public static int offsetBits_ms() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'ms'
     */
    public long get_ms() {
        return (long)getUIntElement(offsetBits_ms(), 32);
    }

    /**
     * Set the value of the field 'ms'
     */
    public void set_ms(long value) {
        setUIntElement(offsetBits_ms(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ms'
     */
    public static int size_ms() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ms'
     */
    public static int sizeBits_ms() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ticks
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ticks' is signed (false).
     */
    public static boolean isSigned_ticks() {
        return false;
    }

    /**
     * Return whether the field 'ticks' is an array (false).
     */
    public static boolean isArray_ticks() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ticks'
     */
    public static int offset_ticks() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ticks'
     */
    public static int offsetBits_ticks() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'ticks'
     */
    public long get_ticks() {
        return (long)getUIntElement(offsetBits_ticks(), 32);
    }

    /**
     * Set the value of the field 'ticks'
     */
    public void set_ticks(long value) {
        setUIntElement(offsetBits_ticks(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ticks'
     */
    public static int size_ticks() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ticks'
     */
    public static int sizeBits_ticks() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: remaining
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'remaining' is signed (false).
     */
    public static boolean isSigned_remaining() {
        return false;
    }

    /**
     * Return whether the field 'remaining' is an array (false).
     */
    public static boolean isArray_remaining() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'remaining'
     */
    public static int offset_remaining() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'remaining'
     */
    public static int offsetBits_remaining() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'remaining'
     */
    public long get_remaining() {
        return (long)getUIntElement(offsetBits_remaining(), 32);
    }

    /**
     * Set the value of the field 'remaining'
     */
    public void set_remaining(long value) {
        setUIntElement(offsetBits_remaining(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'remaining'
     */
    public static int size_remaining() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'remaining'
     */
    public static int sizeBits_remaining() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: offset
    //   Field type: long, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'offset' is signed (false).
     */
    public static boolean isSigned_offset() {
        return false;
    }

    /**
     * Return whether the field 'offset' is an array (false).
     */
    public static boolean isArray_offset() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'offset'
     */
    public static int offset_offset() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'offset'
     */
    public static int offsetBits_offset() {
        return 128;
    }

    /**
     * Return the value (as a long) of the field 'offset'
     */
    public long get_offset() {
        return (long)getUIntElement(offsetBits_offset(), 32);
    }

    /**
     * Set the value of the field 'offset'
     */
    public void set_offset(long value) {
        setUIntElement(offsetBits_offset(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'offset'
     */
    public static int size_offset() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'offset'
     */
    public static int sizeBits_offset() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: synchronized
    //   Field type: short, unsigned
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'synchronized' is signed (false).
     */
    public static boolean isSigned_synchronized() {
        return false;
    }

    /**
     * Return whether the field 'synchronized' is an array (false).
     */
    public static boolean isArray_synchronized() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'synchronized'
     */
    public static int offset_synchronized() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'synchronized'
     */
    public static int offsetBits_synchronized() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'synchronized'
     */
    public short get_synchronized() {
        return (short)getUIntElement(offsetBits_synchronized(), 8);
    }

    /**
     * Set the value of the field 'synchronized'
     */
    public void set_synchronized(short value) {
        setUIntElement(offsetBits_synchronized(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'synchronized'
     */
    public static int size_synchronized() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'synchronized'
     */
    public static int sizeBits_synchronized() {
        return 8;
    }

}
