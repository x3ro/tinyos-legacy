/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'java'
 * message type.
 */

public class Tuple extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new java of size 6. */
    public Tuple() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new java of the given data_length. */
    public Tuple(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java with the given data_length
     * and base offset.
     */
    public Tuple(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store.
     */
    public Tuple(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset.
     */
    public Tuple(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public Tuple(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset.
     */
    public Tuple(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new java embedded in the given message
     * at the given base offset and length.
     */
    public Tuple(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <java> \n";
      try {
        s += "  [qid=0x"+Long.toHexString(get_qid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [numFields=0x"+Long.toHexString(get_numFields())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [notNull=0x"+Long.toHexString(get_notNull())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: qid
    //   Field type: short, signed
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'qid' is signed (true).
     */
    public static boolean isSigned_qid() {
        return true;
    }

    /**
     * Return whether the field 'qid' is an array (false).
     */
    public static boolean isArray_qid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'qid'
     */
    public static int offset_qid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'qid'
     */
    public static int offsetBits_qid() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'qid'
     */
    public short get_qid() {
        return (short)getUIntElement(offsetBits_qid(), 8);
    }

    /**
     * Set the value of the field 'qid'
     */
    public void set_qid(short value) {
        setUIntElement(offsetBits_qid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'qid'
     */
    public static int size_qid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'qid'
     */
    public static int sizeBits_qid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: numFields
    //   Field type: byte, signed
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'numFields' is signed (true).
     */
    public static boolean isSigned_numFields() {
        return true;
    }

    /**
     * Return whether the field 'numFields' is an array (false).
     */
    public static boolean isArray_numFields() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'numFields'
     */
    public static int offset_numFields() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'numFields'
     */
    public static int offsetBits_numFields() {
        return 8;
    }

    /**
     * Return the value (as a byte) of the field 'numFields'
     */
    public byte get_numFields() {
        return (byte)getSIntElement(offsetBits_numFields(), 8);
    }

    /**
     * Set the value of the field 'numFields'
     */
    public void set_numFields(byte value) {
        setSIntElement(offsetBits_numFields(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'numFields'
     */
    public static int size_numFields() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'numFields'
     */
    public static int sizeBits_numFields() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: notNull
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'notNull' is signed (true).
     */
    public static boolean isSigned_notNull() {
        return true;
    }

    /**
     * Return whether the field 'notNull' is an array (false).
     */
    public static boolean isArray_notNull() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'notNull'
     */
    public static int offset_notNull() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'notNull'
     */
    public static int offsetBits_notNull() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'notNull'
     */
    public int get_notNull() {
        return (int)getSIntElement(offsetBits_notNull(), 32);
    }

    /**
     * Set the value of the field 'notNull'
     */
    public void set_notNull(int value) {
        setSIntElement(offsetBits_notNull(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'notNull'
     */
    public static int size_notNull() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'notNull'
     */
    public static int sizeBits_notNull() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fields
    //   Field type: byte[], signed
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fields' is signed (true).
     */
    public static boolean isSigned_fields() {
        return true;
    }

    /**
     * Return whether the field 'fields' is an array (true).
     */
    public static boolean isArray_fields() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'fields'
     */
    public static int offset_fields(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fields'
     */
    public static int offsetBits_fields(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'fields' as a byte[]
     */
    public byte[] get_fields() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'fields' from the given byte[]
     */
    public void set_fields(byte[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_fields(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a byte) of the array 'fields'
     */
    public byte getElement_fields(int index1) {
        return (byte)getSIntElement(offsetBits_fields(index1), 8);
    }

    /**
     * Set an element of the array 'fields'
     */
    public void setElement_fields(int index1, byte value) {
        setSIntElement(offsetBits_fields(index1), 8, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'fields'
     */
    public static int elementSize_fields() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'fields'
     */
    public static int elementSizeBits_fields() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'fields'
     */
    public static int numDimensions_fields() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'fields'
     * for the given dimension.
     */
    public static int numElements_fields(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'fields' with a String
     */
    public void setString_fields(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_fields(i, (byte)s.charAt(i));
         }
         setElement_fields(i, (byte)0); //null terminate
    }

    /**
     * Read the array 'fields' as a String
     */
    public String getString_fields() { 
         char carr[] = new char[net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_fields(i) == (char)0) break;
             carr[i] = (char)getElement_fields(i);
         }
         return new String(carr,0,i);
    }

}
