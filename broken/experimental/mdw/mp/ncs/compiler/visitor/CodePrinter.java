//
// Generated by JTB 1.2.2
//
package ncs.compiler.visitor;

import ncs.compiler.*;
import ncs.compiler.syntaxtree.*;
import java.util.*;
import java.io.*;

public class CodePrinter extends TreeDumper {
  private static final boolean DEBUG = false;

  private int indent;
  public static final int INDENT = 2;
  private int curLine = 1;
  private int curColumn = 1;

  public CodePrinter(OutputStream o, int indent) {
    super(o);
    this.indent = indent;
  }

  public CodePrinter(OutputStream o) {
    this(o, INDENT);
  }

  public CodePrinter(PrintStream ps, int indent) {
    super(ps);
    this.indent = indent;
  }

  public CodePrinter(PrintStream ps) {
    this(ps, INDENT);
  }

  public CodePrinter(Writer w, int indent) {
    super(w);
    this.indent = indent;
  }

  public CodePrinter(Writer w) {
    this(w, INDENT);
  }

  int reset_line = 0;

  public void visit(NodeToken n) {

    if (DEBUG) System.err.println("\nTOKEN: '"+n.tokenImage+"' line "+n.beginLine+" curLine "+curLine+" col "+n.beginColumn+" curColumn "+curColumn);

    if (indent == 0) {
      curLine = n.beginLine;
      curColumn = 1;
      startAtNextToken();
    } else {
      if (n.beginLine < curLine) {
	if (reset_line == 0) {
	  // Start of a generated subtree - realign tokens with cursor
	  reset_line = curLine;
	  n.beginLine = ++curLine; 
	} else if (n.beginLine == reset_line) {
	  // Rejoined main tree
	  curLine = n.beginLine;
	  curColumn = 1;
	  startAtNextToken();
	  reset_line = 0;
	} else {
	  // Continuing generated subtree
	  n.beginLine = curLine; 
	}
      } else {
	reset_line = 0;
	if (n.beginLine > curLine) {
	  curLine = n.beginLine;
	  curColumn = 1;
	}
	if (n.beginColumn > curColumn) {
	  curColumn = n.beginColumn;
	}
      }
    }
    n.beginColumn += indent;

    for (int i = 0; i < n.tokenImage.length(); i++) {
      if (n.tokenImage.charAt(i) == '\n') { 
	curLine++; curColumn = 1; 
      } else {
	curColumn++;
      }
    }
    super.visit(n);
  }


}
