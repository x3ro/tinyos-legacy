/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RoutePacket'
 * message type.
 */



public class RoutePacket extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 36;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 2;

    /** Create a new RoutePacket of size 36. */
    public RoutePacket() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RoutePacket of the given data_length. */
    public RoutePacket(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket with the given data_length
     * and base offset.
     */
    public RoutePacket(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket using the given byte array
     * as backing store.
     */
    public RoutePacket(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket using the given byte array
     * as backing store, with the given base offset.
     */
    public RoutePacket(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RoutePacket(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket embedded in the given message
     * at the given base offset.
     */
    public RoutePacket(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RoutePacket embedded in the given message
     * at the given base offset and length.
     */
    public RoutePacket(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RoutePacket> \n";
      try {
        s += "  [addr=0x"+Long.toHexString(get_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [amtype=0x"+Long.toHexString(get_amtype())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [group=0x"+Long.toHexString(get_group())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [length=0x"+Long.toHexString(get_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parent=0x"+Long.toHexString(get_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hop=0x"+Long.toHexString(get_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [cost=0x"+Long.toHexString(get_cost())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [estLength=0x"+Long.toHexString(get_estLength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [entries.id=";
        for (int i = 0; i < 11; i++) {
          s += "0x"+Long.toHexString(getElement_entries_id(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [entries.receiveEst=";
        for (int i = 0; i < 11; i++) {
          s += "0x"+Long.toHexString(getElement_entries_receiveEst(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqnum=0x"+Long.toHexString(get_seqnum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [crc=0x"+Long.toHexString(get_crc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: addr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'addr' is signed (false).
     */
    public static boolean isSigned_addr() {
        return false;
    }

    /**
     * Return whether the field 'addr' is an array (false).
     */
    public static boolean isArray_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'addr'
     */
    public static int offset_addr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'addr'
     */
    public static int offsetBits_addr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'addr'
     */
    public int get_addr() {
        return (int)getUIntElement(offsetBits_addr(), 16);
    }

    /**
     * Set the value of the field 'addr'
     */
    public void set_addr(int value) {
        setUIntElement(offsetBits_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'addr'
     */
    public static int size_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'addr'
     */
    public static int sizeBits_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: amtype
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'amtype' is signed (false).
     */
    public static boolean isSigned_amtype() {
        return false;
    }

    /**
     * Return whether the field 'amtype' is an array (false).
     */
    public static boolean isArray_amtype() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'amtype'
     */
    public static int offset_amtype() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'amtype'
     */
    public static int offsetBits_amtype() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'amtype'
     */
    public short get_amtype() {
        return (short)getUIntElement(offsetBits_amtype(), 8);
    }

    /**
     * Set the value of the field 'amtype'
     */
    public void set_amtype(short value) {
        setUIntElement(offsetBits_amtype(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'amtype'
     */
    public static int size_amtype() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'amtype'
     */
    public static int sizeBits_amtype() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: group
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'group' is signed (false).
     */
    public static boolean isSigned_group() {
        return false;
    }

    /**
     * Return whether the field 'group' is an array (false).
     */
    public static boolean isArray_group() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'group'
     */
    public static int offset_group() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'group'
     */
    public static int offsetBits_group() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'group'
     */
    public short get_group() {
        return (short)getUIntElement(offsetBits_group(), 8);
    }

    /**
     * Set the value of the field 'group'
     */
    public void set_group(short value) {
        setUIntElement(offsetBits_group(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'group'
     */
    public static int size_group() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'group'
     */
    public static int sizeBits_group() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: length
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'length' is signed (false).
     */
    public static boolean isSigned_length() {
        return false;
    }

    /**
     * Return whether the field 'length' is an array (false).
     */
    public static boolean isArray_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'length'
     */
    public static int offset_length() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'length'
     */
    public static int offsetBits_length() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'length'
     */
    public short get_length() {
        return (short)getUIntElement(offsetBits_length(), 8);
    }

    /**
     * Set the value of the field 'length'
     */
    public void set_length(short value) {
        setUIntElement(offsetBits_length(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'length'
     */
    public static int size_length() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'length'
     */
    public static int sizeBits_length() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parent
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parent' is signed (false).
     */
    public static boolean isSigned_parent() {
        return false;
    }

    /**
     * Return whether the field 'parent' is an array (false).
     */
    public static boolean isArray_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parent'
     */
    public static int offset_parent() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parent'
     */
    public static int offsetBits_parent() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'parent'
     */
    public short get_parent() {
        return (short)getUIntElement(offsetBits_parent(), 8);
    }

    /**
     * Set the value of the field 'parent'
     */
    public void set_parent(short value) {
        setUIntElement(offsetBits_parent(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'parent'
     */
    public static int size_parent() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parent'
     */
    public static int sizeBits_parent() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hop
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hop' is signed (false).
     */
    public static boolean isSigned_hop() {
        return false;
    }

    /**
     * Return whether the field 'hop' is an array (false).
     */
    public static boolean isArray_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hop'
     */
    public static int offset_hop() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hop'
     */
    public static int offsetBits_hop() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'hop'
     */
    public short get_hop() {
        return (short)getUIntElement(offsetBits_hop(), 8);
    }

    /**
     * Set the value of the field 'hop'
     */
    public void set_hop(short value) {
        setUIntElement(offsetBits_hop(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hop'
     */
    public static int size_hop() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hop'
     */
    public static int sizeBits_hop() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cost
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cost' is signed (false).
     */
    public static boolean isSigned_cost() {
        return false;
    }

    /**
     * Return whether the field 'cost' is an array (false).
     */
    public static boolean isArray_cost() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cost'
     */
    public static int offset_cost() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cost'
     */
    public static int offsetBits_cost() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'cost'
     */
    public int get_cost() {
        return (int)getUIntElement(offsetBits_cost(), 16);
    }

    /**
     * Set the value of the field 'cost'
     */
    public void set_cost(int value) {
        setUIntElement(offsetBits_cost(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'cost'
     */
    public static int size_cost() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cost'
     */
    public static int sizeBits_cost() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: estLength
    //   Field type: short, unsigned
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'estLength' is signed (false).
     */
    public static boolean isSigned_estLength() {
        return false;
    }

    /**
     * Return whether the field 'estLength' is an array (false).
     */
    public static boolean isArray_estLength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'estLength'
     */
    public static int offset_estLength() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'estLength'
     */
    public static int offsetBits_estLength() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'estLength'
     */
    public short get_estLength() {
        return (short)getUIntElement(offsetBits_estLength(), 8);
    }

    /**
     * Set the value of the field 'estLength'
     */
    public void set_estLength(short value) {
        setUIntElement(offsetBits_estLength(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'estLength'
     */
    public static int size_estLength() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'estLength'
     */
    public static int sizeBits_estLength() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: entries.id
    //   Field type: short[], unsigned
    //   Offset (bits): 0
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'entries.id' is signed (false).
     */
    public static boolean isSigned_entries_id() {
        return false;
    }

    /**
     * Return whether the field 'entries.id' is an array (true).
     */
    public static boolean isArray_entries_id() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'entries.id'
     */
    public static int offset_entries_id(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 11) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'entries.id'
     */
    public static int offsetBits_entries_id(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 11) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'entries.id' as a short[]
     */
    public short[] get_entries_id() {
        short[] tmp = new short[11];
        for (int index0 = 0; index0 < numElements_entries_id(0); index0++) {
            tmp[index0] = getElement_entries_id(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'entries.id' from the given short[]
     */
    public void set_entries_id(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_entries_id(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'entries.id'
     */
    public short getElement_entries_id(int index1) {
        return (short)getUIntElement(offsetBits_entries_id(index1), 8);
    }

    /**
     * Set an element of the array 'entries.id'
     */
    public void setElement_entries_id(int index1, short value) {
        setUIntElement(offsetBits_entries_id(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'entries.id'
     */
    public static int totalSize_entries_id() {
        return (176 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'entries.id'
     */
    public static int totalSizeBits_entries_id() {
        return 176;
    }

    /**
     * Return the size, in bytes, of each element of the array 'entries.id'
     */
    public static int elementSize_entries_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'entries.id'
     */
    public static int elementSizeBits_entries_id() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'entries.id'
     */
    public static int numDimensions_entries_id() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'entries.id'
     */
    public static int numElements_entries_id() {
        return 11;
    }

    /**
     * Return the number of elements in the array 'entries.id'
     * for the given dimension.
     */
    public static int numElements_entries_id(int dimension) {
      int array_dims[] = { 11,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'entries.id' with a String
     */
    public void setString_entries_id(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_entries_id(i, (short)s.charAt(i));
         }
         setElement_entries_id(i, (short)0); //null terminate
    }

    /**
     * Read the array 'entries.id' as a String
     */
    public String getString_entries_id() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,11)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_entries_id(i) == (char)0) break;
             carr[i] = (char)getElement_entries_id(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: entries.receiveEst
    //   Field type: short[], unsigned
    //   Offset (bits): 8
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'entries.receiveEst' is signed (false).
     */
    public static boolean isSigned_entries_receiveEst() {
        return false;
    }

    /**
     * Return whether the field 'entries.receiveEst' is an array (true).
     */
    public static boolean isArray_entries_receiveEst() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'entries.receiveEst'
     */
    public static int offset_entries_receiveEst(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 11) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'entries.receiveEst'
     */
    public static int offsetBits_entries_receiveEst(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 11) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'entries.receiveEst' as a short[]
     */
    public short[] get_entries_receiveEst() {
        short[] tmp = new short[11];
        for (int index0 = 0; index0 < numElements_entries_receiveEst(0); index0++) {
            tmp[index0] = getElement_entries_receiveEst(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'entries.receiveEst' from the given short[]
     */
    public void set_entries_receiveEst(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_entries_receiveEst(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'entries.receiveEst'
     */
    public short getElement_entries_receiveEst(int index1) {
        return (short)getUIntElement(offsetBits_entries_receiveEst(index1), 8);
    }

    /**
     * Set an element of the array 'entries.receiveEst'
     */
    public void setElement_entries_receiveEst(int index1, short value) {
        setUIntElement(offsetBits_entries_receiveEst(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'entries.receiveEst'
     */
    public static int totalSize_entries_receiveEst() {
        return (176 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'entries.receiveEst'
     */
    public static int totalSizeBits_entries_receiveEst() {
        return 176;
    }

    /**
     * Return the size, in bytes, of each element of the array 'entries.receiveEst'
     */
    public static int elementSize_entries_receiveEst() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'entries.receiveEst'
     */
    public static int elementSizeBits_entries_receiveEst() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'entries.receiveEst'
     */
    public static int numDimensions_entries_receiveEst() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'entries.receiveEst'
     */
    public static int numElements_entries_receiveEst() {
        return 11;
    }

    /**
     * Return the number of elements in the array 'entries.receiveEst'
     * for the given dimension.
     */
    public static int numElements_entries_receiveEst(int dimension) {
      int array_dims[] = { 11,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'entries.receiveEst' with a String
     */
    public void setString_entries_receiveEst(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_entries_receiveEst(i, (short)s.charAt(i));
         }
         setElement_entries_receiveEst(i, (short)0); //null terminate
    }

    /**
     * Read the array 'entries.receiveEst' as a String
     */
    public String getString_entries_receiveEst() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,11)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_entries_receiveEst(i) == (char)0) break;
             carr[i] = (char)getElement_entries_receiveEst(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: short, unsigned
    //   Offset (bits): 256
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 256;
    }

    /**
     * Return the value (as a short) of the field 'source'
     */
    public short get_source() {
        return (short)getUIntElement(offsetBits_source(), 8);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(short value) {
        setUIntElement(offsetBits_source(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqnum
    //   Field type: byte, unsigned
    //   Offset (bits): 264
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqnum' is signed (false).
     */
    public static boolean isSigned_seqnum() {
        return false;
    }

    /**
     * Return whether the field 'seqnum' is an array (false).
     */
    public static boolean isArray_seqnum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqnum'
     */
    public static int offset_seqnum() {
        return (264 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqnum'
     */
    public static int offsetBits_seqnum() {
        return 264;
    }

    /**
     * Return the value (as a byte) of the field 'seqnum'
     */
    public byte get_seqnum() {
        return (byte)getSIntElement(offsetBits_seqnum(), 8);
    }

    /**
     * Set the value of the field 'seqnum'
     */
    public void set_seqnum(byte value) {
        setSIntElement(offsetBits_seqnum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqnum'
     */
    public static int size_seqnum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqnum'
     */
    public static int sizeBits_seqnum() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: crc
    //   Field type: int, unsigned
    //   Offset (bits): 272
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'crc' is signed (false).
     */
    public static boolean isSigned_crc() {
        return false;
    }

    /**
     * Return whether the field 'crc' is an array (false).
     */
    public static boolean isArray_crc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'crc'
     */
    public static int offset_crc() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'crc'
     */
    public static int offsetBits_crc() {
        return 272;
    }

    /**
     * Return the value (as a int) of the field 'crc'
     */
    public int get_crc() {
        return (int)getUIntElement(offsetBits_crc(), 16);
    }

    /**
     * Set the value of the field 'crc'
     */
    public void set_crc(int value) {
        setUIntElement(offsetBits_crc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'crc'
     */
    public static int size_crc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'crc'
     */
    public static int sizeBits_crc() {
        return 16;
    }

}
