/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RouteDBMsg'
 * message type.
 */



public class RouteDBMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 3;

    /** Create a new RouteDBMsg of size 26. */
    public RouteDBMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RouteDBMsg of the given data_length. */
    public RouteDBMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg with the given data_length
     * and base offset.
     */
    public RouteDBMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg using the given byte array
     * as backing store.
     */
    public RouteDBMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RouteDBMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RouteDBMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg embedded in the given message
     * at the given base offset.
     */
    public RouteDBMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RouteDBMsg embedded in the given message
     * at the given base offset and length.
     */
    public RouteDBMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RouteDBMsg> \n";
      try {
        s += "  [addr=0x"+Long.toHexString(get_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [amtype=0x"+Long.toHexString(get_amtype())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [group=0x"+Long.toHexString(get_group())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [length=0x"+Long.toHexString(get_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [decision=0x"+Long.toHexString(get_decision())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldParent=0x"+Long.toHexString(get_oldParent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldParentLinkCost=0x"+Long.toHexString(get_oldParentLinkCost())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldParentCost=0x"+Long.toHexString(get_oldParentCost())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldParentSendEst=0x"+Long.toHexString(get_oldParentSendEst())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldParentReceiveEst=0x"+Long.toHexString(get_oldParentReceiveEst())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bestParent=0x"+Long.toHexString(get_bestParent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bestParentLinkCost=0x"+Long.toHexString(get_bestParentLinkCost())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bestParentCost=0x"+Long.toHexString(get_bestParentCost())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bestParentSendEst=0x"+Long.toHexString(get_bestParentSendEst())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bestParentReceiveEst=0x"+Long.toHexString(get_bestParentReceiveEst())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parent=0x"+Long.toHexString(get_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dbSeqnum=0x"+Long.toHexString(get_dbSeqnum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqnum=0x"+Long.toHexString(get_seqnum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [crc=0x"+Long.toHexString(get_crc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: addr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'addr' is signed (false).
     */
    public static boolean isSigned_addr() {
        return false;
    }

    /**
     * Return whether the field 'addr' is an array (false).
     */
    public static boolean isArray_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'addr'
     */
    public static int offset_addr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'addr'
     */
    public static int offsetBits_addr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'addr'
     */
    public int get_addr() {
        return (int)getUIntElement(offsetBits_addr(), 16);
    }

    /**
     * Set the value of the field 'addr'
     */
    public void set_addr(int value) {
        setUIntElement(offsetBits_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'addr'
     */
    public static int size_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'addr'
     */
    public static int sizeBits_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: amtype
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'amtype' is signed (false).
     */
    public static boolean isSigned_amtype() {
        return false;
    }

    /**
     * Return whether the field 'amtype' is an array (false).
     */
    public static boolean isArray_amtype() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'amtype'
     */
    public static int offset_amtype() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'amtype'
     */
    public static int offsetBits_amtype() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'amtype'
     */
    public short get_amtype() {
        return (short)getUIntElement(offsetBits_amtype(), 8);
    }

    /**
     * Set the value of the field 'amtype'
     */
    public void set_amtype(short value) {
        setUIntElement(offsetBits_amtype(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'amtype'
     */
    public static int size_amtype() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'amtype'
     */
    public static int sizeBits_amtype() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: group
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'group' is signed (false).
     */
    public static boolean isSigned_group() {
        return false;
    }

    /**
     * Return whether the field 'group' is an array (false).
     */
    public static boolean isArray_group() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'group'
     */
    public static int offset_group() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'group'
     */
    public static int offsetBits_group() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'group'
     */
    public short get_group() {
        return (short)getUIntElement(offsetBits_group(), 8);
    }

    /**
     * Set the value of the field 'group'
     */
    public void set_group(short value) {
        setUIntElement(offsetBits_group(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'group'
     */
    public static int size_group() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'group'
     */
    public static int sizeBits_group() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: length
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'length' is signed (false).
     */
    public static boolean isSigned_length() {
        return false;
    }

    /**
     * Return whether the field 'length' is an array (false).
     */
    public static boolean isArray_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'length'
     */
    public static int offset_length() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'length'
     */
    public static int offsetBits_length() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'length'
     */
    public short get_length() {
        return (short)getUIntElement(offsetBits_length(), 8);
    }

    /**
     * Set the value of the field 'length'
     */
    public void set_length(short value) {
        setUIntElement(offsetBits_length(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'length'
     */
    public static int size_length() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'length'
     */
    public static int sizeBits_length() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: decision
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'decision' is signed (false).
     */
    public static boolean isSigned_decision() {
        return false;
    }

    /**
     * Return whether the field 'decision' is an array (false).
     */
    public static boolean isArray_decision() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'decision'
     */
    public static int offset_decision() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'decision'
     */
    public static int offsetBits_decision() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'decision'
     */
    public short get_decision() {
        return (short)getUIntElement(offsetBits_decision(), 8);
    }

    /**
     * Set the value of the field 'decision'
     */
    public void set_decision(short value) {
        setUIntElement(offsetBits_decision(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'decision'
     */
    public static int size_decision() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'decision'
     */
    public static int sizeBits_decision() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldParent
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldParent' is signed (false).
     */
    public static boolean isSigned_oldParent() {
        return false;
    }

    /**
     * Return whether the field 'oldParent' is an array (false).
     */
    public static boolean isArray_oldParent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldParent'
     */
    public static int offset_oldParent() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldParent'
     */
    public static int offsetBits_oldParent() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'oldParent'
     */
    public short get_oldParent() {
        return (short)getUIntElement(offsetBits_oldParent(), 8);
    }

    /**
     * Set the value of the field 'oldParent'
     */
    public void set_oldParent(short value) {
        setUIntElement(offsetBits_oldParent(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldParent'
     */
    public static int size_oldParent() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldParent'
     */
    public static int sizeBits_oldParent() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldParentLinkCost
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldParentLinkCost' is signed (false).
     */
    public static boolean isSigned_oldParentLinkCost() {
        return false;
    }

    /**
     * Return whether the field 'oldParentLinkCost' is an array (false).
     */
    public static boolean isArray_oldParentLinkCost() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldParentLinkCost'
     */
    public static int offset_oldParentLinkCost() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldParentLinkCost'
     */
    public static int offsetBits_oldParentLinkCost() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'oldParentLinkCost'
     */
    public int get_oldParentLinkCost() {
        return (int)getUIntElement(offsetBits_oldParentLinkCost(), 16);
    }

    /**
     * Set the value of the field 'oldParentLinkCost'
     */
    public void set_oldParentLinkCost(int value) {
        setUIntElement(offsetBits_oldParentLinkCost(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldParentLinkCost'
     */
    public static int size_oldParentLinkCost() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldParentLinkCost'
     */
    public static int sizeBits_oldParentLinkCost() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldParentCost
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldParentCost' is signed (false).
     */
    public static boolean isSigned_oldParentCost() {
        return false;
    }

    /**
     * Return whether the field 'oldParentCost' is an array (false).
     */
    public static boolean isArray_oldParentCost() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldParentCost'
     */
    public static int offset_oldParentCost() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldParentCost'
     */
    public static int offsetBits_oldParentCost() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'oldParentCost'
     */
    public int get_oldParentCost() {
        return (int)getUIntElement(offsetBits_oldParentCost(), 16);
    }

    /**
     * Set the value of the field 'oldParentCost'
     */
    public void set_oldParentCost(int value) {
        setUIntElement(offsetBits_oldParentCost(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldParentCost'
     */
    public static int size_oldParentCost() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldParentCost'
     */
    public static int sizeBits_oldParentCost() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldParentSendEst
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldParentSendEst' is signed (false).
     */
    public static boolean isSigned_oldParentSendEst() {
        return false;
    }

    /**
     * Return whether the field 'oldParentSendEst' is an array (false).
     */
    public static boolean isArray_oldParentSendEst() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldParentSendEst'
     */
    public static int offset_oldParentSendEst() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldParentSendEst'
     */
    public static int offsetBits_oldParentSendEst() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'oldParentSendEst'
     */
    public short get_oldParentSendEst() {
        return (short)getUIntElement(offsetBits_oldParentSendEst(), 8);
    }

    /**
     * Set the value of the field 'oldParentSendEst'
     */
    public void set_oldParentSendEst(short value) {
        setUIntElement(offsetBits_oldParentSendEst(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldParentSendEst'
     */
    public static int size_oldParentSendEst() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldParentSendEst'
     */
    public static int sizeBits_oldParentSendEst() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldParentReceiveEst
    //   Field type: short, unsigned
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldParentReceiveEst' is signed (false).
     */
    public static boolean isSigned_oldParentReceiveEst() {
        return false;
    }

    /**
     * Return whether the field 'oldParentReceiveEst' is an array (false).
     */
    public static boolean isArray_oldParentReceiveEst() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldParentReceiveEst'
     */
    public static int offset_oldParentReceiveEst() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldParentReceiveEst'
     */
    public static int offsetBits_oldParentReceiveEst() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'oldParentReceiveEst'
     */
    public short get_oldParentReceiveEst() {
        return (short)getUIntElement(offsetBits_oldParentReceiveEst(), 8);
    }

    /**
     * Set the value of the field 'oldParentReceiveEst'
     */
    public void set_oldParentReceiveEst(short value) {
        setUIntElement(offsetBits_oldParentReceiveEst(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldParentReceiveEst'
     */
    public static int size_oldParentReceiveEst() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldParentReceiveEst'
     */
    public static int sizeBits_oldParentReceiveEst() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bestParent
    //   Field type: short, unsigned
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bestParent' is signed (false).
     */
    public static boolean isSigned_bestParent() {
        return false;
    }

    /**
     * Return whether the field 'bestParent' is an array (false).
     */
    public static boolean isArray_bestParent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bestParent'
     */
    public static int offset_bestParent() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bestParent'
     */
    public static int offsetBits_bestParent() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'bestParent'
     */
    public short get_bestParent() {
        return (short)getUIntElement(offsetBits_bestParent(), 8);
    }

    /**
     * Set the value of the field 'bestParent'
     */
    public void set_bestParent(short value) {
        setUIntElement(offsetBits_bestParent(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'bestParent'
     */
    public static int size_bestParent() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bestParent'
     */
    public static int sizeBits_bestParent() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bestParentLinkCost
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bestParentLinkCost' is signed (false).
     */
    public static boolean isSigned_bestParentLinkCost() {
        return false;
    }

    /**
     * Return whether the field 'bestParentLinkCost' is an array (false).
     */
    public static boolean isArray_bestParentLinkCost() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bestParentLinkCost'
     */
    public static int offset_bestParentLinkCost() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bestParentLinkCost'
     */
    public static int offsetBits_bestParentLinkCost() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'bestParentLinkCost'
     */
    public int get_bestParentLinkCost() {
        return (int)getUIntElement(offsetBits_bestParentLinkCost(), 16);
    }

    /**
     * Set the value of the field 'bestParentLinkCost'
     */
    public void set_bestParentLinkCost(int value) {
        setUIntElement(offsetBits_bestParentLinkCost(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bestParentLinkCost'
     */
    public static int size_bestParentLinkCost() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bestParentLinkCost'
     */
    public static int sizeBits_bestParentLinkCost() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bestParentCost
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bestParentCost' is signed (false).
     */
    public static boolean isSigned_bestParentCost() {
        return false;
    }

    /**
     * Return whether the field 'bestParentCost' is an array (false).
     */
    public static boolean isArray_bestParentCost() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bestParentCost'
     */
    public static int offset_bestParentCost() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bestParentCost'
     */
    public static int offsetBits_bestParentCost() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'bestParentCost'
     */
    public int get_bestParentCost() {
        return (int)getUIntElement(offsetBits_bestParentCost(), 16);
    }

    /**
     * Set the value of the field 'bestParentCost'
     */
    public void set_bestParentCost(int value) {
        setUIntElement(offsetBits_bestParentCost(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bestParentCost'
     */
    public static int size_bestParentCost() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bestParentCost'
     */
    public static int sizeBits_bestParentCost() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bestParentSendEst
    //   Field type: short, unsigned
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bestParentSendEst' is signed (false).
     */
    public static boolean isSigned_bestParentSendEst() {
        return false;
    }

    /**
     * Return whether the field 'bestParentSendEst' is an array (false).
     */
    public static boolean isArray_bestParentSendEst() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bestParentSendEst'
     */
    public static int offset_bestParentSendEst() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bestParentSendEst'
     */
    public static int offsetBits_bestParentSendEst() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'bestParentSendEst'
     */
    public short get_bestParentSendEst() {
        return (short)getUIntElement(offsetBits_bestParentSendEst(), 8);
    }

    /**
     * Set the value of the field 'bestParentSendEst'
     */
    public void set_bestParentSendEst(short value) {
        setUIntElement(offsetBits_bestParentSendEst(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'bestParentSendEst'
     */
    public static int size_bestParentSendEst() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bestParentSendEst'
     */
    public static int sizeBits_bestParentSendEst() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bestParentReceiveEst
    //   Field type: short, unsigned
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bestParentReceiveEst' is signed (false).
     */
    public static boolean isSigned_bestParentReceiveEst() {
        return false;
    }

    /**
     * Return whether the field 'bestParentReceiveEst' is an array (false).
     */
    public static boolean isArray_bestParentReceiveEst() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bestParentReceiveEst'
     */
    public static int offset_bestParentReceiveEst() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bestParentReceiveEst'
     */
    public static int offsetBits_bestParentReceiveEst() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'bestParentReceiveEst'
     */
    public short get_bestParentReceiveEst() {
        return (short)getUIntElement(offsetBits_bestParentReceiveEst(), 8);
    }

    /**
     * Set the value of the field 'bestParentReceiveEst'
     */
    public void set_bestParentReceiveEst(short value) {
        setUIntElement(offsetBits_bestParentReceiveEst(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'bestParentReceiveEst'
     */
    public static int size_bestParentReceiveEst() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bestParentReceiveEst'
     */
    public static int sizeBits_bestParentReceiveEst() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parent
    //   Field type: short, unsigned
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parent' is signed (false).
     */
    public static boolean isSigned_parent() {
        return false;
    }

    /**
     * Return whether the field 'parent' is an array (false).
     */
    public static boolean isArray_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parent'
     */
    public static int offset_parent() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parent'
     */
    public static int offsetBits_parent() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'parent'
     */
    public short get_parent() {
        return (short)getUIntElement(offsetBits_parent(), 8);
    }

    /**
     * Set the value of the field 'parent'
     */
    public void set_parent(short value) {
        setUIntElement(offsetBits_parent(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'parent'
     */
    public static int size_parent() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parent'
     */
    public static int sizeBits_parent() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dbSeqnum
    //   Field type: short, unsigned
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dbSeqnum' is signed (false).
     */
    public static boolean isSigned_dbSeqnum() {
        return false;
    }

    /**
     * Return whether the field 'dbSeqnum' is an array (false).
     */
    public static boolean isArray_dbSeqnum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dbSeqnum'
     */
    public static int offset_dbSeqnum() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dbSeqnum'
     */
    public static int offsetBits_dbSeqnum() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'dbSeqnum'
     */
    public short get_dbSeqnum() {
        return (short)getUIntElement(offsetBits_dbSeqnum(), 8);
    }

    /**
     * Set the value of the field 'dbSeqnum'
     */
    public void set_dbSeqnum(short value) {
        setUIntElement(offsetBits_dbSeqnum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dbSeqnum'
     */
    public static int size_dbSeqnum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dbSeqnum'
     */
    public static int sizeBits_dbSeqnum() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: short, unsigned
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'source'
     */
    public short get_source() {
        return (short)getUIntElement(offsetBits_source(), 8);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(short value) {
        setUIntElement(offsetBits_source(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqnum
    //   Field type: byte, unsigned
    //   Offset (bits): 184
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqnum' is signed (false).
     */
    public static boolean isSigned_seqnum() {
        return false;
    }

    /**
     * Return whether the field 'seqnum' is an array (false).
     */
    public static boolean isArray_seqnum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqnum'
     */
    public static int offset_seqnum() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqnum'
     */
    public static int offsetBits_seqnum() {
        return 184;
    }

    /**
     * Return the value (as a byte) of the field 'seqnum'
     */
    public byte get_seqnum() {
        return (byte)getSIntElement(offsetBits_seqnum(), 8);
    }

    /**
     * Set the value of the field 'seqnum'
     */
    public void set_seqnum(byte value) {
        setSIntElement(offsetBits_seqnum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqnum'
     */
    public static int size_seqnum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqnum'
     */
    public static int sizeBits_seqnum() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: crc
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'crc' is signed (false).
     */
    public static boolean isSigned_crc() {
        return false;
    }

    /**
     * Return whether the field 'crc' is an array (false).
     */
    public static boolean isArray_crc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'crc'
     */
    public static int offset_crc() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'crc'
     */
    public static int offsetBits_crc() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'crc'
     */
    public int get_crc() {
        return (int)getUIntElement(offsetBits_crc(), 16);
    }

    /**
     * Set the value of the field 'crc'
     */
    public void set_crc(int value) {
        setUIntElement(offsetBits_crc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'crc'
     */
    public static int size_crc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'crc'
     */
    public static int sizeBits_crc() {
        return 16;
    }

}
