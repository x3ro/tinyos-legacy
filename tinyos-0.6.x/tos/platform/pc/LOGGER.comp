/*									tab:4
 *
 *
 * "Copyright (c) 2000 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:		Jason Hill
 *
 * This module implements an append only log to the I2C eeprom.  Currently,
 * it always starts and entry 0 when the power is turned on.  It supports 16
 * byte log entries (4 log entries per EEPROM page). It exposes 2 modes of
 * writing to the EEPROM: either log append, or writing to a particular log
 * entry. Upon the request it will read the data back from the EEPROM.
 *
 */

TOS_MODULE LOGGER;

ACCEPTS{
	char APPEND_LOG(char* data);
	char WRITE_LOG(short line, char* data);
	char READ_LOG(short line, char* dest);
	char LOGGER_INIT(void);
};

SIGNALS{ 
	char APPEND_LOG_DONE(char success);
	char READ_LOG_DONE(char* packet, char success);
};

HANDLES{
	char LOGGER_SPI_BYTE_DONE(unsigned char in);
};

USES{
	char LOGGER_SUB_INIT(void);
	char LOGGER_SPI_BYTE(unsigned char out);
};

