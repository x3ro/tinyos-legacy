/*									tab:4
 *
 *
 * "Copyright (c) 2000 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:		Phil Levis <pal@cs.berkeley.edu>
 *
 * This component implements a Beacon-LESS ad-hoc routing protocol. The
 * nodes automatically construct a routing tree rooted at a base station.
 * Route determination is based on hops from the base station; nodes try
 * to minimize the number of hops. Hop-count information is included in
 * every data message sent. By looking at other node's traffic, nodes can
 * determine if there is a shorter route. The tree is bootstrapped by
 * periodic empty data messages sent by the base station to itself with a
 * hop count of zero. BLESS_NEW.c contains greater details.
 *
 * BLESS_NEW_ACTIVE returns whether the mote has a parent, and so whether
 * its networking is active (will send).
 *
 */     

TOS_MODULE BLESS_NEW;
JOINTLY IMPLEMENTED_BY BLESS_NEW;

ACCEPTS{
	char BLESS_NEW_INIT(void);
	char BLESS_NEW_START(void);
	char BLESS_NEW_SEND(char* data, char len);
	char BLESS_NEW_ACTIVE(void);
};

HANDLES{
	TOS_MsgPtr DATA_MSG(TOS_MsgPtr data);
	char BLESS_PING_RECEIVE(short moteID, char sequence);
	char BLESS_PING_RESPONSE(short moteID, char sequence);
	char BLESS_NEW_SEND_DONE(TOS_MsgPtr data);
};

USES{
	char BLESS_NEW_SUB_SEND_MSG(short addr,char type, TOS_MsgPtr data);
	char BLESS_NEW_SUB_PING(short moteID, char sequence);

	short BLESS_NEW_RAND();

	char BLESS_NEW_SUB_INIT();
	char BLESS_NEW_LED1_OFF();
	char BLESS_NEW_LED1_ON();
	char BLESS_NEW_LED1_TOGGLE();
	char BLESS_NEW_LED2_OFF();
	char BLESS_NEW_LED2_ON();
	char BLESS_NEW_LED2_TOGGLE();
	char BLESS_NEW_LED3_OFF();
	char BLESS_NEW_LED3_ON();
	char BLESS_NEW_LED3_TOGGLE();
	char BLESS_NEW_SUB_LED_INIT();
};

