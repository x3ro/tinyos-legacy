/* "Copyright (c) 2001 and The Regents of the University  
* of California.  All rights reserved. 
* 
* Permission to use, copy, modify, and distribute this software and its 
* documentation for any purpose, without fee, and without written agreement is 
* hereby granted, provided that the above copyright notice and the following 
* two paragraphs appear in all copies of this software. 
*  
* IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR 
* DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT 
* OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF 
* CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*  
* THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, 
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
* AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS 
* ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO 
* PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS." 
* 
* Authors:   Kamin Whitehouse <kamin@cs.berkeley.edu>
* History:   created 7/22/2001 
*/

package Surge;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.symantec.itools.javax.swing.JToolBarSeparator;
import com.symantec.itools.javax.swing.icons.ImageIcon;
import Surge.GraphDisplayPanel;
import Surge.Dialog.*;
import Surge.PacketReciever.*;
import Surge.PacketAnalyzer.*;
import com.symantec.itools.javax.swing.actions.JActionMenuItem;
import com.symantec.itools.javax.swing.borders.BevelBorder;

              //This class has been created completely by visualCafe, and essentially
              //holds all the GUI information.
/**
 * A basic JFC 1.1 based application.
 */
public class MainFrame extends javax.swing.JFrame  
{
	PacketReciever packetReceiver;
	static byte seqno;

	public MainFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		construct_param_dialog();
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		setJMenuBar(MainMenuBar);
		MainMenuBar.setDoubleBuffered(true);
		setTitle("Surge: SensorWeb Interface");
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(700,500);
		setVisible(false);
		try {
			newIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/new.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ newIcon.move(144,312);
		try {
			openIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/open.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ openIcon.move(120,312);
		try {
			saveIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/save.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ saveIcon.move(96,312);
		try {
			cutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/cut.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ cutIcon.move(72,312);
		try {
			copyIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/copy.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ copyIcon.move(48,312);
		try {
			pasteIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/paste.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ pasteIcon.move(24,312);
		try {
			aboutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/about.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		try {
			selectIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/palette_select.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ selectIcon.move(0,0);
		try {
			handIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/palette_hand.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ handIcon.move(0,0);
		try {
			zoomIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/palette_zoom.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ zoomIcon.move(0,0);
		try {
			fitIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("images/palette_magnify.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ fitIcon.move(0,0);
		//$$ aboutIcon.move(0,312);
		saveFileDialog.setMode(FileDialog.SAVE);
		saveFileDialog.setTitle("Save");
		//$$ saveFileDialog.move(24,336);
		openFileDialog.setMode(FileDialog.LOAD);
		openFileDialog.setTitle("Open");
		//$$ openFileDialog.move(0,336);
		MainPanel.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
		getContentPane().add(BorderLayout.NORTH, MainPanel);
		MainToolBar.setAlignmentY(0.222222F);
		MainToolBar.setDoubleBuffered(true);
		MainPanel.add(MainToolBar);
		newButton.setDefaultCapable(false);
		newButton.setToolTipText("Create a new document");
		newButton.setMnemonic((int)'N');
		//MainToolBar.add(newButton);
		openButton.setDefaultCapable(false);
		openButton.setToolTipText("Open an existing document");
		openButton.setMnemonic((int)'O');
		//MainToolBar.add(openButton);
		saveButton.setDefaultCapable(false);
		saveButton.setToolTipText("Save the active document");
		saveButton.setMnemonic((int)'S');
		//MainToolBar.add(saveButton);
		//MainToolBar.add(JToolBarSeparator1);
		cutButton.setDefaultCapable(false);
		cutButton.setToolTipText("Cut the selection and put it on the Clipboard");
		cutButton.setMnemonic((int)'T');
		//MainToolBar.add(cutButton);
		copyButton.setDefaultCapable(false);
		copyButton.setToolTipText("Copy the selection and put it on the Clipboard");
		copyButton.setMnemonic((int)'C');
		//MainToolBar.add(copyButton);
		pasteButton.setDefaultCapable(false);
		pasteButton.setToolTipText("Insert Clipboard contents");
		pasteButton.setMnemonic((int)'P');
		//MainToolBar.add(pasteButton);
		//MainToolBar.add(JToolBarSeparator2);
		aboutButton.setDefaultCapable(false);
		aboutButton.setToolTipText("Display program information, version number and copyright");
		aboutButton.setMnemonic((int)'A');
		//MainToolBar.add(aboutButton);
		MainToolBar.add(JToolBarSeparator3);
		selectButton.setSelected(true);
		selectButton.setToolTipText("Use this to select and move nodes");
		selectButton.setMnemonic((int)'P');
		//MainToolBar.add(selectButton);
		handButton.setToolTipText("Use this to scroll with the left mouse button");
		handButton.setMnemonic((int)'H');
		//MainToolBar.add(handButton);
		zoomButton.setToolTipText("Use this to select a region and zoom with the left mouse button");
		zoomButton.setMnemonic((int)'Z');
		//MainToolBar.add(zoomButton);
//		dragButtonGroup.add(selectButton);
//		dragButtonGroup.add(handButton);
//		dragButtonGroup.add(zoomButton);
//		dragButtonGroup.setSelected(selectButton, true);
		//MainToolBar.add(JToolBarSeparator4);
		fitButton.setDefaultCapable(false);
		fitButton.setToolTipText("Fit all nodes onto the screen");
		fitButton.setMnemonic((int)'F');
		//MainToolBar.add(fitButton);
		MainToolBar.add(JToolBarSeparator5);
		JSlider1.setMinimum(1);
		JSlider1.setMaximum(5);
		JSlider1.setToolTipText("Slide this to zoom");
		JSlider1.setBorder(bevelBorder1);
		JSlider1.setValue(1);
		update_params_Button.setText(" Update Parameters");
		MainToolBar.add(update_params_Button);
		reset_Button.setText(" reset ");
		MainToolBar.add(reset_Button);
		MainToolBar.add(JSlider1);
		//$$ bevelBorder1.move(0,115);
		JLabel3.setText("1.0");
		JLabel3.setToolTipText("This is the current zoom level");
		MainToolBar.add(JLabel3);
		JLabel3.setFont(new Font("Dialog", Font.BOLD, 16));
		MainToolBar.add(JToolBarSeparator6);
	    JLabel4.setText("jlabel");
		JLabel4.setToolTipText("This is the current mouse position");
		MainToolBar.add(JLabel4);
		readingTypeLabel.setText("      Light Reading");
		readingTypeLabel.setToolTipText("This is the current reading type");
		MainToolBar.add(readingTypeLabel);
		//JLabel4.setSize(51,27);

		getContentPane().add(BorderLayout.CENTER, MainScrollPane);
		MainScrollPane.setOpaque(true);
		MainScrollPane.setViewportView(GraphDisplayPanel);		
		MainScrollPane.getViewport().add(GraphDisplayPanel);
		GraphDisplayPanel.setBounds(0,0,430,270);
		GraphDisplayPanel.setLayout(null);
		GraphDisplayPanel.setAutoscrolls(true);
		//GraphDisplayPanel.setBounds(0,0,100,100);
		//GraphDisplayPanel.setPreferredSize(new Dimension(100,100));
		MainScrollPane.getViewport().add(GraphDisplayPanel);
		//$$ MainMenuBar.move(168,312);
		fileMenu.setText("File");
		fileMenu.setActionCommand("File");
		fileMenu.setMnemonic((int)'F');
		MainMenuBar.add(fileMenu);
		newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK));
		newItem.setText("New");
		newItem.setActionCommand("New");
		newItem.setMnemonic((int)'N');
		fileMenu.add(newItem);
		openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK));
		openItem.setText("Open...");
		openItem.setActionCommand("Open...");
		openItem.setMnemonic((int)'O');
		fileMenu.add(openItem);
		saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK));
		saveItem.setText("Save");
		saveItem.setActionCommand("Save");
		saveItem.setMnemonic((int)'S');
		fileMenu.add(saveItem);
		saveAsItem.setText("Save As...");
		saveAsItem.setActionCommand("Save As...");
		saveAsItem.setMnemonic((int)'A');
		fileMenu.add(saveAsItem);
		fileMenu.add(JSeparator1);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		fileMenu.add(exitItem);
		editMenu.setText("Edit");
		editMenu.setActionCommand("Edit");
		editMenu.setMnemonic((int)'E');
		MainMenuBar.add(editMenu);
		cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.Event.CTRL_MASK));
		cutItem.setText("Cut");
		cutItem.setActionCommand("Cut");
		cutItem.setMnemonic((int)'T');
		editMenu.add(cutItem);
		copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.Event.CTRL_MASK));
		copyItem.setText("Copy");
		copyItem.setActionCommand("Copy");
		copyItem.setMnemonic((int)'C');
		editMenu.add(copyItem);
		pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.Event.CTRL_MASK));
		pasteItem.setText("Paste");
		pasteItem.setActionCommand("Paste");
		pasteItem.setMnemonic((int)'P');
		editMenu.add(pasteItem);
		DisplayMenu.setText("Display");
		DisplayMenu.setActionCommand("Display");
		MainMenuBar.add(DisplayMenu);
		JMenuItem9.setToolTipText("Zooming and refresh rate");
		JMenuItem9.setText("Edit Display Options");
		JMenuItem9.setActionCommand("Edit Display Options");
		DisplayMenu.add(JMenuItem9);
		DisplayMenu.add(JSeparator6);
		JCheckBoxMenuItem8.setSelected(true);
		JCheckBoxMenuItem8.setToolTipText("Always keep the entire network visible (may cause jumping)");
		JCheckBoxMenuItem8.setText("Fit Network to Screen Automatically");
		JCheckBoxMenuItem8.setActionCommand("Fit Network to Screen Automatically");
		DisplayMenu.add(JCheckBoxMenuItem8);
		JMenuItem7.setText("Fit Network to Screen Now");
		JMenuItem7.setActionCommand("Fit Network to Screen");
		DisplayMenu.add(JMenuItem7);
		DisplayMenu.add(JSeparator4);
		JCheckBoxMenuItem7.setSelected(true);
		JCheckBoxMenuItem7.setToolTipText("Refreshing the screen slows processing significantly.  Use \"Refresh Screen Now\" to refresh manually.");
		JCheckBoxMenuItem7.setText("Refresh Screen Automatically");
		JCheckBoxMenuItem7.setActionCommand("Refresh Screen Automatically");
		DisplayMenu.add(JCheckBoxMenuItem7);
		JMenuItem8.setToolTipText("Use this to refresh the screen manually");
		JMenuItem8.setText("Refresh Screen Now");
		JMenuItem8.setActionCommand("Refresh Screen Now");
		DisplayMenu.add(JMenuItem8);
		displayLightMenuItem.setToolTipText("Use this to visualize light readings");
		displayLightMenuItem.setText("Visualize Light Readings");
		displayLightMenuItem.setActionCommand("Visualize Light Readings");
		DisplayMenu.add(displayLightMenuItem);
		displayTempMenuItem.setToolTipText("Use this to visualize temperature readings");
		displayTempMenuItem.setText("Visualize Temperature Readings");
		displayTempMenuItem.setActionCommand("Visualize Temperature Readings");
		DisplayMenu.add(displayTempMenuItem);
		displayVoltageMenuItem.setToolTipText("Use this to visualize voltage readings");
		displayVoltageMenuItem.setText("Visualize Voltage Readings");
		displayVoltageMenuItem.setActionCommand("Visualize Voltage Readings");
		DisplayMenu.add(displayVoltageMenuItem);
		PacketReadersMenu.setText("Packet Readers");
		PacketReadersMenu.setActionCommand("Packet Readers");
		MainMenuBar.add(PacketReadersMenu);
		JCheckBoxMenuItem1.setSelected(true);
		JCheckBoxMenuItem1.setToolTipText("Toggle the serial port reader on and off.");
		JCheckBoxMenuItem1.setText("Serial Port");
		JCheckBoxMenuItem1.setActionCommand("Serial Port");
		PacketReadersMenu.add(JCheckBoxMenuItem1);
		JMenu6.setText("UDP Network");
		JMenu6.setActionCommand("UDP Network");
		PacketReadersMenu.add(JMenu6);
		JCheckBoxMenuItem2.setText("Collect Packets");
		JCheckBoxMenuItem2.setActionCommand("Collect Packets");
		JMenu6.add(JCheckBoxMenuItem2);
		JMenu6.add(JSeparator12);
		JMenuItem14.setText("Designate Address");
		JMenuItem14.setActionCommand("Designate Address");
		JMenu6.add(JMenuItem14);
		JMenu7.setText("TCP Network");
		JMenu7.setActionCommand("TCP Network");
		PacketReadersMenu.add(JMenu7);
		JCheckBoxMenuItem10.setText("Collect Packets");
		JCheckBoxMenuItem10.setActionCommand("Collect Packets");
		JMenu7.add(JCheckBoxMenuItem10);
		JMenu7.add(JSeparator11);
		JMenuItem15.setText("Designate Address");
		JMenuItem15.setActionCommand("Designate Address");
		JMenu7.add(JMenuItem15);
		PacketReadersMenu.add(JSeparator5);
		JCheckBoxMenuItem6.setText("PC Simulation");
		JCheckBoxMenuItem6.setActionCommand("PC Simulation");
		PacketReadersMenu.add(JCheckBoxMenuItem6);
		PacketReadersMenu.add(JSeparator10);
		JMenu5.setText("Packet History");
		JMenu5.setActionCommand("Packet History");
		PacketReadersMenu.add(JMenu5);
		JMenuItem2.setText("Start Recording");
		JMenuItem2.setActionCommand("Start Recording");
		JMenu5.add(JMenuItem2);
		JMenuItem10.setText("Stop Recording");
		JMenuItem10.setActionCommand("Stop Recording");
		JMenu5.add(JMenuItem10);
		JMenu5.add(JSeparator8);
		JMenuItem3.setText("Start Playback");
		JMenuItem3.setActionCommand("Start Playback");
		JMenu5.add(JMenuItem3);
		JMenuItem11.setText("Stop Playback");
		JMenuItem11.setActionCommand("Stop Playback");
		JMenu5.add(JMenuItem11);
		JMenu5.add(JSeparator9);
		JMenuItem12.setText("Save History");
		JMenuItem12.setActionCommand("Save History");
		JMenu5.add(JMenuItem12);
		JMenuItem13.setText("Open History");
		JMenuItem13.setActionCommand("Open History");
		JMenu5.add(JMenuItem13);
		PacketAnalyzersMenu.setText("Packet Analyzers");
		PacketAnalyzersMenu.setActionCommand("Packet Analyzers");
		MainMenuBar.add(PacketAnalyzersMenu);
		JMenu2.setText("Object Maintainer");
		JMenu2.setActionCommand("Object Maintainer");
		PacketAnalyzersMenu.add(JMenu2);
		JMenuItem4.setText("Edit Parameters");
		JMenuItem4.setActionCommand("Edit Parameters");
		JMenu2.add(JMenuItem4);
		JCheckBoxMenuItem5.setSelected(true);
		JCheckBoxMenuItem5.setText("Delete Old Nodes");
		JCheckBoxMenuItem5.setActionCommand("Delete Old Nodes");
		JMenu2.add(JCheckBoxMenuItem5);
		PacketAnalyzersMenu.add(JSeparator14);
		JMenu3.setText("Location Estimator");
		JMenu3.setActionCommand("Location Estimation");
		PacketAnalyzersMenu.add(JMenu3);
		JRadioButtonMenuItem1.setText("Polynomial Regression");
		JRadioButtonMenuItem1.setActionCommand("Polynomial Regression");
		JMenu3.add(JRadioButtonMenuItem1);
		JRadioButtonMenuItem3.setText("Time Windowing");
		JRadioButtonMenuItem3.setActionCommand("Time Windowing");
		JMenu3.add(JRadioButtonMenuItem3);
		JRadioButtonMenuItem2.setText("Kalman Filtering");
		JRadioButtonMenuItem2.setActionCommand("Kalman Filtering");
		JMenu3.add(JRadioButtonMenuItem2);
		JMenu3.add(JSeparator2);
		JRadioButtonMenuItem4.setText("Mass Springs");
		JRadioButtonMenuItem4.setActionCommand("Mass Springs");
		JMenu3.add(JRadioButtonMenuItem4);
		JRadioButtonMenuItem5.setText("Boltzmann Machine");
		JRadioButtonMenuItem5.setActionCommand("Boltzmann Machine");
		JMenu3.add(JRadioButtonMenuItem5);
		JMenu3.add(JSeparator7);
		JCheckBoxMenuItem9.setSelected(true);
		JCheckBoxMenuItem9.setToolTipText("This only works if your location analyzer runs in the background as a seperate thread");
		JCheckBoxMenuItem9.setText("Reposition Nodes Automatically");
		JCheckBoxMenuItem9.setActionCommand("Reposition Nodes Automatically");
		JMenu3.add(JCheckBoxMenuItem9);
		PacketAnalyzersMenu.add(JSeparator15);
		JMenu4.setText("Routing Analyzer");
		JMenu4.setActionCommand("Routing Analyzer");
		PacketAnalyzersMenu.add(JMenu4);
		JCheckBoxMenuItem4.setText("Show Packet Routes");
		JCheckBoxMenuItem4.setActionCommand("Show Packet Routes");
		JMenu4.add(JCheckBoxMenuItem4);
		JCheckBoxMenuItem3.setText("Show Connectivity");
		JCheckBoxMenuItem3.setActionCommand("Show Connectivity");
		JMenu4.add(JCheckBoxMenuItem3);
		JMenu8.setText("Temperature Analyzer");
		JMenu8.setActionCommand("Temperature Analyzer");
		PacketAnalyzersMenu.add(JMenu8);
		JMenuItem16.setText("Display Properties");
		JMenuItem16.setActionCommand("Display Properties");
		JMenu8.add(JMenuItem16);
		JMenu9.setText("Light Analyzer");
		JMenu9.setActionCommand("Light Analyzer");
		PacketAnalyzersMenu.add(JMenu9);
		JMenuItem17.setText("Display Properties");
		JMenuItem17.setActionCommand("Display Properties");
		JMenu9.add(JMenuItem17);
		JMenu1.setText("Actions");
		JMenu1.setActionCommand("Actions");
		MainMenuBar.add(JMenu1);
		JMenuItem5.setText("Inject Packet");
		JMenuItem5.setActionCommand("Inject Packet");
		JMenu1.add(JMenuItem5);
		JMenu1.add(JSeparator13);
		JMenuItem6.setText("Set Transmission Strength");
		JMenuItem6.setActionCommand("Set Transmission Strength");
		JMenu1.add(JMenuItem6);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		MainMenuBar.add(helpMenu);
		JMenuItem1.setText("Help");
		JMenuItem1.setActionCommand("Help");
		helpMenu.add(JMenuItem1);
		helpMenu.add(JSeparator3);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		//$$ JMenuBar1.move(168,312);
		saveButton.setIcon(saveIcon);
		newButton.setIcon(newIcon);
		cutItem.setIcon(cutIcon);
		newItem.setIcon(newIcon);
		openButton.setIcon(openIcon);
		openItem.setIcon(openIcon);
		aboutButton.setIcon(aboutIcon);
		selectButton.setIcon(selectIcon);
		handButton.setIcon(handIcon);
		zoomButton.setIcon(zoomIcon);
		fitButton.setIcon(fitIcon);
		pasteButton.setIcon(pasteIcon);
		saveItem.setIcon(saveIcon);
		pasteItem.setIcon(pasteIcon);
		copyItem.setIcon(copyIcon);
		cutButton.setIcon(cutIcon);
		copyButton.setIcon(copyIcon);
		aboutItem.setIcon(aboutIcon);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
			send_button.addActionListener(lSymAction);
			close_button.addActionListener(lSymAction);
		openItem.addActionListener(lSymAction);
		saveItem.addActionListener(lSymAction);
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		openButton.addActionListener(lSymAction);
		saveButton.addActionListener(lSymAction);
		update_params_Button.addActionListener(lSymAction);
		reset_Button.addActionListener(lSymAction);
		aboutButton.addActionListener(lSymAction);
		selectButton.addActionListener(lSymAction);
		handButton.addActionListener(lSymAction);
		zoomButton.addActionListener(lSymAction);
		fitButton.addActionListener(lSymAction);
	//	SymFocus aSymFocus = new SymFocus();
	//	MainMenuBar.addFocusListener(aSymFocus);
		JMenuItem7.addActionListener(lSymAction);
		JMenuItem4.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		JCheckBoxMenuItem5.addItemListener(lSymItem);
		JCheckBoxMenuItem9.addItemListener(lSymItem);
		JCheckBoxMenuItem7.addItemListener(lSymItem);
		JCheckBoxMenuItem1.addItemListener(lSymItem);
		JMenuItem8.addActionListener(lSymAction);
		JMenuItem9.addActionListener(lSymAction);
		displayLightMenuItem.addActionListener(lSymAction);
		displayTempMenuItem.addActionListener(lSymAction);
		displayVoltageMenuItem.addActionListener(lSymAction);
		JCheckBoxMenuItem8.addItemListener(lSymItem);
		SymChange lSymChange = new SymChange();
		JSlider1.addChangeListener(lSymChange);
		seqno = 0;
		//}}
	}

    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     * @see #JFrame1()
     */
	public MainFrame(String sTitle, PacketReciever pr)
	{
		this();
		setTitle(sTitle);
	        this.packetReceiver = pr;
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	//static public void main(String args[])
	//{
	//	try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    /*
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    */

			//Create a new instance of our application's frame, and make it visible.
	//		(new MainFrame()).setVisible(true);
	//	} 
	//	catch (Throwable t) {
	//		t.printStackTrace();
	//		//Ensure the application exits with an error condition.
	//		System.exit(1);
	//	}
	//}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
     
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	com.symantec.itools.javax.swing.icons.ImageIcon newIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon openIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon saveIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon cutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon copyIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon pasteIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon aboutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon selectIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon handIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon zoomIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon fitIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	java.awt.FileDialog saveFileDialog = new java.awt.FileDialog(this);
	java.awt.FileDialog openFileDialog = new java.awt.FileDialog(this);
	javax.swing.JPanel MainPanel = new javax.swing.JPanel();
	javax.swing.JToolBar MainToolBar = new javax.swing.JToolBar();
	javax.swing.JButton newButton = new javax.swing.JButton();
	javax.swing.JButton openButton = new javax.swing.JButton();
	javax.swing.JButton saveButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator1 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton cutButton = new javax.swing.JButton();
	javax.swing.JButton copyButton = new javax.swing.JButton();
	javax.swing.JButton pasteButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator2 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton update_params_Button = new javax.swing.JButton();
	javax.swing.JButton reset_Button = new javax.swing.JButton();
	javax.swing.JButton aboutButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator3 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JToggleButton selectButton = new javax.swing.JToggleButton();
	javax.swing.JToggleButton handButton = new javax.swing.JToggleButton();
	javax.swing.JToggleButton zoomButton = new javax.swing.JToggleButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator4 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton fitButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator5 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JSlider JSlider1 = new javax.swing.JSlider();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator6 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JLabel readingTypeLabel = new javax.swing.JLabel();
	javax.swing.JScrollPane MainScrollPane = new javax.swing.JScrollPane();
	Surge.GraphDisplayPanel GraphDisplayPanel = new Surge.GraphDisplayPanel();
	javax.swing.JMenuBar MainMenuBar = new javax.swing.JMenuBar();
	javax.swing.JMenu fileMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem newItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem openItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveAsItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu editMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem cutItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem copyItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem pasteItem = new javax.swing.JMenuItem();
	javax.swing.JMenu DisplayMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem9 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator6 = new javax.swing.JSeparator();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem8 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenuItem JMenuItem7 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator4 = new javax.swing.JSeparator();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem7 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenuItem JMenuItem8 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem displayLightMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem displayTempMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem displayVoltageMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenu PacketReadersMenu = new javax.swing.JMenu();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenu JMenu6 = new javax.swing.JMenu();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JSeparator JSeparator12 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JMenuItem14 = new javax.swing.JMenuItem();
	javax.swing.JMenu JMenu7 = new javax.swing.JMenu();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem10 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JSeparator JSeparator11 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JMenuItem15 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator5 = new javax.swing.JSeparator();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem6 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JSeparator JSeparator10 = new javax.swing.JSeparator();
	javax.swing.JMenu JMenu5 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem2 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JMenuItem10 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator8 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JMenuItem3 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JMenuItem11 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator9 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JMenuItem12 = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JMenuItem13 = new javax.swing.JMenuItem();
	javax.swing.JMenu PacketAnalyzersMenu = new javax.swing.JMenu();
	javax.swing.JMenu JMenu2 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem4 = new javax.swing.JMenuItem();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JSeparator JSeparator14 = new javax.swing.JSeparator();
	javax.swing.JMenu JMenu3 = new javax.swing.JMenu();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JSeparator JSeparator2 = new javax.swing.JSeparator();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JSeparator JSeparator7 = new javax.swing.JSeparator();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem9 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JSeparator JSeparator15 = new javax.swing.JSeparator();
	javax.swing.JMenu JMenu4 = new javax.swing.JMenu();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenu JMenu8 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem16 = new javax.swing.JMenuItem();
	javax.swing.JMenu JMenu9 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem17 = new javax.swing.JMenuItem();
	javax.swing.JMenu JMenu1 = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem5 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator13 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JMenuItem6 = new javax.swing.JMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem JMenuItem1 = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator3 = new javax.swing.JSeparator();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	com.symantec.itools.javax.swing.borders.BevelBorder bevelBorder1 = new com.symantec.itools.javax.swing.borders.BevelBorder();
	//}}

	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          "SURGE - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MainFrame.this)
				MainFrame_windowClosing(event);
		}
	}

	void MainFrame_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		MainFrame_windowClosing_Interaction1(event);
	}

	void MainFrame_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openItem)
				openItem_actionPerformed(event);
			else if (object == saveItem)
				saveItem_actionPerformed(event);
			else if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == openButton)
				openButton_actionPerformed(event);
			else if (object == saveButton)
				saveButton_actionPerformed(event);
			else if (object == update_params_Button)
				update_params_actionPerformed(event);
			else if (object == reset_Button)
				reset_actionPerformed(event);
			else if (object == send_button)
				send_button_actionPerformed(event);
			else if (object == close_button)
				close_button_actionPerformed(event);
			else if (object == selectButton)
				//selectButton_actionPerformed(event);
				;
			else if (object == handButton)
				handButton_actionPerformed(event);
			else if (object == zoomButton)
				zoomButton_actionPerformed(event);
			else if (object == fitButton)
				fitButton_actionPerformed(event);
			if (object == JMenuItem7)
				JMenuItem7_actionPerformed(event);
			else if (object == JMenuItem4)
				JMenuItem4_actionPerformed(event);
			if (object == JMenuItem8)
				JMenuItem8_actionPerformed(event);
			else if (object == JMenuItem9)
				JMenuItem9_actionPerformed(event);
			else if (object == displayLightMenuItem)
				displayLightMenuItem_actionPerformed(event);
			else if (object == displayTempMenuItem)
				displayTempMenuItem_actionPerformed(event);
			else if (object == displayVoltageMenuItem)
				displayVoltageMenuItem_actionPerformed(event);
			
			
		}
	}

	void openItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openItem_actionPerformed_Interaction1(event);
	}

	void openItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void saveItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveItem_actionPerformed_Interaction1(event);
	}

	void saveItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	void reset_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.

		//send the reset message.
		try{
        		int i = 0;
        		byte[] packet = new byte[36];

       			//address
       			packet[i] = (byte)0xff; i ++;
       			packet[i] = (byte)0xff; i ++;
       			//type and group
       			packet[i] = 26; i ++;
       			packet[i] = 0x77; i ++;
			packet[6] = seqno++;
       			//dest
        		packetReceiver.write(packet);
		}catch(Exception e){
        		e.printStackTrace();
		}
			 			
	}

	JDialog ParamDialog;
	JTextField pot;
	JTextField send_max;
	JTextField route_max;
	JTextField initial_signal_quality;
	JTextField level_cost;
	JButton send_button;
	JButton close_button;
	int pot_val;
	int send_val;
	int route_val;
	int level_cost_val;
	int initial_setting_val;
	int send_cnt;

	
	
	

	void construct_param_dialog(){
	        try {
                   {
			send_cnt = 0;
			pot_val = 10;
			send_val = 20;
			route_val = 50;
			initial_setting_val = 10;
			level_cost_val = 50;
		
                          ParamDialog = new JDialog(this);
			  ParamDialog.setSize(200,500);
			  ParamDialog.getContentPane().setLayout(new FlowLayout(FlowLayout.LEFT,0,2));
	pot = new JTextField(new Integer(pot_val).toString(), 4);
	ParamDialog.getContentPane().add(new JLabel("  pot setting:    "));
	ParamDialog.getContentPane().add(pot);
	send_max = new JTextField(new Integer(send_val).toString(), 4);
	ParamDialog.getContentPane().add(new JLabel("  send timer:    "));
	ParamDialog.getContentPane().add(send_max);
	route_max = new JTextField(new Integer(route_val).toString(), 4);
	ParamDialog.getContentPane().add(new JLabel("  route timer:    "));
	ParamDialog.getContentPane().add(route_max);
	initial_signal_quality = new JTextField(new Integer(initial_setting_val).toString(), 4);
	ParamDialog.getContentPane().add(new JLabel("  initial quality:    "));
	ParamDialog.getContentPane().add(initial_signal_quality);
	level_cost = new JTextField(new Integer(level_cost_val).toString(), 4);
	ParamDialog.getContentPane().add(new JLabel("  level cost:    "));
	ParamDialog.getContentPane().add(level_cost);
			  send_button = new JButton(" Send ");
			  close_button = new JButton(" Close ");
	
			  ParamDialog.getContentPane().add(send_button);
			  ParamDialog.getContentPane().add(close_button);
			
			  
                          ParamDialog.setModal(true);
		    }
                } catch (java.lang.Exception e) {
                }
	}




	void update_params_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		try{
		   {	 
                          ParamDialog.setVisible(true);
                   }
                } catch (java.lang.Exception e) {
                }
	}

	void send_button_actionPerformed(java.awt.event.ActionEvent event)
	{

		pot_val = new Integer(pot.getText()).intValue();
		send_val = new Integer(send_max.getText()).intValue();
		route_val = new Integer(route_max.getText()).intValue();
		initial_setting_val = new Integer(initial_signal_quality.getText()).intValue();
		level_cost_val = new Integer(level_cost.getText()).intValue();

		if(pot_val < 0) pot_val = 0;
		if(pot_val > 100) pot_val = 100;
	
		if(route_val < 5) route_val = 5;
		if(send_val < 5) send_val = 5;

		pot.setText(new Integer(pot_val).toString());
		send_max.setText(new Integer(send_val).toString());
		route_max.setText(new Integer(route_val).toString());
		initial_signal_quality.setText(new Integer(initial_setting_val).toString());
		level_cost.setText(new Integer(level_cost_val).toString());
		send_cnt ++;
                try{
                        int i = 0;
                        byte[] packet = new byte[36];

                        //address
                        packet[i] = (byte)0xff; i ++;
                        packet[i] = (byte)0xff; i ++;
                        //type and group
                        packet[i] = 25; i ++;
                        packet[i] = 0x77; i ++;

			packet[6] = seqno++;
                        packet[7] = (byte)pot_val;
                        packet[8] = (byte)send_val;
                        packet[9] = (byte)route_val;
                        packet[10] = (byte)initial_setting_val;
                        packet[12] = (byte)send_cnt;
                        packet[13] = (byte)level_cost_val;
                        packet[14] = 0;
			
                        //dest
                        packetReceiver.write(packet);

                }catch(Exception e){
                        e.printStackTrace();
                }

			 
	}

	void close_button_actionPerformed(java.awt.event.ActionEvent event)
	{
		try{
		   {	 
                          ParamDialog.setVisible(false);
                   }
                } catch (java.lang.Exception e) {
                }
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void openButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openButton_actionPerformed_Interaction1(event);
	}

	void openButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void saveButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveButton_actionPerformed_Interaction1(event);
	}

	void saveButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void aboutButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
	}

	void selectButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				selectButton.setSelected(true);
				handButton.setSelected(false);
				zoomButton.setSelected(false);
				MainClass.displayManager.SetSelectMode(true);
				MainClass.displayManager.SetHandMode(true);
				MainClass.displayManager.SetZoomMode(true);
			}
		} catch (Exception e) {
		}
	}

	void handButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		handButton_actionPerformed_Interaction1(event);
	}

	void handButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				selectButton.setSelected(false);
				handButton.setSelected(true);
				zoomButton.setSelected(false);
				MainClass.displayManager.SetSelectMode(false);
				MainClass.displayManager.SetHandMode(true);
				MainClass.displayManager.SetZoomMode(false);
			}
		} catch (Exception e) {
		}
	}

	void zoomButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		zoomButton_actionPerformed_Interaction1(event);
	}

	void zoomButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				selectButton.setSelected(false);
				handButton.setSelected(false);
				zoomButton.setSelected(true);
				MainClass.displayManager.SetSelectMode(false);
				MainClass.displayManager.SetHandMode(false);
				MainClass.displayManager.SetZoomMode(true);
			}
		} catch (Exception e) {
		}
	}

	void fitButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		fitButton_actionPerformed_Interaction1(event);
	}

	void fitButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				MainClass.mainFrame.GetGraphDisplayPanel().FitToScreen();
			}
		} catch (Exception e) {
		}
	}

	/*class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == MainMenuBar)
				MainMenuBar_focusGained(event);
		}
	}

	void MainMenuBar_focusGained(java.awt.event.FocusEvent event)
	{
		// to do: code goes here.
			 
		MainMenuBar_focusGained_Interaction1(event);
	}

	void MainMenuBar_focusGained_Interaction1(java.awt.event.FocusEvent event)
	{
		try {
			MainClass.suspend();
		} catch (java.lang.Exception e) {
		}
	}*/
	
	          //the following code was written by kamin
	public Surge.GraphDisplayPanel GetGraphDisplayPanel()
	{
		return GraphDisplayPanel;
	}

	public javax.swing.JScrollPane GetMainScrollPane()
	{
		return MainScrollPane;
	} 

	public javax.swing.JLabel GetCoordLabel()
	{
		return JLabel4;
	} 

	void JMenuItem7_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JMenuItem7_actionPerformed_Interaction1(event);
	}

	void JMenuItem4_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JMenuItem4_actionPerformed_Interaction1(event);
	}


	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == JCheckBoxMenuItem5)
				JCheckBoxMenuItem5_itemStateChanged(event);
			if (object == JCheckBoxMenuItem9)
				JCheckBoxMenuItem9_itemStateChanged(event);
			if (object == JCheckBoxMenuItem7)
				JCheckBoxMenuItem7_itemStateChanged(event);
			if (object == JCheckBoxMenuItem1)
				JCheckBoxMenuItem1_itemStateChanged(event);
			else if (object == JCheckBoxMenuItem8)
				JCheckBoxMenuItem8_itemStateChanged(event);
		}
	}

	void JCheckBoxMenuItem5_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		JCheckBoxMenuItem5_itemStateChanged_Interaction1(event);
	}

	void JCheckBoxMenuItem5_itemStateChanged_Interaction1(java.awt.event.ItemEvent event)
	{
		try {
			if(event.getStateChange() == ItemEvent.SELECTED)
			{
				MainClass.objectMaintainer.start();
			}
			else
			{
				Surge.MainClass.objectMaintainer.stop();//should be suspend.  fix it.
			}
		} catch (java.lang.Exception e) {
		}          
	}

	void JCheckBoxMenuItem9_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		JCheckBoxMenuItem9_itemStateChanged_Interaction1(event);
	}

	void JCheckBoxMenuItem9_itemStateChanged_Interaction1(java.awt.event.ItemEvent event)
	{
		try {
			if(event.getStateChange() == ItemEvent.SELECTED)
			{
				MainClass.locationAnalyzer.start();
			}
			else
			{
				MainClass.locationAnalyzer.stop();
			}
		} catch (java.lang.Exception e) {
		}          
	}

	void JCheckBoxMenuItem7_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		JCheckBoxMenuItem7_itemStateChanged_Interaction1(event);
	}

	void JCheckBoxMenuItem7_itemStateChanged_Interaction1(java.awt.event.ItemEvent event)
	{
		try {
			if(event.getStateChange() == ItemEvent.SELECTED)
			{
				Surge.MainClass.displayManager.start();
			}
			else
			{
				Surge.MainClass.displayManager.stop();
			}
		} catch (java.lang.Exception e) {
		}          
	}

	void JCheckBoxMenuItem1_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		JCheckBoxMenuItem1_itemStateChanged_Interaction1(event);
	}

	void JCheckBoxMenuItem1_itemStateChanged_Interaction1(java.awt.event.ItemEvent event)
	{
		PacketReciever reciever;
		for(Enumeration recievers = MainClass.packetRecievers.elements(); recievers.hasMoreElements();)
		{
			reciever = (PacketReciever)recievers.nextElement();
			if(reciever instanceof SerialPortPacketReciever)
			{
			try {
				if(event.getStateChange() == ItemEvent.SELECTED)
				{
					reciever.start();
				}
				else
				{
					reciever.stop();
				}
			} catch (java.lang.Exception e) {
			}          
			}
		}
	}

	void JMenuItem8_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JMenuItem8_actionPerformed_Interaction1(event);
	}

	void JMenuItem8_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			Surge.MainClass.displayManager.RefreshScreenNow();
		} catch (java.lang.Exception e) {
		}
	}

	void displayLightMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (MainClass.currentAnalyzer != MainClass.lightAnalyzer)
		{
			MainClass.currentAnalyzer.AnalyzerDisplayDisable();
			MainClass.lightAnalyzer.AnalyzerDisplayEnable();
			MainClass.currentAnalyzer = MainClass.lightAnalyzer;
			readingTypeLabel.setText("      Light Reading");
		}
	}

	void displayTempMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (MainClass.currentAnalyzer != MainClass.tempAnalyzer)
		{
			MainClass.currentAnalyzer.AnalyzerDisplayDisable();
			MainClass.tempAnalyzer.AnalyzerDisplayEnable();
			MainClass.currentAnalyzer = MainClass.tempAnalyzer;
			readingTypeLabel.setText("      Temperature Reading");
		}
	}

	void displayVoltageMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (MainClass.currentAnalyzer != MainClass.voltageAnalyzer)
		{
			MainClass.currentAnalyzer.AnalyzerDisplayDisable();
			MainClass.voltageAnalyzer.AnalyzerDisplayEnable();
			MainClass.currentAnalyzer = MainClass.voltageAnalyzer;
			readingTypeLabel.setText("      Voltage Reading");
		}
	}

	void JMenuItem9_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JMenuItem9_actionPerformed_Interaction1(event);
	}

	void JMenuItem9_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// StandardDialog Create and show as modal
			{
				StandardDialog StandardDialog1 = new StandardDialog(new DisplayManager.DisplayPropertiesPanel());
				StandardDialog1.show();
			}
		} catch (java.lang.Exception e) {
		}
	}

	void JMenuItem4_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			Surge.MainClass.objectMaintainer.ShowPropertiesDialog();
		} catch (java.lang.Exception e) {
		}
	}

	void JCheckBoxMenuItem8_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		JCheckBoxMenuItem8_itemStateChanged_Interaction1(event);
	}

	void JCheckBoxMenuItem8_itemStateChanged_Interaction1(java.awt.event.ItemEvent event)
	{
		try {
			if(event.getStateChange() == ItemEvent.SELECTED)
			{
				Surge.MainClass.mainFrame.GetGraphDisplayPanel().SetFitToScreenAutomatically(true);
			}
			else
			{
				Surge.MainClass.mainFrame.GetGraphDisplayPanel().SetFitToScreenAutomatically(false);
			}
		} catch (java.lang.Exception e) {
		}          
	}

	void JMenuItem7_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			Surge.MainClass.mainFrame.GetGraphDisplayPanel().FitToScreen();
		} catch (java.lang.Exception e) {
		}
	}
	
	class SymChange implements javax.swing.event.ChangeListener
	{
		public void stateChanged(javax.swing.event.ChangeEvent event)
		{
			Object object = event.getSource();
			if (object == JSlider1)
				JSlider1_stateChanged(event);
		}
	}

	void JSlider1_stateChanged(javax.swing.event.ChangeEvent event)
	{
		// to do: code goes here.
			 
		JSlider1_stateChanged_Interaction1(event);
	}

	void JSlider1_stateChanged_Interaction1(javax.swing.event.ChangeEvent event)
	{
		try {
			// convert int->class java.lang.String
			MainClass.displayManager.MultiplyGraphDisplayPanelSize(JSlider1.getValue());
			JLabel3.setText(java.lang.String.valueOf(JSlider1.getValue()));
		} catch (java.lang.Exception e) {
		}
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// JAboutDialog Create and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (java.lang.Exception e) {
		}
	}
}
