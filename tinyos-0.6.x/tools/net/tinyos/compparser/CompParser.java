/* Generated By:JavaCC: Do not edit this line. CompParser.java */
package net.tinyos.compparser;

import java.util.*;

public class CompParser implements CompParserConstants {
    public static class FunctionArgument {
        private String name;
        private String type;

        public FunctionArgument(String type, String name) {
            this.type = type.trim();
            this.name = name;
        }

        public boolean isTypeCompatible(FunctionArgument fa) {
            return type.equals(fa.type);
        }

        public String toString() {
            return type + " " + name;
        }
    }

    public static class FunctionSignature {
        private String rType;
        private String name;
        private Vector args;

        public FunctionSignature(String rType, String name, Vector args) {
            this.rType = rType;
            this.name = name;
            this.args = args;
        }

        public String getRType() {
            return rType;
        }

        public String getName() {
            return name;
        }

        public Vector getArgs() {
            return args;
        }

        public boolean isTypeCompatible(FunctionSignature fs) {
            if (!rType.equals(fs.rType)) {
                System.out.println("wrong return types '" + rType + "', '" + fs.rType + "'");
                return false;
            }

            if (args == null && fs.args == null)
                return true;

            if (args == null) {
                if (fs.args.size() == 1) {
                    FunctionArgument a = (FunctionArgument)fs.args.elementAt(0);
                    if (a.isTypeCompatible(new FunctionArgument("void", "")))
                        return true;
                }
            }

            if (args == null || fs.args == null) {
                System.out.println("args = " + args + ", fs.args = " + fs.args);
                return false;
            }

            if (args.size() != fs.args.size())
                return false;

            Iterator iter = args.iterator();
            Iterator fsIter = fs.args.iterator();
            while (iter.hasNext()) {
                FunctionArgument arg = (FunctionArgument)iter.next();
                FunctionArgument fsArg = (FunctionArgument)fsIter.next();

                if (!arg.isTypeCompatible(fsArg))
                    return false;
            }

            return true;
        }
    }

    public static class CompFile {
        private String name;
        private Vector accepts, handles, internal, uses, signals;

        public CompFile(String name) {
            this.name = name;
            accepts = new Vector();
            handles = new Vector();
            internal = new Vector();
            uses = new Vector();
            signals = new Vector();
        }

        public String getName() {
            return name;
        }

        public Vector getAccepts() {
            return accepts;
        }

        public Vector getHandles() {
            return handles;
        }

        public Vector getUses() {
            return uses;
        }

        public Vector getInternal() {
            return internal;
        }

        public Vector getSignals() {
            return signals;
        }

        public void addAccepts(Vector v) {
            accepts.addAll(v);
        }

        public void addHandles(Vector v) {
            handles.addAll(v);
        }

        public void addInternal(Vector v) {
            internal.addAll(v);
        }

        public void addUses(Vector v) {
            uses.addAll(v);
        }

        public void addSignals(Vector v) {
            signals.addAll(v);
        }
    }

    public static void main(String args[]) {
        CompParser parser;

        if(args.length == 0){
            System.out.println("Comp Parser Version 0.1Alpha:  Reading from standard input . . .");
            parser = new CompParser(System.in);
        }
        else if(args.length == 1){
            System.out.println("Comp Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
        try {
            parser = new CompParser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.out.println("Comp Parser Version 0.1:  File " + args[0] + " not found.");
                return ;
            }
        }
        else {
            System.out.println("Comp Parser Version 0.1Alpha:  Usage is one of:");
            System.out.println("         java CompParser < inputfile");
            System.out.println("OR");
            System.out.println("         java CompParser inputfile");
            return ;
        }
        try {
            parser.File();
            System.out.println("Comp Parser Version 0.1Alpha:  Java program parsed successfully.");
        }
        catch(Exception e){
            System.out.println("Comp Parser Version 0.1Alpha:  Encountered errors during parse.");
            e.printStackTrace();
        }
    }

  final public CompFile File() throws ParseException {
    String name;
    CompFile comp;
    Vector section;
    name = Header();
        comp = new CompFile(name);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCEPTS:
      case HANDLES:
      case USES:
      case SIGNALS:
      case INTERNAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCEPTS:
        section = Accepts();
            comp.addAccepts(section);
        break;
      case SIGNALS:
        section = Signals();
            comp.addSignals(section);
        break;
      case HANDLES:
        section = Handles();
            comp.addHandles(section);
        break;
      case USES:
        section = Uses();
            comp.addUses(section);
        break;
      case INTERNAL:
        section = Internal();
            comp.addInternal(section);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return comp;}
    throw new Error("Missing return statement in function");
  }

  final public String Header() throws ParseException {
    String moduleName;
    moduleName = ModuleNameDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JOINTLY:
    case IMPL:
      ModuleImpl();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        {if (true) return moduleName;}
    throw new Error("Missing return statement in function");
  }

  final public String ModuleNameDecl() throws ParseException {
    Token tok;
    jj_consume_token(MODULE);
    tok = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
  }

  final public void ModuleImpl() throws ParseException {
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JOINTLY:
      JointImpl();
      break;
    case IMPL:
      Impl();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tok = jj_consume_token(IDENTIFIER);
    jj_consume_token(20);

  }

  final public void JointImpl() throws ParseException {
    jj_consume_token(JOINTLY);
    jj_consume_token(IMPL);

  }

  final public void Impl() throws ParseException {
    jj_consume_token(IMPL);

  }

  final public Vector Accepts() throws ParseException {
    Vector funcList = null;
    jj_consume_token(ACCEPTS);
    jj_consume_token(21);
    funcList = FunctionList();
    jj_consume_token(22);
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Signals() throws ParseException {
    Vector funcList = null;
    jj_consume_token(SIGNALS);
    jj_consume_token(21);
    funcList = FunctionList();
    jj_consume_token(22);
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Handles() throws ParseException {
    Vector funcList = null;
    jj_consume_token(HANDLES);
    jj_consume_token(21);
    funcList = FunctionList();
    jj_consume_token(22);
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Internal() throws ParseException {
    Vector funcList = null;
    jj_consume_token(INTERNAL);
    jj_consume_token(21);
    funcList = FunctionList();
    jj_consume_token(22);
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Uses() throws ParseException {
    Vector funcList = null;
    jj_consume_token(USES);
    jj_consume_token(21);
    funcList = FunctionList();
    jj_consume_token(22);
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public Vector FunctionList() throws ParseException {
    FunctionSignature sig;
    Vector funcList;
        funcList = new Vector();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case TYPE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      sig = Function();
            funcList.add(sig);
    }
        {if (true) return funcList;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionSignature Function() throws ParseException {
    String rType;
    Token name;
    Vector args = null;
    rType = Type();
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case TYPE:
      args = ArgumentList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(24);
        {if (true) return new FunctionSignature(rType, name.image, args);}
    throw new Error("Missing return statement in function");
  }

  final public Vector ArgumentList() throws ParseException {
    Vector argList = null;
    FunctionArgument funcArg;
    if (jj_2_1(2147483647)) {
      funcArg = ArgumentEntry();
      argList = ArgumentList();
            argList.add(funcArg);
            {if (true) return argList;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case TYPE:
        funcArg = ArgumentEnd();
            argList = new Vector();
            argList.add(funcArg);
            {if (true) return argList;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionArgument ArgumentEntry() throws ParseException {
    Token name = null;
    String type;
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(25);
        {if (true) return new FunctionArgument(type, name == null ? null : name.image);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionArgument ArgumentEnd() throws ParseException {
    Token name = null;
    String type;
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
        {if (true) return new FunctionArgument(type, name == null ? null : name.image);}
    throw new Error("Missing return statement in function");
  }

  final public String Type() throws ParseException {
    Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      type = jj_consume_token(TYPE);
                   {if (true) return type.image;}
      break;
    case IDENTIFIER:
      type = jj_consume_token(IDENTIFIER);
                         {if (true) return type.image;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(25)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public CompParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  final private int[] jj_la1_0 = {0x3e00,0x3e00,0xc000,0x100000,0xc000,0x90000,0x90000,0x90000,0x10000,0x10000,0x90000,};
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CompParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CompParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CompParser(CompParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CompParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[26];
    for (int i = 0; i < 26; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
