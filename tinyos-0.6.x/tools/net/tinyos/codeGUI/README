Package: net.tinyos.codeGUI
Description: GUI and command line tools for network reprogramming.
Author: Philip Levis, Rob Szewczyk <{pal,szewczyk}@cs.berkeley.edu>

This package provides GUI and command line tools for network
reprogramming.  It will only work with motes that have TinyOS images
containing a network reprogramming component.

Executables: net.tinyos.codeGUI.CodeGUI, net.tinyos.codeGUI.CodeInjector

net.tinyos.codeGUI.CodeGUI
        usage: java net.tinyos.codeGUI.CodeGUI
        descr: A GUI for programmable networks. One can query the
        network to see which motes are present, upload a TinyOS image,
        check to see if the image was correctly installed, start the
        program installed (flash it and boot), and load files. This
        GUI is fairly outdated (it uses a deprecated command interface
        for turning LEDs on and off for demonstration of the interface
        viability). We recommend that you use the command line tool,
        which is up-to-date and being actively developed.

net.tinyos.codeGUI.CodeInjector
	usage: java.net.tinyos.codeGUI.CodeInjector

        descr: A command line tool for reprogramming mote networks. It
        has a fairly helpful "usage" message. Reprogramming a mote
        takes four steps; the first is to "new" the mote, preparing it
        for programming. One must specify a mote image (.srec) and a
        mote ID. Next, one "write"s the same .srec to the same mote
        ID. This is done once. Then one runs "check" repeatedly until
        the mote acknowledges all code capsules having arrived. Once
        all of them have arrived, the mote can be "start"ed. "id"
        allows you to query the network for which motes that have
        reprogramming installed can hear you. In addition, there is
        the "multiprog" option, which allows for reprogramming of
        multiple motes at once.


Test Programs: none



Classes:

CodeGUI.java

Top level GUI class. Uses an instance of CodeInjector for acting on
the network.

CodeInjector.java

Class that actually interfaces and communicates with the
network. CodeInjector often uses an synchronous interface to the
network; a separate Thread reads than writes. Issuing a command to the
network will return immediately, while its result might be recieved a
short time later (e.g. query).

MultihopInjector.java

Class that queries and injects code into a multihop RF network. Motes
must have the MULTIHOP_PROG component installed.

CodeGUIMenuBar.java, LogPanel.java, MoteInfo.java, MotePanel.java,
TOSFileFilter.java

Classes for the different parts of the GUI.




