#!/usr/bin/perl

open(FOO, "$ARGV[0]") or die;

sub getModuleNames{
  local (%names) = @_;
  while(<FOO>){
    if(/\};/){
      return %names;
    }
    $_;
    /(\w+);/; 
    $names{$1} = "";
  }
}

sub is_output{
  local ($names) = @_;
  @parts = split /:/, $names; 
  if($modules{@parts[0]}{"handles"}{@parts[1]}) {return 1;}
  if($modules{@parts[0]}{"accepts"}{@parts[1]}) {return 1;}
  return 0;
}


sub getFuncNames{
  local (%names) = @_;
  while(<MOD_FILE>){
    if(/\};/){
      return %names;
    }
    $_;
    /(\w+) (\w+)\((.*)\);/;
  
   # $names{$2} = [($1, $3)];
   $names{$2}{$1} = $3;
  }
  

}
sub getModuleInfo{
  my %info;
  local ($mod_name) = @_;
  open(MOD_FILE, $mod_name . ".comp") or  die "could not open " . $mod_name . ".comp\n";

  while(<MOD_FILE>){
    
    if(/^TOS_MODULE (\w+)/){
      $comp = $1;
      if($comp != $mod_name){ 
	#print $comp . + " is not equal to " . $mod_name. " \n";
	die;}
      last;
    }
  }

  
  while(<MOD_FILE>){
    
    if(/ACCEPTS\{/) {    
      $info{"accepts"} = {getFuncNames($info{"accepts"})};
    }elsif(/HANDLES\{/) {
      $info{"handles"} = {getFuncNames($info{"handles"})};
    } elsif(/SIGNALS\{/) {
      $info{"signal"} = {getFuncNames($info{"signals"})};
    } elsif(/USES\{/) {
      $info{"uses"} = {getFuncNames($info{"uses"})};
    }    
  }
  return %info;
}




while(<FOO>){
  if(/^include modules\{/){
    last;
  }
}

%modules = getModuleNames();
 
foreach $comp (sort keys %modules){
#read in the module information
 # print $comp. "\n";
  $modules{$comp} = {getModuleInfo($comp)};

}






#generate a array where each element in the array is an
#array of the funcitons on a logical net
#keep a hash of all know entries.

while(<FOO>){
  chop;
  push @mapping_lines, ($_);
}


 
$net_number = 1;
%net_hash;
foreach $map_line (@mapping_lines){
  $this_net_num = 0;
#  print $map_line . " " . $this_net_num . "\n";
#split the lines
  @names = split / /, $map_line;
  foreach $func (@names){
#    search for a net number for any of these values
    if($net_hash{$func}){
      $this_net_num = $net_hash{$func};
      last;
    }
#    print "\t". $func ."\n";
  }
  if($this_net_num == 0){
    $this_net_num = $net_number;
    $net_number ++;
  }
#  print "got net number " . $this_net_num . "\n";
#  %net_list =  %{$list{$this_net_num}};
  foreach $func (@names) {
    $net_hash{$func} = $this_net_num;
    $list{$this_net_num}{$func} = 1;
#    print "net number:" . $this_net_num . "\n";
#    foreach $val  (keys %{$list{$this_net_num}}){
#      print "\t" .$val . " \n";
#    }
#    print "\n";
  }
}


print "\#ifndef SUPER_H\n";
print "\#define SUPER_H\n";
print "\#include \"tos.h\"\n";




foreach $net_num  (sort keys %list){
  $num_pins_on_net = scalar((keys %{$list{$net_num}}));
#  print $net_num . "\n" . scalar((keys %{$list{$net_num}})) . "\n";
#  foreach $val  (keys %{$list{$net_num}}){
#    print $val . " ";
#  }

  if($num_pins_on_net <= 1) {next};
 

  $num_outputs = 0;
  $outputs = "";
  foreach $val  (keys %{$list{$net_num}}){
    if(is_output($val) == 1) {
      $num_outputs ++;
      $outputs{$net_num}{$val} = 1;      
    }
  }
#  print "number of outputs " . $num_outputs . "\n";
  if($num_outputs == 1) {
#      print "define needed \n";
    foreach $dest_num  (keys %{$outputs{$net_num}}){
      foreach $val  (keys %{$list{$net_num}}){
	split /:/, $val;
	$check = @_[1];
	split /:/, $dest_num;
	$res = @_[1];
	if($check ne $dest_num){
	  print "#define " . $check . " " . $res . "\n";
	}
      }
    }
  }else{
      foreach $val  (keys %{$outputs{$net_num}}){
      
      split /:/, $val;
      $check = @_[1];
      $mod = @_[0];
      
      foreach $ret_val  (keys %{$modules{$mod}{"accepts"}{$check}}){
	print $ret_val . " " . $check . "(" . $modules{$mod}{"accepts"}{$check}{$ret_val} . ");\n";
	 $return_type = $ret_val;
	  $args = $modules{$mod}{"accepts"}{$check}{$ret_val};
      }
    }
    print "static inline " . $return_type . " dispatch__NET_" . $net_num . "(" . $args . "){\n";
    if($return_type ne "void"){
      print $return_type . " retval;\n";
    }
 
      $_ = $args;
      if(/([\w\*]+)\s([\w\*]+)(,\s([\w\*]+)\s([\w\*]+))?/){
	
	$args_names = $2;
      
	$_ = $3;
      }
    while(/,\s([\w\*]+)\s([\w\*]+)(,\s([\w\*]+)\s([\w\*]+))?/){
      $args_names .= ", $2";
      $_ = $3;
    }


    foreach $val  (keys %{$outputs{$net_num}}){
      
      split /:/, $val;
      $check = @_[1];
      $mod = @_[0];
      
      foreach $ret_val  (keys %{$modules{$mod}{"accepts"}{$check}}){

	if($return_type ne "void"){
	  print "retval = ";
	}
	print $check . "(" . $args_names. ");\n";
      }
    }
    if($return_type ne "void"){
      print "return retval;\n";
    }
    print "}\n";


    
      
    
    foreach $val  (keys %{$list{$net_num}}){
      split /:/, $val;
      $check = @_[1];
      split /:/, $dest_num;
      $res = @_[1];
      if(not($outputs{$net_num}{$val})){
	print "#define " . $check . " dispatch__NET_" . $net_num . "\n";
      }
    }
  }
}



 
print "\#endif;\n"



