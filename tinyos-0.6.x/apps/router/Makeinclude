#-*-Makefile-*-
######################################################################
#
# Main makefile for TOS applications.
#
# Created: 7/20/2001,  Rob von Behren <jrvb@cs.berkeley.edu>
#
#
# To use this, applications need to simply include this file from
# within their own Makefiles.  No other rules should be necessary for
# most applications.
#
# ADDING NEW TARGET PLATFORMS.  This file is organized with the aim to
# make adding new hardware platforms relatively straightforward.
# There are several places below marked with a "HARDWARE PLATFORM"
# comment, describing what needs to be done.
#
######################################################################

# FIXME: determine this automatically
DEFAULT_LOCAL_GROUP = 0xAD

# If you would like to change from the default sensor board
# Choice: micasb or basic
#SENSORBOARD=basic

# output directories
# HARDWARE PLATFORM: add new output directories here
RENEBIN     = binrene
MICABIN     = binmica
PCBIN       = binpc
GENSRC      = gensrc
WORKINGDIRS = $(RENEBIN) $(PCBIN) $(GENSRC) $(MICABIN)

#CFLAGS += -DBASE_STATION
BASEDIR = ../../..
TOOLS   = $(BASEDIR)/tools
TOS     = $(BASEDIR)/tos
SYSTEM  = $(TOS)/system
PLATFORM_DIR_RENE  = $(TOS)/platform/rene
PLATFORM_DIR  = $(TOS)/platform/rene
SHARED  = $(TOS)/shared
INCLUDE = -I. -I$(GENSRC) -I$(TOS)/include

AM_DISPATCH_MAP = $(TOS)/include/AM_DISPATCH.mapping

PROGRAMER      = uisp
WIN_PROGRAMER  = $(TOOLS)/mote_prog.exe
SET_ID         = $(TOOLS)/munge_srec



######################################################################
# specific defines for different hardware platforms
######################################################################
# HARDWARE PLATFORM: add defs for new platforms below.  Note that the
# name of the binary (main vs main.exe) is used to determine which
# build rule to use.  This should probably be fixed to do something a
# bit nicer in the future.

# the names for the different hardware targets
HARDWARE_TARGETS = pc rene mica

# determine the requested platform from the make command line args.
# Note that only one platform may be built at a time.
ifneq ($(patsubst pc,,$(MAKECMDGOALS)), $(MAKECMDGOALS)) 
    PLATFORM=pc
    PLATFORM_DEFAULT_OBJS = $(PLATFORM_DIR)/dbg.o $(PLATFORM_DIR)/events.o \
        $(PLATFORM_DIR)/heap_array.o $(PLATFORM_DIR)/event_queue.o \
        $(PLATFORM_DIR)/external_comm.o $(PLATFORM_DIR)/rfm_model.o \
        $(PLATFORM_DIR)/rfm_space_model.o $(PLATFORM_DIR)/hardware.o
    PLATFORM_DIR  = $(TOS)/platform/pc
    ifeq ($(SENSORBOARD),)
      SENSORBOARD = micasb
    endif
    INCLUDE = -I. -I$(GENSRC) -I$(TOS)/include -I$(PLATFORM_DIR) -I$(PLATFORM_DIR)/include -I$(TOS)/platform/sensorboard/$(SENSORBOARD)/include
endif
ifneq ($(patsubst rene,,$(MAKECMDGOALS)), $(MAKECMDGOALS)) 
    PLATFORM=rene
    PLATFORM_DIR  = $(TOS)/platform/rene
    ifeq ($(SENSORBOARD),)
      SENSORBOARD = basic
    endif
    INCLUDE = -I. -I$(GENSRC) -I$(TOS)/include -I$(PLATFORM_DIR) -I$(PLATFORM_DIR)/include -I$(TOS)/platform/sensorboard/$(SENSORBOARD)/include
endif

ifneq ($(patsubst mica,,$(MAKECMDGOALS)), $(MAKECMDGOALS)) 
    PLATFORM=mica
    PLATFORM_DIR  = $(TOS)/platform/mica
    ifeq ($(SENSORBOARD),)
      SENSORBOARD = micasb
    endif
    INCLUDE = -I. -I$(GENSRC) -I$(TOS)/include -I$(PLATFORM_DIR) -I$(PLATFORM_DIR)/include -I$(TOS)/platform/sensorboard/$(SENSORBOARD)/include
endif

# make sure that we have a valid platform name, and define build vars
GOODPLATFORM = no
ifeq ($(PLATFORM),rene)
	MCU=at90s8535
    AS     = avr-as
    LD     = avr-gcc -Xlinker -M   -mmcu=$(MCU) 
    CC     = avr-gcc 
    OBJCOPY= avr-objcopy
    CFLAGS = -c -Os -Wall $(INCLUDE) -mmcu=$(MCU) -DDEFAULT_LOCAL_GROUP=$(DEFAULT_LOCAL_GROUP)
    BINDIR = $(RENEBIN)
    BINARY = $(BINDIR)/main.exe
    GOODPLATFORM = yes
endif

ifeq ($(PLATFORM),mica)
	MCU=atmega103
    AS     = avr-as
    LD     = avr-gcc -Xlinker -M   -mmcu=$(MCU) 
    CC     = avr-gcc 
    OBJCOPY= avr-objcopy
    CFLAGS = -c -Os -Wall $(INCLUDE) -mmcu=$(MCU) -DDEFAULT_LOCAL_GROUP=$(DEFAULT_LOCAL_GROUP)
    BINDIR = $(MICABIN)
    BINARY = $(BINDIR)/main.exe
    GOODPLATFORM = yes
endif

ifeq ($(PLATFORM),pc)
    AS     = as
    LD     = gcc
    CC     = gcc 
    CFLAGS = -c -O3 -g -Wall $(INCLUDE) -DTOSSIM -DFULLPC -DDEFAULT_LOCAL_GROUP=$(DEFAULT_LOCAL_GROUP)
    BINDIR = $(PCBIN)
    BINARY = $(BINDIR)/main
    GOODPLATFORM = yes
endif

# no platform needed for make clean
ifeq ($(MAKECMDGOALS),clean)
    GOODPLATFORM = yes
endif 



######################################################################
######################################################################
##                                                                  ##
##                      Begin main rules                            ##
##                                                                  ##
######################################################################
######################################################################


all:
	$(MAKE) mica
	$(MAKE) rene

ifeq ($(GOODPLATFORM),no)
ifneq (all,$(MAKECMDGOALS))
ifneq (,$(MAKECMDGOALS))
    $(error Unknown platform specified - $(MAKECMDGOALS))
endif
endif
endif


$(HARDWARE_TARGETS): $(GENSRC) $(BINDIR) $(GENSRC)/am_dispatch.h $(BINARY)


# make missing directories
$(WORKINGDIRS):
	mkdir $@

ifeq (,$(DESC)) 
DESC = $(wildcard *.desc)
ifeq (,$(DESC)) 
$(error No .desc file found!!)
endif
endif

SCHEMA = $(wildcard $(subst desc,schema,$(DESC)))
ifeq (x_$(SCHEMA), x_)
    SCHEMA = $(GENSRC)/$(subst desc,schema,$(DESC))
endif

ACCESSORS = $(subst desc,c,$(DESC))






$(SYSTEM)/AMdispatch.c: $(OBJS) $(SYSTEM)/AM.h $(SYSTEM)/AMdispatch.template
	(cpp -I. -I$(INCLUDE) $(SYSTEM)/AMdispatch.template | grep -v NULL_FUNC > $@) >& /dev/null


$(GENSRC)/super.h: $(GENSRC) $(SCHEMA) $(GENSRC)/moteschema.h $(DESC)
	$(TOOLS)/mksuper_desc $(DESC) $(SYSTEM) $(PLATFORM_DIR) $(SHARED) ../shared > $@


$(SCHEMA):
	touch $(SCHEMA)


$(GENSRC)/am_dispatch.h: $(GENSRC) $(GENSRC)/super.h
	$(TOOLS)/mk_amdisp $(AM_DISPATCH_MAP) $(INCLUDE) > $@


$(GENSRC)/Makefile.objs: $(GENSRC) $(SCHEMA) $(GENSRC)/moteschema.h $(DESC)
	$(TOOLS)/desc2objs $(DESC) $(SYSTEM) $(PLATFORM_DIR) $(SHARED) ../shared > $@


$(GENSRC)/moteschema.h: $(GENSRC) $(SCHEMA) $(TOOLS)/parseschema
	if (test -f $(ACCESSORS)) then \
		echo FIX_THIS $(TOOLS)/parseschema $(SCHEMA) $@ $(ACCESSORS) ACCESSORS.c; \
		touch $@; \
	else \
		touch $@; \
	fi 


$(TOOLS)/parseschema:
	make -C $(TOOLS)




ifneq ($(MAKECMDGOALS),clean)
include $(GENSRC)/Makefile.objs
endif


SHARED_OBJS = $(addprefix $(BINDIR)/, $(subst $(SHARED)/,,$(filter $(SHARED)/%,$(PARSED_OBJS))))
SYSTEM_OBJS = $(addprefix $(BINDIR)/, $(subst $(SYSTEM)/,,$(filter $(SYSTEM)/%,$(PARSED_OBJS))))
SHARED_LOCAL_OBJS = $(addprefix $(BINDIR)/, $(subst ../shared/,,$(filter ../shared/%,$(PARSED_OBJS))))
LOCAL_OBJS = $(addprefix $(BINDIR)/, $(subst ./,,$(filter ./%,$(PARSED_OBJS))))
PLATFORM_OBJS = $(addprefix $(BINDIR)/, $(subst $(PLATFORM_DIR_RENE)/,,$(filter $(PLATFORM_DIR_RENE)/%,$(PARSED_OBJS))))
OBJS = $(SHARED_OBJS) $(SYSTEM_OBJS) $(BINDIR)/sched.o $(PLATFORM_OBJS) $(LOCAL_OBJS) $(PLATFORM_DEFAULT_OBJS) $(SHARED_LOCAL_OBJS)

%.h : %.comp
	$(TOOLS)/mkheader $< > $@

$(SHARED_OBJS) : $(BINDIR)/%.o : $(SHARED)/%.c $(SHARED)/%.h
	$(CC) $(CFLAGS) -o $@ $<

$(SYSTEM_OBJS) : $(BINDIR)/%.o : $(SYSTEM)/%.c $(SYSTEM)/%.h
	$(CC) $(CFLAGS) -o $@ $<

$(LOCAL_OBJS) : $(BINDIR)/%.o : ./%.c ./%.h
	$(CC) $(CFLAGS) -o $@ $<

$(SHARED_LOCAL_OBJS) : $(BINDIR)/%.o : ../shared/%.c ../shared/%.h
	$(CC) $(CFLAGS) -o $@ $<

$(PLATFORM_DEFAULT_OBJS) : $(PLATFORM_DIR)/%.o : $(PLATFORM_DIR)/%.c 
	$(CC) $(CFLAGS) -o $@ $<

$(PLATFORM_OBJS) : $(BINDIR)/%.o : $(PLATFORM_DIR)/%.c $(PLATFORM_DIR)/%.h
	$(CC) $(CFLAGS) -o $@ $<

$(BINDIR)/sched.o : $(BINDIR)/%.o : $(SYSTEM)/%.c
	$(CC) $(CFLAGS) -o $@ $<

$(BINDIR)/dbg.o : $(BINDIR)/%.o : $(SYSTEM)/%.c
	$(CC) $(CFLAGS) -o $@ $<



# FIXME: generate dependancy files for the .c files
# FIXME: put appropriate dependancies on the Makefile itself 



# -dlpt3 required for IBM thinkpad.  Remove on other platforms
install: main.srec
	$(PROGRAMER) -dapa -dno-poll --erase 
	$(PROGRAMER) -dapa --upload if=$<
	$(PROGRAMER) -dapa -dno-poll --verify if=$<

install.%: main.srec
	$(SET_ID) main `echo $@ |sed 's:install.::g'`
	$(PROGRAMER) -dapa -dno-poll --erase 
	$(PROGRAMER) -dapa --upload if=out.srec
	$(PROGRAMER) -dapa -dno-poll --verify if=out.srec


install_windows: main.srec
	$(WIN_PROGRAMER) --erase --speed 124 --upload $<

install_windows.%: main.srec
	$(SET_ID) main `echo $@ |sed 's:install_windows.::g'`
	$(WIN_PROGRAMER) --erase --speed 124 --upload out.srec

%.srec : %.exe
	$(OBJCOPY) --output-target=srec $< $@


# HARDWARE PLATFORM: For the time being, these two rules correspond to
# building for the rene and building for the PC.  It may be necessary
# to add specific build rules for different platforms when new ones
# are added.
$(BINDIR)/main.exe: $(OBJS)
	$(LD) -o $@ $(OBJS) > $(BINDIR)/img.file
	grep _e $(BINDIR)/img.file | grep =\.

$(BINDIR)/main: $(OBJS)
	$(LD) -o $@ $(OBJS)



clean:
	rm -rf $(WORKINGDIRS)


