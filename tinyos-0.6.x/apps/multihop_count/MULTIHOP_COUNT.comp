/**
 * MULTIHOP_COUNT.comp
 *
 * "Copyright (c) 2001 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
Component to count the number of motes within the multihop radius of the
current mote.  Counting works as follows:

- Every time interval t
	if we are counting:
		- accumulate counts from children
		- at a random time in t, report the sum of the counts of children + 1 from time interval t-1
	begin counting if we receive a MULTIHOP_COUNT_COUNT_MSG
	determine children as node with an id == our_id + 1
	set our_id == smallest id in any count message + 1
	
	in the steady state, this should produce an accurate count


@author sbien,smadden
@am 47
@msg_size ?
@requires #undef TINY in CLOCK.comp

 */

TOS_MODULE MULTIHOP_COUNT;

ACCEPTS {
 char MULTIHOP_COUNT_INIT();
 char MULTIHOP_COUNT_START();
};

SIGNALS {
};

USES {
	char MULTIHOP_COUNT_INIT_SUB();
	char MULTIHOP_COUNT_CLOCK_INIT(char data, char scale);

	char MULTIHOP_COUNT_CLOCK_SET_TIME(int clock);
	char MULTIHOP_COUNT_CLOCK_GET_TIME(int *clock);

	char MULTIHOP_COUNT_SUB_SEND_MSG(short addr,char type, TOS_MsgPtr data);

	char MULTIHOP_COUNT_LEDy_on();
	char MULTIHOP_COUNT_LEDy_off();
	char MULTIHOP_COUNT_LEDr_on();
	char MULTIHOP_COUNT_LEDr_off();
	char MULTIHOP_COUNT_LEDg_on();
	char MULTIHOP_COUNT_LEDg_off();

	unsigned int MULTIHOP_COUNT_NEXT_RAND();
};

HANDLES {
	TOS_MsgPtr MULTIHOP_COUNT_COUNT_MSG(TOS_MsgPtr msg);
	char MULTIHOP_COUNT_SUB_MSG_SEND_DONE(TOS_MsgPtr msg);
	void MULTIHOP_COUNT_CLOCK_EVENT();
	TOS_MsgPtr MULTIHOP_COUNT_STOP_COUNT(TOS_MsgPtr msg);
};

INTERNAL {
	char MULTIHOP_COUNT_GET_REMAINING_TIME();
};
