/*									tab{4
 *  MAGS.comp
 *
 * "Copyright (c) 2000 and The Regents of the University 
 * of California.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Authors:  Jason Hill
 * Date:     Oct. 3, 2000
 *
 *
 *  This componet turns the rene mote into a low quality oscillascope.  It was
 *  originally written to explore the sensitivity of the magnetometer.  It takes
 *  sensor readings in a 512 samples/second and sends the readings out over the UART.
 *
 *  The sensor readings can then be analyzed on the PC. Additionally, the sensor values 
 *  are sent through a basic low pass filter step on the mote.  If there is a signifinant
 *  change in the sensor reading, then the mote will blink it led. 
 * 
 *  The sensor readings are double buffered on the mote so that while a buffer is being sent 
 *  out over the UART, a second buffer is being filled with data.  The CPU can perform much 
 *  more than 512 samples per second. The main limitation is the I/O bandwith out of the device
 *  in this case, the UART. 
 *
 *  There is a DATA_PORT definition that sets the data port that is being read from the ADC.
 *  If you change this value, make sure that the ADC event for that port is
 *  wired to the MAGS_DATA_EVENT.
 *
 */

TOS_MODULE TRAFFIC;

ACCEPTS{
	char TRAFFIC_INIT(void);
	char TRAFFIC_START(void);
};

SIGNALS{
};

HANDLES{
	void TRAFFIC_CLOCK_EVENT(void);
	char TRAFFIC_CHANNEL1_DATA_EVENT(int data);
	char TRAFFIC_CHANNEL2_DATA_EVENT(int data);
	char TRAFFIC_SUB_MSG_SEND_DONE(TOS_MsgPtr msg);
	TOS_MsgPtr mags_msg(TOS_MsgPtr data);
	TOS_MsgPtr TRAFFIC_READ_MSG(TOS_MsgPtr data);
	TOS_MsgPtr TRAFFIC_TIME_UPDATE_MSG(TOS_MsgPtr data);
	TOS_MsgPtr TRAFFIC_RESET(TOS_MsgPtr data);
        TOS_MsgPtr TRAFFIC_START_TO_SEND(TOS_MsgPtr msg);     
	char TRAFFIC_WRITE_LOG_DONE(char success);
	char TRAFFIC_READ_LOG_DONE(char* data, char success);
};

USES{
	char TRAFFIC_SUB_INIT();
	char TRAFFIC_CLOCK_INIT(char interval, char scale);
	char TRAFFIC_SUB_SEND_MSG(short addr,char type, TOS_MsgPtr data);
	char TRAFFIC_SUB_PWR(char pwr);
	char TRAFFIC_GET_DATA(char port);
	char TRAFFIC_LEDy_on();
	char TRAFFIC_LEDy_off();
	char TRAFFIC_LEDr_on();
	char TRAFFIC_LEDr_off();
	char TRAFFIC_LEDg_on();
	char TRAFFIC_LEDg_off();
    	char TRAFFIC_APPEND_LOG(char* data);
    	char TRAFFIC_READ_LOG(int line, char* data);
};

