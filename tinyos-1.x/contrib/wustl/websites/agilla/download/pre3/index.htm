<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<h1>Older Versions of Agilla</h1>
<p>Agilla comes in two parts: The NesC code that is installed on the motes,
  and the Java code that runs on the PC and allows the user to inject agents
  into the sensor network. See the <a href="../docs/tutorials/getting_started.htm">tutorial</a> for
  installation instructions.</p>
<ul>
  <li><strong>11-30-2004 Version 1.2</strong> - <a href="Agilla_NesC_v1.2.zip">NesC</a>, <a href="Agilla_Java_v1.2.zip">Java</a><br>
      <em>Comments: This is the version I used to write the paper that is under
      submission to IPSN SPOTS.<br>
                  <br>
    Issues: The pc can access the tuplespace on mote (0,0), but there is no clean
    interface for this yet. The pc cannot register reactions as of yet. The agents
    on the laptop cannot register reactions on tuplespaces within the WSN.</em></li>
  <li><strong>03-21-2005 Version 1.3 - </strong><a href="Agilla-NesC_v1.3.zip">NesC</a>, <a href="Agilla_Java_v1.3.zip">Java</a><strong><br>
    </strong><em>Comments: This version removes instruction shiftl and shiftr
    and replaces them with mul (multiply) and div (divide). Agents can perform
    remote tuplespace operations on the laptop's tuple space by using location
    (uart_x, uart_y). <br>
                  <br>
    Issues: The RMI code for allowing remote access to the laptop's tuple space
    has not been implemented yet.</em></li>
  <li><strong>03-23-2005 Version 1.4</strong> <strong> - </strong><a href="Agilla-NesC_v1.4.zip">NesC</a>, <a href="Agilla_Java_v1.4.zip">Java</a><strong></strong><em><strong><br>
    </strong><em>Comments: Fixed the tuple space and modified assembler to report
    line numbers in errors.</em></em></li>
  <li><strong>03-24-2005 Version 1.5</strong> - <a href="Agilla-NesC_v1.5.zip">NesC</a>, <a href="Agilla_Java_v1.5.zip">Java</a><em><br>
    Comments: Fixed a bug preventing agents in the WSN from inserting tuples
        into the laptop's tuple space. Added an Oscilloscope example to demonstrate
        how a Java application running on the laptop can access the laptop's
        tuple space.</em></li>
  <li><strong>03-30-2005 Version 1.6</strong> - <a href="Agilla-NesC_v1.6.zip">NesC</a>, <a href="Agilla_Java_v1.6.zip">Java</a><em><em><br>
    Comments: Fixed a bug in OPcompare preventing comparisons between variables
          of two different types. Now, whenever you try to compare two variables
          of different types, the condition code will always be set to 0.<br>
          <br>
    Issues: Linux's timing seems to be different from Windows resulting in agents
    being corrupted when injected. To solve this, open &lt;agilla&gt;/types/MigrationMsgs.h,
    uncomment lines 63-66, and comment out lines 77-84.</em></em></li>
  <li><strong>05-17-2005 Version 2.0</strong> - <a href="Agilla-NesC_v2.0.zip">NesC</a>, <a href="Agilla_Java_v2.0.zip">Java</a><br>
      <em>Comments:<br>
    1) The grid size can be changed using the AgentInjector (you no longer have
    to reprogram all the motes to change the grid size)
    <p>2) When specifying the grid size, you only specify the number of columns
      (you no longer need to specify the number of rows). The node&#8217;s TinyOS
      address still determines the mote&#8217;s location. Mote 0 is at (1,1)
      located at the lower-left corner of the grid. TinyOS address&#8217;s increase
      in row major order.</p>
    <p>3) A mote&#8217;s location can be changed using the AgentInjector (you
      no longer need to reprogram the mote to change its address/location). The
      original ID of the mote is always used to specify which mote to modify,
      e.g., &#8220;move mote 1 to location (2,3).&#8221;</p>
    <p>4) The AgentInjector enters a modal state for ~3 seconds after a reset
      to allow the network components to reinitialize themselves. This is especially
      critical now that I&#8217;m sending the base station a message immediately
      after it resets telling it that it is a base station.</p>
    <p>5) The nodes periodically broadcast a beacon, neighbor discovery is done
      by each node</p>
    <p>6) The base station can be any node in the network. It no longer has a
      special address. There can be multiple base stations. Base stations can
      also move, their location is set like any other node using the AgentInjector.</p>
    <p>7) Since the location of a base station is no longer known by the non-base
      station nodes, Agilla no longer performs multi-hop routing to (uart_x,
      uart_y). Only the base station can perform a remote tuple space operation
      to (uart_x, uart_y). It is now up to the application to route messages
      to the base station. If an agent knows the location of the base station,
      Agilla can still perform the greedy multi-hop routing to it.</p>
    </em></li>
  <li>
    <p><strong>05-25-2005 Version 2.1 -</strong> <a href="Agilla-NesC_v2.1.zip">NesC</a>, <a href="Agilla_Java_v2.1.zip">Java</a><br>
        <em>Comments: This version fixes a bug that prevented you from moving
        a mote more than once. It also changes the &quot;reset all&quot; function
        to only reset nodes that are reachable from the base station that broadcasted
        the reset message.</em> </p>
  </li>
  <li>
    <p><strong>07-14-2005 Version 2.2</strong> - <a href="Agilla-NesC_v2.2.zip">NesC</a>, <a href="Agilla_Java_v2.2.zip">Java</a><em><br>
      Comments: Reduced memory usage to avoid stack overflow when large agents
          are injected.</em></p>
  </li>
</ul>

</body>
</html>
