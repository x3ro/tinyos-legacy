/*
 * Copyright (c) 2003, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */



package net.tinyos.mcenter;

/**
 * The AppLoasder is the application in the MessageCenter wich is capabale to load
 * other applications. It also maintains a list of application loaded previously.
 * @author Andras Nadas
 */
public class AppLoader extends MessageCenterInternalFrame {

    private java.util.prefs.Preferences prefs  = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
    private java.util.prefs.Preferences permanentStorage;
    private java.util.prefs.Preferences commentStorage;
        
    javax.swing.DefaultListModel moduleListModel = new javax.swing.DefaultListModel();

    
    /** Creates new form AppLoader */
    public AppLoader(String[] args) {
        super("App Loader");
        initComponents();
        setClosable(false);
        moduleList.setCellRenderer(new ListItemRenderer());
        permanentStorage = prefs.node(prefs.absolutePath()+"/AppLoader");
        
        loadModulList();
        moduleList.addListSelectionListener(new AppLoader.ModuleListSelectionListener());
        moduleList.addMouseListener(new java.awt.event.MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent e){
                if(e.getClickCount() == 2){
                    startModule(((ModuleListItem)moduleList.getSelectedValue()).className);
                }
            }
        });
        
        for(int i=0; i<args.length; i++) {
        	startModule(args[i]);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        moduleList = new javax.swing.JList(moduleListModel);
        classTextField = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("App Loader");
        jPanel1.setLayout(new java.awt.GridBagLayout());

        moduleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(moduleList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        classTextField.setText("net.tinyos.mcenter.");
        classTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        jPanel1.add(classTextField, gridBagConstraints);

        loadButton.setText("LoadApp");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(loadButton, gridBagConstraints);

        removeButton.setText("Remove Form List");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(removeButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        setSize(new java.awt.Dimension(320, 299));
    }//GEN-END:initComponents

    private void classTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classTextFieldActionPerformed
        loadButtonActionPerformed(evt);
    }//GEN-LAST:event_classTextFieldActionPerformed
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int index = moduleList.getSelectedIndex();
        ModuleListItem delItem = (ModuleListItem) moduleListModel.get(index);
        moduleListModel.remove(index);
        permanentStorage.remove(delItem.name);
        //saveModulList();
        
        int size = moduleListModel.getSize();
        
        
        if (size == 0) {
            removeButton.setEnabled(false);
            
            //Adjust the selection
        } else {
            //removed item in last position
            if (index == moduleListModel.getSize())
                index--;
            //otherwise select same index
            moduleList.setSelectedIndex(index);
        }
        
    }//GEN-LAST:event_removeButtonActionPerformed
    
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        /*Class module;
        String className = this.classTextField.getText();*/
        startModule(this.classTextField.getText());
        /*String name;
        
        if(isModulInList(className))
            return;
        
        try{
            System.out.println("Loading Module...");
            module = Class.forName(className);
            Object instance = module.newInstance();
            if(instance instanceof net.tinyos.mcenter.MessageCenterInternalFrame){
                ((MessageCenterInternalFrame)instance).focus();
            }
            System.out.println("\""+ module.getName()+ "\" has been Succefully loaded!" );
            
            name = module.getName().substring(module.getName().lastIndexOf('.')+1);
            
            
            int index = moduleList.getSelectedIndex();
            int size = moduleListModel.getSize();
            
            //If no selection or if item in last position is selected,
            //add the line to end of list, and select it
            if (index == -1 || (index+1 == size)) {
                moduleListModel.addElement(new ModuleListItem(name,className));
                moduleList.setSelectedIndex(size);
                
                //Otherwise insert the new line after the current selection,
                //and select it
            } else {
                moduleListModel.addElement(new ModuleListItem(name,className));
                moduleList.setSelectedIndex(index+1);
            }
            removeButton.setEnabled(true);
            permanentStorage.put(name,className.trim());
            //saveModulList();
            
        }catch(LinkageError le){
            System.err.println("Could not Link module: " + le.toString());
        }catch(ClassNotFoundException cnfe){
            System.err.println("Could not Found module: " + cnfe.toString());
        }catch(IllegalAccessException iae){
            System.err.println("Illegal Access in module: " + iae.toString());
        }catch(InstantiationException ie){
            System.err.println("Could not Instatiate module: " + ie.toString());
        }catch(SecurityException se){
            System.err.println("Security error in module: " + se.toString());
        }
        
        */
    }//GEN-LAST:event_loadButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JList moduleList;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
    
    protected Object startModule(String className){
        Class module;
        String name;
        Object instance = null;
        try{// Load The module
            System.out.println("Loading Module...");
            module = Class.forName(className);
            instance = module.newInstance();
            if(instance instanceof net.tinyos.mcenter.MessageCenterInternalFrame){
                ((MessageCenterInternalFrame)instance).focus();
            }
            System.out.println("\""+ module.getName()+ "\" has been Succefully loaded!" );
        }catch(LinkageError le){
            System.err.println("Could not Link module: " + le.toString());
            return null;
        }catch(ClassNotFoundException cnfe){
            System.err.println("Could not Found module: " + cnfe.toString());
            return null;
        }catch(IllegalAccessException iae){
            System.err.println("Illegal Access in module: " + iae.toString());
            return null;
        }catch(InstantiationException ie){
            System.err.println("Could not Instatiate module: " + ie.toString());
            return null;
        }catch(SecurityException se){
            System.err.println("Security error in module: " + se.toString());
            return null;
        }
        // If we get here the module can be loaded and a new instance is created
        // Check if the module has to be added to the modul list
        if(!isModulInList(className)){
            name = module.getName().substring(module.getName().lastIndexOf('.')+1);
            
            
            int index = moduleList.getSelectedIndex();
            int size = moduleListModel.getSize();
            
            //If no selection or if item in last position is selected,
            //add the line to end of list, and select it
            if (index == -1 || (index+1 == size)) {
                moduleListModel.addElement(new ModuleListItem(name,className));
                moduleList.setSelectedIndex(size);
                
                //Otherwise insert the new line after the current selection,
                //and select it
            } else {
                moduleListModel.addElement(new ModuleListItem(name,className));
                moduleList.setSelectedIndex(index+1);
            }
            removeButton.setEnabled(true);
            permanentStorage.put(name,className.trim());
        }
            
        return instance;
    }
    
    /*************************Persistency handling*********************************/
    
 
    protected void loadModulList(){
         try{
            java.util.HashSet keySet = new java.util.HashSet();
            keySet.addAll(java.util.Arrays.asList(permanentStorage.keys()));
            
            if(!keySet.isEmpty()){
                removeButton.setEnabled(true);
                java.util.Iterator keyIterator = keySet.iterator();
                while(keyIterator.hasNext()){
                        String key = (String)keyIterator.next();
                        String value = permanentStorage.get(key,"");
                        ModuleListItem item = new ModuleListItem(key,value);
                        moduleListModel.addElement(item);
                        commentStorage = prefs.node(prefs.absolutePath()+"/Comments/"+value);
                        item.loaderComment = commentStorage.get("loaderComment","");
                    }

            }
                
        }catch(Exception e){}
         sortModuleList();
    }
        

    
   
    protected boolean isModulInList(String moduleClassName){
        boolean retval = false;
        try{
            java.util.HashSet keySet = new java.util.HashSet();
            keySet.addAll(java.util.Arrays.asList(permanentStorage.keys()));
            retval = keySet.contains(moduleClassName.substring(moduleClassName.lastIndexOf('.')+1));
        }catch(Exception e){}
        return retval;
    }
    
    /***************************Sorting the module list****************************/
    
    private void sortModuleList(){
    // The Module List is not too long so a Bubble sort will do fine.
    
    for(int i =0; i<moduleListModel.size()-1; i++)
        for(int j=0; j < moduleListModel.size()-(i+1); j++){
            ModuleListItem first = (ModuleListItem)moduleListModel.get(j);
            ModuleListItem second= (ModuleListItem)moduleListModel.get(j+1);
            
            if(first.name.compareTo(second.name) > 0){
                moduleListModel.set(j,second);
                moduleListModel.set(j+1,first);
            }
            
        }
        
    }
    
    
    /******************Inner classes to handle the module list*********************/
    
    private class ModuleListItem{
        public String name;
        public String className;
        public String loaderComment = "";
        
        ModuleListItem(String name, String className){
            this.name = name;
            this. className = className;
        }
        
        public String toString(){
            return  this.name;
        }
    }
    
    private class ModuleListSelectionListener implements javax.swing.event.ListSelectionListener{
        
        public void valueChanged(javax.swing.event.ListSelectionEvent e) {
            if(moduleList.getSelectedValue() != null)
                classTextField.setText(((ModuleListItem)moduleList.getSelectedValue()).className);
        }
        
    }
    
    private class ListItemRenderer extends javax.swing.DefaultListCellRenderer{
        public ListItemRenderer(){
            super();
        }
        
        public java.awt.Component getListCellRendererComponent(javax.swing.JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            java.awt.Component cellComp = super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
            if( cellComp instanceof javax.swing.JComponent ){
                String ttip = "";
                if(!((ModuleListItem)value).loaderComment.equalsIgnoreCase("")){
                     ttip = new String(":   "+((ModuleListItem)value).loaderComment);
                }
               ((javax.swing.JComponent)cellComp).setToolTipText(((ModuleListItem)value).className+ttip);
            }

            return this;
        }
        
    }
    
    
    
    
}

