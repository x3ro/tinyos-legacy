/*
 * Copyright (c) 2003, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */

/**
 * @author Andras Nadas, Miklos Maroti
 * @last modified 12/04/2003
 */

package net.tinyos.mcenter;

import net.tinyos.packet.*;
import java.util.*;

public class BigMSGDisplay extends MessageCenterInternalFrame implements PacketListenerIF{
    
    protected byte activeMessage = 0x6F;
    protected boolean supressId = false;
    protected boolean printBinary = false;
    protected java.text.SimpleDateFormat timestamp = null;
    
    protected java.io.File saveFile = new java.io.File("standard.out");
    protected java.io.FileOutputStream fileOut;
    protected java.io.PrintWriter out;
    
    private BigMSGDisplay instance = null;
    
    private java.util.prefs.Preferences prefsRoot = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
    private java.util.prefs.Preferences prefs;
    /** Creates new form BigMSGDisplay */
    public BigMSGDisplay() {
        super("Big Message Display");
        instance = this;
        prefs = prefsRoot.node(prefsRoot.absolutePath()+"/BigMSGDisplay");
        initComponents();
        SerialConnector.instance().registerPacketListener(this,activeMessage);
        this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter(){
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent e){
                SerialConnector.instance().removePacketListener(instance,activeMessage);
                //CenterFrame.instance().removeChildFrame(instance);
            }
        });
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        subPanel = new javax.swing.JPanel();
        stateLabel = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        timestampCheckBox = new javax.swing.JCheckBox();
        noidCheckBox = new javax.swing.JCheckBox();
        binaryCheckBox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        saveCheckBox = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setTitle("Big Message Display");
        jScrollPane1.setPreferredSize(new java.awt.Dimension(320, 240));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        subPanel.setLayout(new java.awt.GridBagLayout());

        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stateLabel.setText("state");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 8);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        subPanel.add(stateLabel, gridBagConstraints);

        stateTextField.setEditable(false);
        stateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        stateTextField.setText("mote:0/0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        subPanel.add(stateTextField, gridBagConstraints);

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        subPanel.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        subPanel.add(jSeparator1, gridBagConstraints);

        timestampCheckBox.setText("print timestamp");
        timestampCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timestampCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 64, 0, 0);
        subPanel.add(timestampCheckBox, gridBagConstraints);

        noidCheckBox.setText("noid");
        noidCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                noidCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        subPanel.add(noidCheckBox, gridBagConstraints);

        binaryCheckBox.setText("binary");
        binaryCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                binaryCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        subPanel.add(binaryCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        subPanel.add(jSeparator2, gridBagConstraints);

        saveCheckBox.setText("save");
        saveCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                saveCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        subPanel.add(saveCheckBox, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setText("standard.out");
        jTextField1.setPreferredSize(new java.awt.Dimension(128, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        subPanel.add(jTextField1, gridBagConstraints);

        jButton1.setText("..");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 2, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        subPanel.add(jButton1, gridBagConstraints);

        getContentPane().add(subPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void binaryCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_binaryCheckBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            printBinary = true;
        } else if(evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            printBinary = false;
        }
    }//GEN-LAST:event_binaryCheckBoxItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        chooser.setDialogTitle("Choose File to save");
        int returnVal = chooser.showSaveDialog(this);
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            saveFile = chooser.getSelectedFile();
            jTextField1.setText(saveFile.getName());
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
        
    private void saveCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_saveCheckBoxItemStateChanged
        try{
            if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                jButton1.setEnabled(false);
                binaryCheckBox.setEnabled(false);
                fileOut = new java.io.FileOutputStream(saveFile);
                out = new java.io.PrintWriter(fileOut);
                
            } else if(evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
                jButton1.setEnabled(true);
                binaryCheckBox.setEnabled(true);
                fileOut=null;
                out = null;
            }
        }catch(java.io.FileNotFoundException fnfe){
        }
    }//GEN-LAST:event_saveCheckBoxItemStateChanged
        
    private void timestampCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timestampCheckBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            timestamp = new java.text.SimpleDateFormat("HH:mm:ss.SSSS");
        } else if(evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            timestamp = null;
        }
    }//GEN-LAST:event_timestampCheckBoxItemStateChanged
    
    private void noidCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_noidCheckBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            supressId = true;
        } else if(evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            supressId = false;
        }
    }//GEN-LAST:event_noidCheckBoxItemStateChanged
    
    static protected class BigMsg {
        int lastSeqNum;
        int nextPosition;
        byte[] packet;
    }
    
    protected HashMap bigMsgs = new HashMap();
    
    static final int PACKET_TYPE_FIELD = 2;
    static final int PACKET_LENGTH_FIELD = 4;
    static final int PACKET_SOURCE = 5;
    static final int PACKET_SEQNUM = 7;
    static final int PACKET_DATA = 8;

    static final int MAX_SEQ_NUM = 127;
    
    // the first 5 bytes are: addr(2), type(1), group(1), length(1)
    public void packetReceived(byte[] packet) {
        if( packet[PACKET_TYPE_FIELD] != activeMessage )
            return;
        
        byte len = packet[PACKET_LENGTH_FIELD];
        int source = getShort(packet[PACKET_SOURCE], packet[PACKET_SOURCE+1]);
        int seqNum = packet[PACKET_SEQNUM] & 0xFF;

        
        // wrong format
        if( len < 4 || PACKET_SOURCE + len > packet.length )
            return;
        len -= 3;	// omit the source and seqnum fields
        
        byte[] data = new byte[len];
        System.arraycopy(packet, PACKET_DATA, data, 0, len);
        
        BigMsg bigMsg;
        if( seqNum == 0xFF) {			//New Big MSG
            bigMsgs.remove(new Integer(source));
            
            bigMsg = new BigMsg();
            bigMsg.lastSeqNum = -1;
            int blength = getInt(data,0);
            
            //bigMsg.packet = new byte[getShort(data[0], data[1])];
            bigMsg.packet = new byte[blength];
            bigMsg.nextPosition = data.length - 4;
            System.arraycopy(data, 4, bigMsg.packet, 0, bigMsg.nextPosition);
            
            bigMsgs.put(new Integer(source), bigMsg);
            
        }
        else {
            bigMsg = (BigMsg)bigMsgs.get(new Integer(source));
            
            if( bigMsg == null || seqNum == bigMsg.lastSeqNum ){
                
                return;
            }else if( seqNum != bigMsg.lastSeqNum+1 && (seqNum !=0 || bigMsg.lastSeqNum != MAX_SEQ_NUM) ){
                
                bigMsgs.remove(new Integer(source));
            }
            bigMsg.lastSeqNum = seqNum;
            System.arraycopy(data, 0, bigMsg.packet, bigMsg.nextPosition, data.length);
            bigMsg.nextPosition += data.length;
            
        }
        
        stateTextField.setText("mote"+source+":"+ bigMsg.nextPosition +"/" + bigMsg.packet.length );
        //System.out.println("mote"+source+":"+ bigMsg.nextPosition +"/" + bigMsg.packet.length );
        
        if( bigMsg.nextPosition == bigMsg.packet.length ) {
            bigMsgs.remove(new Integer(Integer.toString(source)));
            
            if( timestamp != null ){
                jTextArea1.append(timestamp.format(new java.util.Date()) + ' ');
                if(out != null && !printBinary)
                    out.print(timestamp.format(new java.util.Date()) + ' ');
            }
            if( !supressId  ) {
                jTextArea1.append(Integer.toString(source));
                jTextArea1.append(" ");
                if(out != null  && !printBinary)
                    out.print(Integer.toString(source)+" ");
            }

            if(out != null  && printBinary){

                try{                           
                    fileOut.write(bigMsg.packet,0, bigMsg.packet.length );
                }catch(java.io.IOException ioe){}
            }
            
            for(int i = 0; i < bigMsg.packet.length; ++i ) {
                if( i == 2048) {
                    if(out == null){
                        System.out.println("Line too long!! Save Message to File");
                    }else{
                        System.out.println("Line too long!! Displaying the truncated Message. Complete message saved to File.");
                    }
                    break;
                }
                jTextArea1.append(Integer.toString(bigMsg.packet[i] & 0xFF));
                jTextArea1.append(" ");
                if(out != null){
                    if(!printBinary){
                        out.print(Integer.toString(bigMsg.packet[i] & 0xFF) + " ");
                    }
                }
            }
            
            jTextArea1.append("\n");
            this.jTextArea1.setCaretPosition(this.jTextArea1.getDocument().getLength());
            
            if(out != null && !printBinary)
                    out.println("");
            if(out != null){
                    out.flush();
                    try{
                        fileOut.flush();
                    }catch(java.io.IOException ioe){}
            }
					
        }
    }
    
    protected int getShort(byte a, byte b) {
        return (a & 0x00FF) + ((b << 8) & 0xFF00);
    }
    
    protected int getInt(byte[] packet, int packetIndex )
	{
		return (packet[packetIndex++] & 0xFF) 
			+ ((packet[packetIndex++] & 0xFF) << 8)
			+ ((packet[packetIndex++] & 0xFF) << 16)
			+ ((packet[packetIndex] & 0xFF) << 24);
	}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox binaryCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox noidCheckBox;
    private javax.swing.JCheckBox saveCheckBox;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JPanel subPanel;
    private javax.swing.JCheckBox timestampCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
