/*
 * Copyright (c) 2003, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */
/*
 * MessageCenterOuterFrame.java
 *
 * Created on April 26, 2004, 11:03 AM
 */

package net.tinyos.mcenter;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * 
 * @author nadand
 */
public class MessageCenterOuterFrame extends javax.swing.JFrame {

	private MessageCenterInternalFrame internalFrame = null;
	
	private boolean closing = false;
	/** Creates new form MessageCenterOuterFrame */
	public MessageCenterOuterFrame(MessageCenterInternalFrame internalFrame) {

		this.internalFrame = internalFrame;
		this.setTitle(internalFrame.getTitle());
		initComponents();

		this.setRootPane(internalFrame.getRootPane());
		setSize(internalFrame.getSize());
		pack();
		addWindowListener(new WindowAdapter() {
		    /**
		     * Invoked when a window is activated.
		     */
		    public void windowActivated(WindowEvent e) {
		    	
		    	MessageCenterOuterFrame.this.internalFrame.focusGained();
		    }

		    /**
		     * Invoked when a window is de-activated.
		     */
		    public void windowDeactivated(WindowEvent e) {
		    	if(!closing)
		    		MessageCenterOuterFrame.this.internalFrame.focusLost();	
		    }
		});
		/*
		 * desktopPane.add(internalFrame); internalFrame.setLocation(0,0);
		 * internalFrame.setVisible(true); internalFrame.show();
		 */

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closing = true;
				exitForm(evt);
			}
		});

		pack();
	}//GEN-END:initComponents

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
		MessageCenter.instance().removeChildFrame(internalFrame);
		SerialConnector.instance().removePacketListener(internalFrame);
	}//GEN-LAST:event_exitForm

	public void close() {
		closing = true;
		dispose();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables

}