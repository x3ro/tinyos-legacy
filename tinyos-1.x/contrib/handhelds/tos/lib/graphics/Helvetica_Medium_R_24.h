// this is the array of bitmaps all the chars point into
const static unsigned char Helvetica_Medium_R_24_bitmap[3050] = {
'\000', // 0
'\003', // 1
'\003', // 2
'\003', // 3
'\003', // 4
'\003', // 5
'\003', // 6
'\003', // 7
'\003', // 8
'\003', // 9
'\003', // 10
'\003', // 11
'\003', // 12
'\001', // 13
'\001', // 14
'\000', // 15
'\000', // 16
'\003', // 17
'\003', // 18
'\003', // 19
'\063', // 20
'\063', // 21
'\063', // 22
'\063', // 23
'\063', // 24
'\042', // 25
'\060', // 26
'\003', // 27
'\060', // 28
'\003', // 29
'\060', // 30
'\003', // 31
'\230', // 32
'\001', // 33
'\377', // 34
'\007', // 35
'\377', // 36
'\007', // 37
'\230', // 38
'\001', // 39
'\230', // 40
'\001', // 41
'\314', // 42
'\000', // 43
'\314', // 44
'\000', // 45
'\377', // 46
'\007', // 47
'\377', // 48
'\007', // 49
'\314', // 50
'\000', // 51
'\314', // 52
'\000', // 53
'\146', // 54
'\000', // 55
'\146', // 56
'\000', // 57
'\146', // 58
'\000', // 59
'\140', // 60
'\000', // 61
'\140', // 62
'\000', // 63
'\374', // 64
'\001', // 65
'\376', // 66
'\003', // 67
'\147', // 68
'\007', // 69
'\143', // 70
'\006', // 71
'\143', // 72
'\000', // 73
'\147', // 74
'\000', // 75
'\156', // 76
'\000', // 77
'\174', // 78
'\000', // 79
'\360', // 80
'\001', // 81
'\340', // 82
'\003', // 83
'\140', // 84
'\007', // 85
'\140', // 86
'\006', // 87
'\143', // 88
'\006', // 89
'\143', // 90
'\006', // 91
'\147', // 92
'\007', // 93
'\376', // 94
'\003', // 95
'\374', // 96
'\001', // 97
'\140', // 98
'\000', // 99
'\140', // 100
'\000', // 101
'\000', // 102
'\140', // 103
'\000', // 104
'\074', // 105
'\060', // 106
'\000', // 107
'\176', // 108
'\060', // 109
'\000', // 110
'\303', // 111
'\030', // 112
'\000', // 113
'\303', // 114
'\030', // 115
'\000', // 116
'\303', // 117
'\014', // 118
'\000', // 119
'\303', // 120
'\014', // 121
'\000', // 122
'\176', // 123
'\006', // 124
'\000', // 125
'\074', // 126
'\006', // 127
'\000', // 128
'\000', // 129
'\003', // 130
'\000', // 131
'\000', // 132
'\343', // 133
'\001', // 134
'\200', // 135
'\361', // 136
'\003', // 137
'\200', // 138
'\031', // 139
'\006', // 140
'\300', // 141
'\030', // 142
'\006', // 143
'\300', // 144
'\030', // 145
'\006', // 146
'\140', // 147
'\030', // 148
'\006', // 149
'\140', // 150
'\360', // 151
'\003', // 152
'\040', // 153
'\340', // 154
'\001', // 155
'\360', // 156
'\000', // 157
'\370', // 158
'\001', // 159
'\234', // 160
'\003', // 161
'\014', // 162
'\003', // 163
'\014', // 164
'\003', // 165
'\014', // 166
'\003', // 167
'\230', // 168
'\001', // 169
'\360', // 170
'\000', // 171
'\170', // 172
'\000', // 173
'\374', // 174
'\030', // 175
'\316', // 176
'\031', // 177
'\206', // 178
'\033', // 179
'\003', // 180
'\017', // 181
'\003', // 182
'\006', // 183
'\003', // 184
'\017', // 185
'\207', // 186
'\033', // 187
'\376', // 188
'\071', // 189
'\170', // 190
'\000', // 191
'\003', // 192
'\003', // 193
'\003', // 194
'\003', // 195
'\003', // 196
'\002', // 197
'\030', // 198
'\030', // 199
'\014', // 200
'\014', // 201
'\006', // 202
'\006', // 203
'\006', // 204
'\003', // 205
'\003', // 206
'\003', // 207
'\003', // 208
'\003', // 209
'\003', // 210
'\003', // 211
'\003', // 212
'\003', // 213
'\003', // 214
'\006', // 215
'\006', // 216
'\006', // 217
'\014', // 218
'\014', // 219
'\030', // 220
'\030', // 221
'\003', // 222
'\003', // 223
'\006', // 224
'\006', // 225
'\014', // 226
'\014', // 227
'\014', // 228
'\030', // 229
'\030', // 230
'\030', // 231
'\030', // 232
'\030', // 233
'\030', // 234
'\030', // 235
'\030', // 236
'\030', // 237
'\030', // 238
'\014', // 239
'\014', // 240
'\014', // 241
'\006', // 242
'\006', // 243
'\003', // 244
'\003', // 245
'\010', // 246
'\010', // 247
'\153', // 248
'\076', // 249
'\034', // 250
'\066', // 251
'\042', // 252
'\140', // 253
'\000', // 254
'\140', // 255
'\000', // 256
'\140', // 257
'\000', // 258
'\140', // 259
'\000', // 260
'\140', // 261
'\000', // 262
'\377', // 263
'\017', // 264
'\377', // 265
'\017', // 266
'\140', // 267
'\000', // 268
'\140', // 269
'\000', // 270
'\140', // 271
'\000', // 272
'\140', // 273
'\000', // 274
'\140', // 275
'\000', // 276
'\003', // 277
'\003', // 278
'\003', // 279
'\002', // 280
'\002', // 281
'\001', // 282
'\077', // 283
'\077', // 284
'\003', // 285
'\003', // 286
'\003', // 287
'\140', // 288
'\140', // 289
'\140', // 290
'\060', // 291
'\060', // 292
'\060', // 293
'\030', // 294
'\030', // 295
'\030', // 296
'\030', // 297
'\014', // 298
'\014', // 299
'\014', // 300
'\006', // 301
'\006', // 302
'\006', // 303
'\003', // 304
'\003', // 305
'\003', // 306
'\370', // 307
'\000', // 308
'\374', // 309
'\001', // 310
'\216', // 311
'\003', // 312
'\006', // 313
'\003', // 314
'\006', // 315
'\003', // 316
'\003', // 317
'\006', // 318
'\003', // 319
'\006', // 320
'\003', // 321
'\006', // 322
'\003', // 323
'\006', // 324
'\003', // 325
'\006', // 326
'\003', // 327
'\006', // 328
'\003', // 329
'\006', // 330
'\003', // 331
'\006', // 332
'\006', // 333
'\003', // 334
'\006', // 335
'\003', // 336
'\216', // 337
'\003', // 338
'\374', // 339
'\001', // 340
'\370', // 341
'\000', // 342
'\060', // 343
'\060', // 344
'\070', // 345
'\077', // 346
'\077', // 347
'\060', // 348
'\060', // 349
'\060', // 350
'\060', // 351
'\060', // 352
'\060', // 353
'\060', // 354
'\060', // 355
'\060', // 356
'\060', // 357
'\060', // 358
'\060', // 359
'\060', // 360
'\170', // 361
'\000', // 362
'\376', // 363
'\001', // 364
'\206', // 365
'\003', // 366
'\003', // 367
'\003', // 368
'\003', // 369
'\006', // 370
'\003', // 371
'\006', // 372
'\000', // 373
'\006', // 374
'\000', // 375
'\003', // 376
'\200', // 377
'\003', // 378
'\300', // 379
'\001', // 380
'\360', // 381
'\000', // 382
'\070', // 383
'\000', // 384
'\034', // 385
'\000', // 386
'\016', // 387
'\000', // 388
'\007', // 389
'\000', // 390
'\003', // 391
'\000', // 392
'\377', // 393
'\007', // 394
'\377', // 395
'\007', // 396
'\370', // 397
'\000', // 398
'\376', // 399
'\001', // 400
'\206', // 401
'\001', // 402
'\003', // 403
'\003', // 404
'\003', // 405
'\003', // 406
'\003', // 407
'\003', // 408
'\000', // 409
'\003', // 410
'\200', // 411
'\001', // 412
'\360', // 413
'\000', // 414
'\360', // 415
'\003', // 416
'\000', // 417
'\003', // 418
'\000', // 419
'\006', // 420
'\000', // 421
'\006', // 422
'\003', // 423
'\006', // 424
'\003', // 425
'\003', // 426
'\206', // 427
'\003', // 428
'\376', // 429
'\001', // 430
'\370', // 431
'\000', // 432
'\200', // 433
'\001', // 434
'\300', // 435
'\001', // 436
'\300', // 437
'\001', // 438
'\340', // 439
'\001', // 440
'\360', // 441
'\001', // 442
'\260', // 443
'\001', // 444
'\230', // 445
'\001', // 446
'\234', // 447
'\001', // 448
'\214', // 449
'\001', // 450
'\206', // 451
'\001', // 452
'\207', // 453
'\001', // 454
'\203', // 455
'\001', // 456
'\377', // 457
'\007', // 458
'\377', // 459
'\007', // 460
'\200', // 461
'\001', // 462
'\200', // 463
'\001', // 464
'\200', // 465
'\001', // 466
'\200', // 467
'\001', // 468
'\376', // 469
'\003', // 470
'\376', // 471
'\003', // 472
'\006', // 473
'\000', // 474
'\006', // 475
'\000', // 476
'\006', // 477
'\000', // 478
'\006', // 479
'\000', // 480
'\166', // 481
'\000', // 482
'\376', // 483
'\001', // 484
'\216', // 485
'\003', // 486
'\000', // 487
'\003', // 488
'\000', // 489
'\006', // 490
'\000', // 491
'\006', // 492
'\000', // 493
'\006', // 494
'\003', // 495
'\006', // 496
'\003', // 497
'\003', // 498
'\207', // 499
'\003', // 500
'\376', // 501
'\001', // 502
'\170', // 503
'\000', // 504
'\360', // 505
'\000', // 506
'\374', // 507
'\003', // 508
'\016', // 509
'\003', // 510
'\006', // 511
'\006', // 512
'\007', // 513
'\006', // 514
'\003', // 515
'\000', // 516
'\003', // 517
'\000', // 518
'\363', // 519
'\000', // 520
'\373', // 521
'\001', // 522
'\217', // 523
'\003', // 524
'\007', // 525
'\003', // 526
'\003', // 527
'\006', // 528
'\003', // 529
'\006', // 530
'\003', // 531
'\006', // 532
'\007', // 533
'\006', // 534
'\006', // 535
'\003', // 536
'\376', // 537
'\003', // 538
'\370', // 539
'\000', // 540
'\377', // 541
'\007', // 542
'\377', // 543
'\007', // 544
'\000', // 545
'\007', // 546
'\000', // 547
'\003', // 548
'\200', // 549
'\001', // 550
'\200', // 551
'\001', // 552
'\300', // 553
'\000', // 554
'\300', // 555
'\000', // 556
'\140', // 557
'\000', // 558
'\140', // 559
'\000', // 560
'\060', // 561
'\000', // 562
'\060', // 563
'\000', // 564
'\070', // 565
'\000', // 566
'\030', // 567
'\000', // 568
'\030', // 569
'\000', // 570
'\034', // 571
'\000', // 572
'\014', // 573
'\000', // 574
'\014', // 575
'\000', // 576
'\160', // 577
'\000', // 578
'\374', // 579
'\001', // 580
'\214', // 581
'\001', // 582
'\006', // 583
'\003', // 584
'\006', // 585
'\003', // 586
'\006', // 587
'\003', // 588
'\006', // 589
'\003', // 590
'\214', // 591
'\001', // 592
'\370', // 593
'\000', // 594
'\374', // 595
'\001', // 596
'\006', // 597
'\003', // 598
'\007', // 599
'\007', // 600
'\003', // 601
'\006', // 602
'\003', // 603
'\006', // 604
'\003', // 605
'\006', // 606
'\216', // 607
'\003', // 608
'\376', // 609
'\003', // 610
'\370', // 611
'\000', // 612
'\370', // 613
'\000', // 614
'\376', // 615
'\003', // 616
'\216', // 617
'\003', // 618
'\007', // 619
'\003', // 620
'\003', // 621
'\006', // 622
'\003', // 623
'\006', // 624
'\003', // 625
'\006', // 626
'\003', // 627
'\006', // 628
'\007', // 629
'\007', // 630
'\216', // 631
'\007', // 632
'\376', // 633
'\006', // 634
'\170', // 635
'\006', // 636
'\000', // 637
'\006', // 638
'\000', // 639
'\007', // 640
'\003', // 641
'\003', // 642
'\207', // 643
'\003', // 644
'\376', // 645
'\001', // 646
'\170', // 647
'\000', // 648
'\003', // 649
'\003', // 650
'\003', // 651
'\000', // 652
'\000', // 653
'\000', // 654
'\000', // 655
'\000', // 656
'\000', // 657
'\000', // 658
'\000', // 659
'\003', // 660
'\003', // 661
'\003', // 662
'\003', // 663
'\003', // 664
'\003', // 665
'\000', // 666
'\000', // 667
'\000', // 668
'\000', // 669
'\000', // 670
'\000', // 671
'\000', // 672
'\000', // 673
'\003', // 674
'\003', // 675
'\003', // 676
'\002', // 677
'\002', // 678
'\001', // 679
'\000', // 680
'\014', // 681
'\000', // 682
'\017', // 683
'\300', // 684
'\003', // 685
'\360', // 686
'\000', // 687
'\074', // 688
'\000', // 689
'\007', // 690
'\000', // 691
'\007', // 692
'\000', // 693
'\074', // 694
'\000', // 695
'\360', // 696
'\000', // 697
'\300', // 698
'\003', // 699
'\000', // 700
'\017', // 701
'\000', // 702
'\014', // 703
'\377', // 704
'\003', // 705
'\377', // 706
'\003', // 707
'\000', // 708
'\000', // 709
'\000', // 710
'\000', // 711
'\377', // 712
'\003', // 713
'\377', // 714
'\003', // 715
'\003', // 716
'\000', // 717
'\017', // 718
'\000', // 719
'\074', // 720
'\000', // 721
'\360', // 722
'\000', // 723
'\300', // 724
'\003', // 725
'\000', // 726
'\016', // 727
'\000', // 728
'\016', // 729
'\300', // 730
'\003', // 731
'\360', // 732
'\000', // 733
'\074', // 734
'\000', // 735
'\017', // 736
'\000', // 737
'\003', // 738
'\000', // 739
'\370', // 740
'\000', // 741
'\376', // 742
'\001', // 743
'\216', // 744
'\003', // 745
'\007', // 746
'\003', // 747
'\003', // 748
'\003', // 749
'\203', // 750
'\003', // 751
'\200', // 752
'\001', // 753
'\300', // 754
'\001', // 755
'\340', // 756
'\000', // 757
'\140', // 758
'\000', // 759
'\060', // 760
'\000', // 761
'\060', // 762
'\000', // 763
'\060', // 764
'\000', // 765
'\060', // 766
'\000', // 767
'\000', // 768
'\000', // 769
'\000', // 770
'\000', // 771
'\060', // 772
'\000', // 773
'\060', // 774
'\000', // 775
'\060', // 776
'\000', // 777
'\000', // 778
'\377', // 779
'\000', // 780
'\300', // 781
'\377', // 782
'\003', // 783
'\360', // 784
'\200', // 785
'\007', // 786
'\070', // 787
'\000', // 788
'\016', // 789
'\034', // 790
'\000', // 791
'\030', // 792
'\014', // 793
'\000', // 794
'\030', // 795
'\006', // 796
'\316', // 797
'\060', // 798
'\006', // 799
'\337', // 800
'\060', // 801
'\203', // 802
'\343', // 803
'\060', // 804
'\303', // 805
'\141', // 806
'\060', // 807
'\303', // 808
'\140', // 809
'\060', // 810
'\143', // 811
'\140', // 812
'\060', // 813
'\143', // 814
'\060', // 815
'\070', // 816
'\143', // 817
'\060', // 818
'\030', // 819
'\143', // 820
'\060', // 821
'\034', // 822
'\347', // 823
'\070', // 824
'\016', // 825
'\306', // 826
'\357', // 827
'\007', // 828
'\216', // 829
'\307', // 830
'\001', // 831
'\034', // 832
'\000', // 833
'\000', // 834
'\070', // 835
'\000', // 836
'\000', // 837
'\360', // 838
'\300', // 839
'\000', // 840
'\340', // 841
'\377', // 842
'\000', // 843
'\000', // 844
'\077', // 845
'\000', // 846
'\300', // 847
'\001', // 848
'\300', // 849
'\001', // 850
'\140', // 851
'\003', // 852
'\140', // 853
'\003', // 854
'\060', // 855
'\002', // 856
'\060', // 857
'\006', // 858
'\060', // 859
'\006', // 860
'\030', // 861
'\014', // 862
'\030', // 863
'\014', // 864
'\030', // 865
'\014', // 866
'\014', // 867
'\030', // 868
'\374', // 869
'\037', // 870
'\374', // 871
'\037', // 872
'\006', // 873
'\060', // 874
'\006', // 875
'\060', // 876
'\006', // 877
'\060', // 878
'\003', // 879
'\140', // 880
'\003', // 881
'\140', // 882
'\003', // 883
'\140', // 884
'\377', // 885
'\003', // 886
'\377', // 887
'\017', // 888
'\003', // 889
'\016', // 890
'\003', // 891
'\030', // 892
'\003', // 893
'\030', // 894
'\003', // 895
'\030', // 896
'\003', // 897
'\030', // 898
'\003', // 899
'\014', // 900
'\377', // 901
'\007', // 902
'\377', // 903
'\017', // 904
'\003', // 905
'\030', // 906
'\003', // 907
'\060', // 908
'\003', // 909
'\060', // 910
'\003', // 911
'\060', // 912
'\003', // 913
'\060', // 914
'\003', // 915
'\070', // 916
'\003', // 917
'\034', // 918
'\377', // 919
'\017', // 920
'\377', // 921
'\003', // 922
'\340', // 923
'\007', // 924
'\370', // 925
'\037', // 926
'\074', // 927
'\074', // 928
'\016', // 929
'\160', // 930
'\006', // 931
'\140', // 932
'\007', // 933
'\140', // 934
'\003', // 935
'\000', // 936
'\003', // 937
'\000', // 938
'\003', // 939
'\000', // 940
'\003', // 941
'\000', // 942
'\003', // 943
'\000', // 944
'\003', // 945
'\000', // 946
'\003', // 947
'\300', // 948
'\007', // 949
'\300', // 950
'\006', // 951
'\140', // 952
'\016', // 953
'\160', // 954
'\074', // 955
'\074', // 956
'\370', // 957
'\037', // 958
'\340', // 959
'\007', // 960
'\377', // 961
'\003', // 962
'\377', // 963
'\017', // 964
'\003', // 965
'\036', // 966
'\003', // 967
'\070', // 968
'\003', // 969
'\060', // 970
'\003', // 971
'\160', // 972
'\003', // 973
'\140', // 974
'\003', // 975
'\140', // 976
'\003', // 977
'\140', // 978
'\003', // 979
'\140', // 980
'\003', // 981
'\140', // 982
'\003', // 983
'\140', // 984
'\003', // 985
'\140', // 986
'\003', // 987
'\160', // 988
'\003', // 989
'\060', // 990
'\003', // 991
'\070', // 992
'\003', // 993
'\036', // 994
'\377', // 995
'\017', // 996
'\377', // 997
'\003', // 998
'\377', // 999
'\017', // 1000
'\377', // 1001
'\017', // 1002
'\003', // 1003
'\000', // 1004
'\003', // 1005
'\000', // 1006
'\003', // 1007
'\000', // 1008
'\003', // 1009
'\000', // 1010
'\003', // 1011
'\000', // 1012
'\003', // 1013
'\000', // 1014
'\377', // 1015
'\007', // 1016
'\377', // 1017
'\007', // 1018
'\003', // 1019
'\000', // 1020
'\003', // 1021
'\000', // 1022
'\003', // 1023
'\000', // 1024
'\003', // 1025
'\000', // 1026
'\003', // 1027
'\000', // 1028
'\003', // 1029
'\000', // 1030
'\003', // 1031
'\000', // 1032
'\377', // 1033
'\017', // 1034
'\377', // 1035
'\017', // 1036
'\377', // 1037
'\007', // 1038
'\377', // 1039
'\007', // 1040
'\003', // 1041
'\000', // 1042
'\003', // 1043
'\000', // 1044
'\003', // 1045
'\000', // 1046
'\003', // 1047
'\000', // 1048
'\003', // 1049
'\000', // 1050
'\003', // 1051
'\000', // 1052
'\003', // 1053
'\000', // 1054
'\377', // 1055
'\003', // 1056
'\377', // 1057
'\003', // 1058
'\003', // 1059
'\000', // 1060
'\003', // 1061
'\000', // 1062
'\003', // 1063
'\000', // 1064
'\003', // 1065
'\000', // 1066
'\003', // 1067
'\000', // 1068
'\003', // 1069
'\000', // 1070
'\003', // 1071
'\000', // 1072
'\003', // 1073
'\000', // 1074
'\340', // 1075
'\007', // 1076
'\370', // 1077
'\037', // 1078
'\074', // 1079
'\074', // 1080
'\016', // 1081
'\160', // 1082
'\006', // 1083
'\140', // 1084
'\007', // 1085
'\140', // 1086
'\003', // 1087
'\000', // 1088
'\003', // 1089
'\000', // 1090
'\003', // 1091
'\000', // 1092
'\003', // 1093
'\376', // 1094
'\003', // 1095
'\376', // 1096
'\003', // 1097
'\300', // 1098
'\003', // 1099
'\300', // 1100
'\007', // 1101
'\300', // 1102
'\006', // 1103
'\340', // 1104
'\016', // 1105
'\360', // 1106
'\074', // 1107
'\374', // 1108
'\370', // 1109
'\337', // 1110
'\340', // 1111
'\307', // 1112
'\003', // 1113
'\060', // 1114
'\003', // 1115
'\060', // 1116
'\003', // 1117
'\060', // 1118
'\003', // 1119
'\060', // 1120
'\003', // 1121
'\060', // 1122
'\003', // 1123
'\060', // 1124
'\003', // 1125
'\060', // 1126
'\003', // 1127
'\060', // 1128
'\377', // 1129
'\077', // 1130
'\377', // 1131
'\077', // 1132
'\003', // 1133
'\060', // 1134
'\003', // 1135
'\060', // 1136
'\003', // 1137
'\060', // 1138
'\003', // 1139
'\060', // 1140
'\003', // 1141
'\060', // 1142
'\003', // 1143
'\060', // 1144
'\003', // 1145
'\060', // 1146
'\003', // 1147
'\060', // 1148
'\003', // 1149
'\060', // 1150
'\003', // 1151
'\003', // 1152
'\003', // 1153
'\003', // 1154
'\003', // 1155
'\003', // 1156
'\003', // 1157
'\003', // 1158
'\003', // 1159
'\003', // 1160
'\003', // 1161
'\003', // 1162
'\003', // 1163
'\003', // 1164
'\003', // 1165
'\003', // 1166
'\003', // 1167
'\003', // 1168
'\003', // 1169
'\000', // 1170
'\003', // 1171
'\000', // 1172
'\003', // 1173
'\000', // 1174
'\003', // 1175
'\000', // 1176
'\003', // 1177
'\000', // 1178
'\003', // 1179
'\000', // 1180
'\003', // 1181
'\000', // 1182
'\003', // 1183
'\000', // 1184
'\003', // 1185
'\000', // 1186
'\003', // 1187
'\000', // 1188
'\003', // 1189
'\000', // 1190
'\003', // 1191
'\000', // 1192
'\003', // 1193
'\003', // 1194
'\003', // 1195
'\003', // 1196
'\003', // 1197
'\003', // 1198
'\003', // 1199
'\003', // 1200
'\003', // 1201
'\206', // 1202
'\001', // 1203
'\376', // 1204
'\001', // 1205
'\374', // 1206
'\000', // 1207
'\003', // 1208
'\034', // 1209
'\003', // 1210
'\016', // 1211
'\003', // 1212
'\007', // 1213
'\203', // 1214
'\003', // 1215
'\303', // 1216
'\001', // 1217
'\343', // 1218
'\000', // 1219
'\163', // 1220
'\000', // 1221
'\073', // 1222
'\000', // 1223
'\077', // 1224
'\000', // 1225
'\177', // 1226
'\000', // 1227
'\347', // 1228
'\000', // 1229
'\303', // 1230
'\001', // 1231
'\203', // 1232
'\003', // 1233
'\003', // 1234
'\007', // 1235
'\003', // 1236
'\016', // 1237
'\003', // 1238
'\034', // 1239
'\003', // 1240
'\070', // 1241
'\003', // 1242
'\160', // 1243
'\003', // 1244
'\140', // 1245
'\003', // 1246
'\000', // 1247
'\003', // 1248
'\000', // 1249
'\003', // 1250
'\000', // 1251
'\003', // 1252
'\000', // 1253
'\003', // 1254
'\000', // 1255
'\003', // 1256
'\000', // 1257
'\003', // 1258
'\000', // 1259
'\003', // 1260
'\000', // 1261
'\003', // 1262
'\000', // 1263
'\003', // 1264
'\000', // 1265
'\003', // 1266
'\000', // 1267
'\003', // 1268
'\000', // 1269
'\003', // 1270
'\000', // 1271
'\003', // 1272
'\000', // 1273
'\003', // 1274
'\000', // 1275
'\003', // 1276
'\000', // 1277
'\003', // 1278
'\000', // 1279
'\377', // 1280
'\007', // 1281
'\377', // 1282
'\007', // 1283
'\003', // 1284
'\200', // 1285
'\001', // 1286
'\007', // 1287
'\300', // 1288
'\001', // 1289
'\007', // 1290
'\300', // 1291
'\001', // 1292
'\017', // 1293
'\340', // 1294
'\001', // 1295
'\017', // 1296
'\340', // 1297
'\001', // 1298
'\033', // 1299
'\260', // 1300
'\001', // 1301
'\033', // 1302
'\260', // 1303
'\001', // 1304
'\033', // 1305
'\260', // 1306
'\001', // 1307
'\063', // 1308
'\230', // 1309
'\001', // 1310
'\063', // 1311
'\230', // 1312
'\001', // 1313
'\063', // 1314
'\230', // 1315
'\001', // 1316
'\143', // 1317
'\214', // 1318
'\001', // 1319
'\143', // 1320
'\214', // 1321
'\001', // 1322
'\143', // 1323
'\214', // 1324
'\001', // 1325
'\303', // 1326
'\206', // 1327
'\001', // 1328
'\303', // 1329
'\206', // 1330
'\001', // 1331
'\303', // 1332
'\206', // 1333
'\001', // 1334
'\203', // 1335
'\203', // 1336
'\001', // 1337
'\203', // 1338
'\203', // 1339
'\001', // 1340
'\007', // 1341
'\060', // 1342
'\017', // 1343
'\060', // 1344
'\017', // 1345
'\060', // 1346
'\033', // 1347
'\060', // 1348
'\073', // 1349
'\060', // 1350
'\063', // 1351
'\060', // 1352
'\163', // 1353
'\060', // 1354
'\143', // 1355
'\060', // 1356
'\343', // 1357
'\060', // 1358
'\303', // 1359
'\060', // 1360
'\303', // 1361
'\061', // 1362
'\203', // 1363
'\061', // 1364
'\203', // 1365
'\063', // 1366
'\003', // 1367
'\063', // 1368
'\003', // 1369
'\067', // 1370
'\003', // 1371
'\066', // 1372
'\003', // 1373
'\074', // 1374
'\003', // 1375
'\074', // 1376
'\003', // 1377
'\070', // 1378
'\340', // 1379
'\007', // 1380
'\370', // 1381
'\037', // 1382
'\074', // 1383
'\074', // 1384
'\016', // 1385
'\160', // 1386
'\006', // 1387
'\140', // 1388
'\007', // 1389
'\340', // 1390
'\003', // 1391
'\300', // 1392
'\003', // 1393
'\300', // 1394
'\003', // 1395
'\300', // 1396
'\003', // 1397
'\300', // 1398
'\003', // 1399
'\300', // 1400
'\003', // 1401
'\300', // 1402
'\003', // 1403
'\300', // 1404
'\007', // 1405
'\340', // 1406
'\006', // 1407
'\140', // 1408
'\016', // 1409
'\160', // 1410
'\074', // 1411
'\074', // 1412
'\370', // 1413
'\037', // 1414
'\340', // 1415
'\007', // 1416
'\377', // 1417
'\007', // 1418
'\377', // 1419
'\017', // 1420
'\003', // 1421
'\014', // 1422
'\003', // 1423
'\030', // 1424
'\003', // 1425
'\030', // 1426
'\003', // 1427
'\030', // 1428
'\003', // 1429
'\030', // 1430
'\003', // 1431
'\014', // 1432
'\377', // 1433
'\017', // 1434
'\377', // 1435
'\007', // 1436
'\003', // 1437
'\000', // 1438
'\003', // 1439
'\000', // 1440
'\003', // 1441
'\000', // 1442
'\003', // 1443
'\000', // 1444
'\003', // 1445
'\000', // 1446
'\003', // 1447
'\000', // 1448
'\003', // 1449
'\000', // 1450
'\003', // 1451
'\000', // 1452
'\003', // 1453
'\000', // 1454
'\340', // 1455
'\007', // 1456
'\370', // 1457
'\037', // 1458
'\074', // 1459
'\074', // 1460
'\016', // 1461
'\160', // 1462
'\006', // 1463
'\140', // 1464
'\007', // 1465
'\340', // 1466
'\003', // 1467
'\300', // 1468
'\003', // 1469
'\300', // 1470
'\003', // 1471
'\300', // 1472
'\003', // 1473
'\300', // 1474
'\003', // 1475
'\300', // 1476
'\003', // 1477
'\300', // 1478
'\003', // 1479
'\300', // 1480
'\007', // 1481
'\340', // 1482
'\006', // 1483
'\147', // 1484
'\016', // 1485
'\176', // 1486
'\074', // 1487
'\070', // 1488
'\370', // 1489
'\177', // 1490
'\340', // 1491
'\347', // 1492
'\377', // 1493
'\007', // 1494
'\377', // 1495
'\017', // 1496
'\003', // 1497
'\014', // 1498
'\003', // 1499
'\030', // 1500
'\003', // 1501
'\030', // 1502
'\003', // 1503
'\030', // 1504
'\003', // 1505
'\030', // 1506
'\003', // 1507
'\014', // 1508
'\377', // 1509
'\017', // 1510
'\377', // 1511
'\007', // 1512
'\003', // 1513
'\016', // 1514
'\003', // 1515
'\014', // 1516
'\003', // 1517
'\030', // 1518
'\003', // 1519
'\030', // 1520
'\003', // 1521
'\030', // 1522
'\003', // 1523
'\030', // 1524
'\003', // 1525
'\030', // 1526
'\003', // 1527
'\030', // 1528
'\003', // 1529
'\030', // 1530
'\340', // 1531
'\003', // 1532
'\370', // 1533
'\017', // 1534
'\034', // 1535
'\034', // 1536
'\016', // 1537
'\030', // 1538
'\006', // 1539
'\030', // 1540
'\006', // 1541
'\000', // 1542
'\016', // 1543
'\000', // 1544
'\174', // 1545
'\000', // 1546
'\360', // 1547
'\003', // 1548
'\200', // 1549
'\017', // 1550
'\000', // 1551
'\036', // 1552
'\000', // 1553
'\070', // 1554
'\000', // 1555
'\060', // 1556
'\003', // 1557
'\060', // 1558
'\003', // 1559
'\060', // 1560
'\007', // 1561
'\070', // 1562
'\036', // 1563
'\034', // 1564
'\374', // 1565
'\017', // 1566
'\360', // 1567
'\003', // 1568
'\377', // 1569
'\077', // 1570
'\377', // 1571
'\077', // 1572
'\300', // 1573
'\000', // 1574
'\300', // 1575
'\000', // 1576
'\300', // 1577
'\000', // 1578
'\300', // 1579
'\000', // 1580
'\300', // 1581
'\000', // 1582
'\300', // 1583
'\000', // 1584
'\300', // 1585
'\000', // 1586
'\300', // 1587
'\000', // 1588
'\300', // 1589
'\000', // 1590
'\300', // 1591
'\000', // 1592
'\300', // 1593
'\000', // 1594
'\300', // 1595
'\000', // 1596
'\300', // 1597
'\000', // 1598
'\300', // 1599
'\000', // 1600
'\300', // 1601
'\000', // 1602
'\300', // 1603
'\000', // 1604
'\300', // 1605
'\000', // 1606
'\003', // 1607
'\060', // 1608
'\003', // 1609
'\060', // 1610
'\003', // 1611
'\060', // 1612
'\003', // 1613
'\060', // 1614
'\003', // 1615
'\060', // 1616
'\003', // 1617
'\060', // 1618
'\003', // 1619
'\060', // 1620
'\003', // 1621
'\060', // 1622
'\003', // 1623
'\060', // 1624
'\003', // 1625
'\060', // 1626
'\003', // 1627
'\060', // 1628
'\003', // 1629
'\060', // 1630
'\003', // 1631
'\060', // 1632
'\003', // 1633
'\060', // 1634
'\003', // 1635
'\060', // 1636
'\006', // 1637
'\030', // 1638
'\016', // 1639
'\034', // 1640
'\374', // 1641
'\017', // 1642
'\360', // 1643
'\003', // 1644
'\003', // 1645
'\140', // 1646
'\003', // 1647
'\140', // 1648
'\007', // 1649
'\160', // 1650
'\006', // 1651
'\060', // 1652
'\016', // 1653
'\070', // 1654
'\014', // 1655
'\030', // 1656
'\014', // 1657
'\030', // 1658
'\034', // 1659
'\034', // 1660
'\030', // 1661
'\014', // 1662
'\030', // 1663
'\014', // 1664
'\070', // 1665
'\016', // 1666
'\060', // 1667
'\006', // 1668
'\060', // 1669
'\006', // 1670
'\160', // 1671
'\007', // 1672
'\140', // 1673
'\003', // 1674
'\140', // 1675
'\003', // 1676
'\300', // 1677
'\001', // 1678
'\300', // 1679
'\001', // 1680
'\300', // 1681
'\001', // 1682
'\003', // 1683
'\006', // 1684
'\014', // 1685
'\003', // 1686
'\006', // 1687
'\014', // 1688
'\003', // 1689
'\006', // 1690
'\014', // 1691
'\003', // 1692
'\017', // 1693
'\014', // 1694
'\006', // 1695
'\017', // 1696
'\006', // 1697
'\206', // 1698
'\031', // 1699
'\006', // 1700
'\206', // 1701
'\031', // 1702
'\006', // 1703
'\206', // 1704
'\031', // 1705
'\006', // 1706
'\206', // 1707
'\031', // 1708
'\006', // 1709
'\214', // 1710
'\031', // 1711
'\003', // 1712
'\314', // 1713
'\060', // 1714
'\003', // 1715
'\314', // 1716
'\060', // 1717
'\003', // 1718
'\314', // 1719
'\060', // 1720
'\003', // 1721
'\330', // 1722
'\260', // 1723
'\001', // 1724
'\330', // 1725
'\260', // 1726
'\001', // 1727
'\170', // 1728
'\340', // 1729
'\001', // 1730
'\160', // 1731
'\340', // 1732
'\000', // 1733
'\060', // 1734
'\300', // 1735
'\000', // 1736
'\060', // 1737
'\300', // 1738
'\000', // 1739
'\003', // 1740
'\140', // 1741
'\007', // 1742
'\160', // 1743
'\016', // 1744
'\070', // 1745
'\014', // 1746
'\030', // 1747
'\030', // 1748
'\014', // 1749
'\070', // 1750
'\016', // 1751
'\160', // 1752
'\007', // 1753
'\340', // 1754
'\003', // 1755
'\300', // 1756
'\001', // 1757
'\300', // 1758
'\001', // 1759
'\340', // 1760
'\003', // 1761
'\160', // 1762
'\007', // 1763
'\060', // 1764
'\006', // 1765
'\070', // 1766
'\016', // 1767
'\034', // 1768
'\034', // 1769
'\014', // 1770
'\030', // 1771
'\006', // 1772
'\060', // 1773
'\007', // 1774
'\160', // 1775
'\003', // 1776
'\140', // 1777
'\003', // 1778
'\060', // 1779
'\007', // 1780
'\070', // 1781
'\006', // 1782
'\030', // 1783
'\016', // 1784
'\034', // 1785
'\014', // 1786
'\014', // 1787
'\034', // 1788
'\016', // 1789
'\030', // 1790
'\006', // 1791
'\070', // 1792
'\007', // 1793
'\060', // 1794
'\003', // 1795
'\360', // 1796
'\003', // 1797
'\340', // 1798
'\001', // 1799
'\340', // 1800
'\001', // 1801
'\300', // 1802
'\000', // 1803
'\300', // 1804
'\000', // 1805
'\300', // 1806
'\000', // 1807
'\300', // 1808
'\000', // 1809
'\300', // 1810
'\000', // 1811
'\300', // 1812
'\000', // 1813
'\300', // 1814
'\000', // 1815
'\377', // 1816
'\037', // 1817
'\377', // 1818
'\037', // 1819
'\000', // 1820
'\034', // 1821
'\000', // 1822
'\016', // 1823
'\000', // 1824
'\007', // 1825
'\200', // 1826
'\003', // 1827
'\200', // 1828
'\003', // 1829
'\300', // 1830
'\001', // 1831
'\340', // 1832
'\000', // 1833
'\340', // 1834
'\000', // 1835
'\160', // 1836
'\000', // 1837
'\070', // 1838
'\000', // 1839
'\070', // 1840
'\000', // 1841
'\034', // 1842
'\000', // 1843
'\016', // 1844
'\000', // 1845
'\016', // 1846
'\000', // 1847
'\007', // 1848
'\000', // 1849
'\377', // 1850
'\037', // 1851
'\377', // 1852
'\037', // 1853
'\017', // 1854
'\017', // 1855
'\003', // 1856
'\003', // 1857
'\003', // 1858
'\003', // 1859
'\003', // 1860
'\003', // 1861
'\003', // 1862
'\003', // 1863
'\003', // 1864
'\003', // 1865
'\003', // 1866
'\003', // 1867
'\003', // 1868
'\003', // 1869
'\003', // 1870
'\003', // 1871
'\003', // 1872
'\003', // 1873
'\003', // 1874
'\003', // 1875
'\017', // 1876
'\017', // 1877
'\003', // 1878
'\003', // 1879
'\003', // 1880
'\006', // 1881
'\006', // 1882
'\006', // 1883
'\014', // 1884
'\014', // 1885
'\014', // 1886
'\014', // 1887
'\030', // 1888
'\030', // 1889
'\030', // 1890
'\060', // 1891
'\060', // 1892
'\060', // 1893
'\140', // 1894
'\140', // 1895
'\140', // 1896
'\017', // 1897
'\017', // 1898
'\014', // 1899
'\014', // 1900
'\014', // 1901
'\014', // 1902
'\014', // 1903
'\014', // 1904
'\014', // 1905
'\014', // 1906
'\014', // 1907
'\014', // 1908
'\014', // 1909
'\014', // 1910
'\014', // 1911
'\014', // 1912
'\014', // 1913
'\014', // 1914
'\014', // 1915
'\014', // 1916
'\014', // 1917
'\014', // 1918
'\017', // 1919
'\017', // 1920
'\060', // 1921
'\000', // 1922
'\060', // 1923
'\000', // 1924
'\170', // 1925
'\000', // 1926
'\110', // 1927
'\000', // 1928
'\314', // 1929
'\000', // 1930
'\206', // 1931
'\001', // 1932
'\206', // 1933
'\001', // 1934
'\003', // 1935
'\003', // 1936
'\003', // 1937
'\003', // 1938
'\377', // 1939
'\077', // 1940
'\377', // 1941
'\077', // 1942
'\003', // 1943
'\006', // 1944
'\014', // 1945
'\030', // 1946
'\370', // 1947
'\000', // 1948
'\374', // 1949
'\001', // 1950
'\206', // 1951
'\003', // 1952
'\006', // 1953
'\003', // 1954
'\000', // 1955
'\003', // 1956
'\340', // 1957
'\003', // 1958
'\374', // 1959
'\003', // 1960
'\036', // 1961
'\003', // 1962
'\007', // 1963
'\003', // 1964
'\003', // 1965
'\003', // 1966
'\203', // 1967
'\003', // 1968
'\307', // 1969
'\003', // 1970
'\176', // 1971
'\007', // 1972
'\074', // 1973
'\006', // 1974
'\003', // 1975
'\000', // 1976
'\003', // 1977
'\000', // 1978
'\003', // 1979
'\000', // 1980
'\003', // 1981
'\000', // 1982
'\003', // 1983
'\000', // 1984
'\363', // 1985
'\000', // 1986
'\373', // 1987
'\001', // 1988
'\217', // 1989
'\003', // 1990
'\007', // 1991
'\003', // 1992
'\003', // 1993
'\006', // 1994
'\003', // 1995
'\006', // 1996
'\003', // 1997
'\006', // 1998
'\003', // 1999
'\006', // 2000
'\003', // 2001
'\006', // 2002
'\003', // 2003
'\006', // 2004
'\007', // 2005
'\003', // 2006
'\217', // 2007
'\003', // 2008
'\373', // 2009
'\001', // 2010
'\363', // 2011
'\000', // 2012
'\370', // 2013
'\000', // 2014
'\374', // 2015
'\001', // 2016
'\216', // 2017
'\003', // 2018
'\006', // 2019
'\003', // 2020
'\003', // 2021
'\000', // 2022
'\003', // 2023
'\000', // 2024
'\003', // 2025
'\000', // 2026
'\003', // 2027
'\000', // 2028
'\003', // 2029
'\000', // 2030
'\003', // 2031
'\000', // 2032
'\006', // 2033
'\003', // 2034
'\216', // 2035
'\003', // 2036
'\374', // 2037
'\001', // 2038
'\370', // 2039
'\000', // 2040
'\000', // 2041
'\006', // 2042
'\000', // 2043
'\006', // 2044
'\000', // 2045
'\006', // 2046
'\000', // 2047
'\006', // 2048
'\000', // 2049
'\006', // 2050
'\170', // 2051
'\006', // 2052
'\374', // 2053
'\006', // 2054
'\216', // 2055
'\007', // 2056
'\006', // 2057
'\007', // 2058
'\003', // 2059
'\006', // 2060
'\003', // 2061
'\006', // 2062
'\003', // 2063
'\006', // 2064
'\003', // 2065
'\006', // 2066
'\003', // 2067
'\006', // 2068
'\003', // 2069
'\006', // 2070
'\006', // 2071
'\007', // 2072
'\216', // 2073
'\007', // 2074
'\374', // 2075
'\006', // 2076
'\170', // 2077
'\006', // 2078
'\160', // 2079
'\000', // 2080
'\374', // 2081
'\001', // 2082
'\216', // 2083
'\003', // 2084
'\006', // 2085
'\003', // 2086
'\003', // 2087
'\006', // 2088
'\003', // 2089
'\006', // 2090
'\377', // 2091
'\007', // 2092
'\377', // 2093
'\007', // 2094
'\003', // 2095
'\000', // 2096
'\003', // 2097
'\000', // 2098
'\006', // 2099
'\006', // 2100
'\016', // 2101
'\007', // 2102
'\374', // 2103
'\003', // 2104
'\360', // 2105
'\000', // 2106
'\070', // 2107
'\074', // 2108
'\014', // 2109
'\014', // 2110
'\014', // 2111
'\077', // 2112
'\077', // 2113
'\014', // 2114
'\014', // 2115
'\014', // 2116
'\014', // 2117
'\014', // 2118
'\014', // 2119
'\014', // 2120
'\014', // 2121
'\014', // 2122
'\014', // 2123
'\014', // 2124
'\014', // 2125
'\170', // 2126
'\006', // 2127
'\374', // 2128
'\006', // 2129
'\216', // 2130
'\007', // 2131
'\006', // 2132
'\007', // 2133
'\003', // 2134
'\006', // 2135
'\003', // 2136
'\006', // 2137
'\003', // 2138
'\006', // 2139
'\003', // 2140
'\006', // 2141
'\003', // 2142
'\006', // 2143
'\003', // 2144
'\006', // 2145
'\006', // 2146
'\007', // 2147
'\216', // 2148
'\007', // 2149
'\374', // 2150
'\006', // 2151
'\170', // 2152
'\006', // 2153
'\000', // 2154
'\006', // 2155
'\003', // 2156
'\006', // 2157
'\007', // 2158
'\003', // 2159
'\376', // 2160
'\003', // 2161
'\370', // 2162
'\000', // 2163
'\003', // 2164
'\000', // 2165
'\003', // 2166
'\000', // 2167
'\003', // 2168
'\000', // 2169
'\003', // 2170
'\000', // 2171
'\003', // 2172
'\000', // 2173
'\163', // 2174
'\000', // 2175
'\373', // 2176
'\001', // 2177
'\217', // 2178
'\001', // 2179
'\007', // 2180
'\003', // 2181
'\003', // 2182
'\003', // 2183
'\003', // 2184
'\003', // 2185
'\003', // 2186
'\003', // 2187
'\003', // 2188
'\003', // 2189
'\003', // 2190
'\003', // 2191
'\003', // 2192
'\003', // 2193
'\003', // 2194
'\003', // 2195
'\003', // 2196
'\003', // 2197
'\003', // 2198
'\003', // 2199
'\003', // 2200
'\003', // 2201
'\003', // 2202
'\003', // 2203
'\003', // 2204
'\000', // 2205
'\000', // 2206
'\003', // 2207
'\003', // 2208
'\003', // 2209
'\003', // 2210
'\003', // 2211
'\003', // 2212
'\003', // 2213
'\003', // 2214
'\003', // 2215
'\003', // 2216
'\003', // 2217
'\003', // 2218
'\003', // 2219
'\003', // 2220
'\014', // 2221
'\014', // 2222
'\014', // 2223
'\000', // 2224
'\000', // 2225
'\014', // 2226
'\014', // 2227
'\014', // 2228
'\014', // 2229
'\014', // 2230
'\014', // 2231
'\014', // 2232
'\014', // 2233
'\014', // 2234
'\014', // 2235
'\014', // 2236
'\014', // 2237
'\014', // 2238
'\014', // 2239
'\014', // 2240
'\014', // 2241
'\014', // 2242
'\017', // 2243
'\007', // 2244
'\003', // 2245
'\000', // 2246
'\003', // 2247
'\000', // 2248
'\003', // 2249
'\000', // 2250
'\003', // 2251
'\000', // 2252
'\003', // 2253
'\000', // 2254
'\203', // 2255
'\001', // 2256
'\303', // 2257
'\001', // 2258
'\343', // 2259
'\000', // 2260
'\163', // 2261
'\000', // 2262
'\073', // 2263
'\000', // 2264
'\037', // 2265
'\000', // 2266
'\077', // 2267
'\000', // 2268
'\163', // 2269
'\000', // 2270
'\143', // 2271
'\000', // 2272
'\343', // 2273
'\000', // 2274
'\303', // 2275
'\001', // 2276
'\203', // 2277
'\001', // 2278
'\203', // 2279
'\003', // 2280
'\003', // 2281
'\003', // 2282
'\003', // 2283
'\003', // 2284
'\003', // 2285
'\003', // 2286
'\003', // 2287
'\003', // 2288
'\003', // 2289
'\003', // 2290
'\003', // 2291
'\003', // 2292
'\003', // 2293
'\003', // 2294
'\003', // 2295
'\003', // 2296
'\003', // 2297
'\003', // 2298
'\003', // 2299
'\003', // 2300
'\003', // 2301
'\163', // 2302
'\074', // 2303
'\377', // 2304
'\176', // 2305
'\307', // 2306
'\343', // 2307
'\203', // 2308
'\301', // 2309
'\203', // 2310
'\301', // 2311
'\203', // 2312
'\301', // 2313
'\203', // 2314
'\301', // 2315
'\203', // 2316
'\301', // 2317
'\203', // 2318
'\301', // 2319
'\203', // 2320
'\301', // 2321
'\203', // 2322
'\301', // 2323
'\203', // 2324
'\301', // 2325
'\203', // 2326
'\301', // 2327
'\203', // 2328
'\301', // 2329
'\163', // 2330
'\000', // 2331
'\373', // 2332
'\001', // 2333
'\217', // 2334
'\001', // 2335
'\007', // 2336
'\003', // 2337
'\003', // 2338
'\003', // 2339
'\003', // 2340
'\003', // 2341
'\003', // 2342
'\003', // 2343
'\003', // 2344
'\003', // 2345
'\003', // 2346
'\003', // 2347
'\003', // 2348
'\003', // 2349
'\003', // 2350
'\003', // 2351
'\003', // 2352
'\003', // 2353
'\003', // 2354
'\003', // 2355
'\003', // 2356
'\003', // 2357
'\370', // 2358
'\000', // 2359
'\374', // 2360
'\001', // 2361
'\216', // 2362
'\003', // 2363
'\006', // 2364
'\003', // 2365
'\003', // 2366
'\006', // 2367
'\003', // 2368
'\006', // 2369
'\003', // 2370
'\006', // 2371
'\003', // 2372
'\006', // 2373
'\003', // 2374
'\006', // 2375
'\003', // 2376
'\006', // 2377
'\006', // 2378
'\003', // 2379
'\216', // 2380
'\003', // 2381
'\374', // 2382
'\001', // 2383
'\370', // 2384
'\000', // 2385
'\363', // 2386
'\000', // 2387
'\373', // 2388
'\001', // 2389
'\217', // 2390
'\003', // 2391
'\007', // 2392
'\003', // 2393
'\003', // 2394
'\006', // 2395
'\003', // 2396
'\006', // 2397
'\003', // 2398
'\006', // 2399
'\003', // 2400
'\006', // 2401
'\003', // 2402
'\006', // 2403
'\003', // 2404
'\006', // 2405
'\007', // 2406
'\003', // 2407
'\217', // 2408
'\003', // 2409
'\373', // 2410
'\001', // 2411
'\363', // 2412
'\000', // 2413
'\003', // 2414
'\000', // 2415
'\003', // 2416
'\000', // 2417
'\003', // 2418
'\000', // 2419
'\003', // 2420
'\000', // 2421
'\003', // 2422
'\000', // 2423
'\170', // 2424
'\006', // 2425
'\374', // 2426
'\006', // 2427
'\216', // 2428
'\007', // 2429
'\006', // 2430
'\007', // 2431
'\003', // 2432
'\006', // 2433
'\003', // 2434
'\006', // 2435
'\003', // 2436
'\006', // 2437
'\003', // 2438
'\006', // 2439
'\003', // 2440
'\006', // 2441
'\003', // 2442
'\006', // 2443
'\006', // 2444
'\007', // 2445
'\216', // 2446
'\007', // 2447
'\374', // 2448
'\006', // 2449
'\170', // 2450
'\006', // 2451
'\000', // 2452
'\006', // 2453
'\000', // 2454
'\006', // 2455
'\000', // 2456
'\006', // 2457
'\000', // 2458
'\006', // 2459
'\000', // 2460
'\006', // 2461
'\063', // 2462
'\073', // 2463
'\077', // 2464
'\007', // 2465
'\003', // 2466
'\003', // 2467
'\003', // 2468
'\003', // 2469
'\003', // 2470
'\003', // 2471
'\003', // 2472
'\003', // 2473
'\003', // 2474
'\003', // 2475
'\174', // 2476
'\000', // 2477
'\376', // 2478
'\001', // 2479
'\207', // 2480
'\003', // 2481
'\003', // 2482
'\003', // 2483
'\003', // 2484
'\000', // 2485
'\037', // 2486
'\000', // 2487
'\376', // 2488
'\000', // 2489
'\360', // 2490
'\001', // 2491
'\200', // 2492
'\003', // 2493
'\000', // 2494
'\003', // 2495
'\003', // 2496
'\003', // 2497
'\203', // 2498
'\003', // 2499
'\377', // 2500
'\001', // 2501
'\374', // 2502
'\000', // 2503
'\014', // 2504
'\014', // 2505
'\014', // 2506
'\014', // 2507
'\077', // 2508
'\077', // 2509
'\014', // 2510
'\014', // 2511
'\014', // 2512
'\014', // 2513
'\014', // 2514
'\014', // 2515
'\014', // 2516
'\014', // 2517
'\014', // 2518
'\014', // 2519
'\074', // 2520
'\070', // 2521
'\003', // 2522
'\003', // 2523
'\003', // 2524
'\003', // 2525
'\003', // 2526
'\003', // 2527
'\003', // 2528
'\003', // 2529
'\003', // 2530
'\003', // 2531
'\003', // 2532
'\003', // 2533
'\003', // 2534
'\003', // 2535
'\003', // 2536
'\003', // 2537
'\003', // 2538
'\003', // 2539
'\003', // 2540
'\003', // 2541
'\203', // 2542
'\003', // 2543
'\306', // 2544
'\003', // 2545
'\176', // 2546
'\003', // 2547
'\070', // 2548
'\003', // 2549
'\003', // 2550
'\006', // 2551
'\003', // 2552
'\006', // 2553
'\003', // 2554
'\006', // 2555
'\006', // 2556
'\003', // 2557
'\006', // 2558
'\003', // 2559
'\216', // 2560
'\003', // 2561
'\214', // 2562
'\001', // 2563
'\214', // 2564
'\001', // 2565
'\330', // 2566
'\000', // 2567
'\330', // 2568
'\000', // 2569
'\330', // 2570
'\000', // 2571
'\160', // 2572
'\000', // 2573
'\160', // 2574
'\000', // 2575
'\160', // 2576
'\000', // 2577
'\003', // 2578
'\003', // 2579
'\003', // 2580
'\003', // 2581
'\003', // 2582
'\003', // 2583
'\206', // 2584
'\207', // 2585
'\001', // 2586
'\206', // 2587
'\207', // 2588
'\001', // 2589
'\206', // 2590
'\207', // 2591
'\001', // 2592
'\214', // 2593
'\304', // 2594
'\000', // 2595
'\314', // 2596
'\314', // 2597
'\000', // 2598
'\314', // 2599
'\314', // 2600
'\000', // 2601
'\330', // 2602
'\154', // 2603
'\000', // 2604
'\130', // 2605
'\150', // 2606
'\000', // 2607
'\170', // 2608
'\170', // 2609
'\000', // 2610
'\160', // 2611
'\070', // 2612
'\000', // 2613
'\060', // 2614
'\060', // 2615
'\000', // 2616
'\060', // 2617
'\060', // 2618
'\000', // 2619
'\003', // 2620
'\003', // 2621
'\207', // 2622
'\003', // 2623
'\206', // 2624
'\001', // 2625
'\314', // 2626
'\000', // 2627
'\374', // 2628
'\000', // 2629
'\170', // 2630
'\000', // 2631
'\060', // 2632
'\000', // 2633
'\170', // 2634
'\000', // 2635
'\170', // 2636
'\000', // 2637
'\314', // 2638
'\000', // 2639
'\316', // 2640
'\001', // 2641
'\206', // 2642
'\001', // 2643
'\207', // 2644
'\003', // 2645
'\003', // 2646
'\003', // 2647
'\003', // 2648
'\014', // 2649
'\003', // 2650
'\014', // 2651
'\006', // 2652
'\014', // 2653
'\016', // 2654
'\006', // 2655
'\014', // 2656
'\006', // 2657
'\034', // 2658
'\007', // 2659
'\030', // 2660
'\003', // 2661
'\030', // 2662
'\003', // 2663
'\260', // 2664
'\001', // 2665
'\260', // 2666
'\001', // 2667
'\340', // 2668
'\001', // 2669
'\340', // 2670
'\000', // 2671
'\300', // 2672
'\000', // 2673
'\300', // 2674
'\000', // 2675
'\140', // 2676
'\000', // 2677
'\140', // 2678
'\000', // 2679
'\060', // 2680
'\000', // 2681
'\074', // 2682
'\000', // 2683
'\034', // 2684
'\000', // 2685
'\377', // 2686
'\003', // 2687
'\377', // 2688
'\003', // 2689
'\200', // 2690
'\001', // 2691
'\300', // 2692
'\000', // 2693
'\340', // 2694
'\000', // 2695
'\160', // 2696
'\000', // 2697
'\060', // 2698
'\000', // 2699
'\070', // 2700
'\000', // 2701
'\034', // 2702
'\000', // 2703
'\014', // 2704
'\000', // 2705
'\006', // 2706
'\000', // 2707
'\007', // 2708
'\000', // 2709
'\377', // 2710
'\003', // 2711
'\377', // 2712
'\003', // 2713
'\300', // 2714
'\377', // 2715
'\037', // 2716
'\300', // 2717
'\377', // 2718
'\037', // 2719
'\140', // 2720
'\006', // 2721
'\000', // 2722
'\140', // 2723
'\006', // 2724
'\000', // 2725
'\060', // 2726
'\006', // 2727
'\000', // 2728
'\060', // 2729
'\006', // 2730
'\000', // 2731
'\060', // 2732
'\006', // 2733
'\000', // 2734
'\030', // 2735
'\006', // 2736
'\000', // 2737
'\030', // 2738
'\376', // 2739
'\037', // 2740
'\030', // 2741
'\376', // 2742
'\037', // 2743
'\014', // 2744
'\006', // 2745
'\000', // 2746
'\374', // 2747
'\007', // 2748
'\000', // 2749
'\374', // 2750
'\007', // 2751
'\000', // 2752
'\006', // 2753
'\006', // 2754
'\000', // 2755
'\006', // 2756
'\006', // 2757
'\000', // 2758
'\006', // 2759
'\006', // 2760
'\000', // 2761
'\003', // 2762
'\006', // 2763
'\000', // 2764
'\003', // 2765
'\376', // 2766
'\037', // 2767
'\003', // 2768
'\376', // 2769
'\037', // 2770
'\370', // 2771
'\160', // 2772
'\000', // 2773
'\374', // 2774
'\375', // 2775
'\001', // 2776
'\206', // 2777
'\217', // 2778
'\003', // 2779
'\006', // 2780
'\007', // 2781
'\003', // 2782
'\000', // 2783
'\003', // 2784
'\006', // 2785
'\340', // 2786
'\003', // 2787
'\006', // 2788
'\374', // 2789
'\377', // 2790
'\007', // 2791
'\036', // 2792
'\377', // 2793
'\007', // 2794
'\007', // 2795
'\003', // 2796
'\000', // 2797
'\003', // 2798
'\003', // 2799
'\000', // 2800
'\203', // 2801
'\007', // 2802
'\006', // 2803
'\307', // 2804
'\017', // 2805
'\007', // 2806
'\176', // 2807
'\374', // 2808
'\003', // 2809
'\074', // 2810
'\360', // 2811
'\000', // 2812
'\003', // 2813
'\300', // 2814
'\003', // 2815
'\300', // 2816
'\003', // 2817
'\300', // 2818
'\003', // 2819
'\300', // 2820
'\003', // 2821
'\300', // 2822
'\003', // 2823
'\300', // 2824
'\003', // 2825
'\300', // 2826
'\003', // 2827
'\300', // 2828
'\003', // 2829
'\300', // 2830
'\003', // 2831
'\300', // 2832
'\003', // 2833
'\300', // 2834
'\003', // 2835
'\300', // 2836
'\303', // 2837
'\300', // 2838
'\303', // 2839
'\300', // 2840
'\303', // 2841
'\300', // 2842
'\303', // 2843
'\300', // 2844
'\203', // 2845
'\141', // 2846
'\203', // 2847
'\177', // 2848
'\003', // 2849
'\077', // 2850
'\303', // 2851
'\303', // 2852
'\303', // 2853
'\000', // 2854
'\000', // 2855
'\303', // 2856
'\303', // 2857
'\303', // 2858
'\303', // 2859
'\303', // 2860
'\303', // 2861
'\303', // 2862
'\303', // 2863
'\303', // 2864
'\303', // 2865
'\303', // 2866
'\303', // 2867
'\303', // 2868
'\303', // 2869
'\300', // 2870
'\300', // 2871
'\300', // 2872
'\360', // 2873
'\160', // 2874
'\340', // 2875
'\373', // 2876
'\037', // 2877
'\370', // 2878
'\377', // 2879
'\037', // 2880
'\074', // 2881
'\034', // 2882
'\000', // 2883
'\016', // 2884
'\030', // 2885
'\000', // 2886
'\006', // 2887
'\030', // 2888
'\000', // 2889
'\007', // 2890
'\030', // 2891
'\000', // 2892
'\003', // 2893
'\030', // 2894
'\000', // 2895
'\003', // 2896
'\030', // 2897
'\000', // 2898
'\003', // 2899
'\030', // 2900
'\000', // 2901
'\003', // 2902
'\370', // 2903
'\037', // 2904
'\003', // 2905
'\370', // 2906
'\037', // 2907
'\003', // 2908
'\030', // 2909
'\000', // 2910
'\003', // 2911
'\030', // 2912
'\000', // 2913
'\007', // 2914
'\030', // 2915
'\000', // 2916
'\006', // 2917
'\030', // 2918
'\000', // 2919
'\016', // 2920
'\030', // 2921
'\000', // 2922
'\074', // 2923
'\034', // 2924
'\000', // 2925
'\370', // 2926
'\377', // 2927
'\037', // 2928
'\340', // 2929
'\373', // 2930
'\037', // 2931
'\370', // 2932
'\340', // 2933
'\000', // 2934
'\374', // 2935
'\371', // 2936
'\003', // 2937
'\216', // 2938
'\037', // 2939
'\007', // 2940
'\006', // 2941
'\017', // 2942
'\006', // 2943
'\003', // 2944
'\006', // 2945
'\014', // 2946
'\003', // 2947
'\006', // 2948
'\014', // 2949
'\003', // 2950
'\376', // 2951
'\017', // 2952
'\003', // 2953
'\376', // 2954
'\017', // 2955
'\003', // 2956
'\006', // 2957
'\000', // 2958
'\003', // 2959
'\006', // 2960
'\000', // 2961
'\006', // 2962
'\017', // 2963
'\014', // 2964
'\216', // 2965
'\037', // 2966
'\016', // 2967
'\374', // 2968
'\371', // 2969
'\007', // 2970
'\370', // 2971
'\340', // 2972
'\001', // 2973
'\070', // 2974
'\003', // 2975
'\074', // 2976
'\003', // 2977
'\014', // 2978
'\003', // 2979
'\014', // 2980
'\000', // 2981
'\014', // 2982
'\000', // 2983
'\077', // 2984
'\003', // 2985
'\077', // 2986
'\003', // 2987
'\014', // 2988
'\003', // 2989
'\014', // 2990
'\003', // 2991
'\014', // 2992
'\003', // 2993
'\014', // 2994
'\003', // 2995
'\014', // 2996
'\003', // 2997
'\014', // 2998
'\003', // 2999
'\014', // 3000
'\003', // 3001
'\014', // 3002
'\003', // 3003
'\014', // 3004
'\003', // 3005
'\014', // 3006
'\003', // 3007
'\014', // 3008
'\003', // 3009
'\014', // 3010
'\003', // 3011
'\070', // 3012
'\003', // 3013
'\074', // 3014
'\003', // 3015
'\014', // 3016
'\003', // 3017
'\014', // 3018
'\003', // 3019
'\014', // 3020
'\003', // 3021
'\077', // 3022
'\003', // 3023
'\077', // 3024
'\003', // 3025
'\014', // 3026
'\003', // 3027
'\014', // 3028
'\003', // 3029
'\014', // 3030
'\003', // 3031
'\014', // 3032
'\003', // 3033
'\014', // 3034
'\003', // 3035
'\014', // 3036
'\003', // 3037
'\014', // 3038
'\003', // 3039
'\014', // 3040
'\003', // 3041
'\014', // 3042
'\003', // 3043
'\014', // 3044
'\003', // 3045
'\014', // 3046
'\003', // 3047
'\014', // 3048
'\003', // 3049
};


//the array of kern pairs  we support in this font
const static struct KERN_INFO Helvetica_Medium_R_24_kern[179] = {
	{ //kern pair semicolonspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-1,
	},
	{ //kern pair periodspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-2,
	},
	{ //kern pair colonspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair spaceW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair xe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Ay
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair Aw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair Av
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair Au
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair AY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-3,
	},
	{ //kern pair AW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair AV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-2,
	},
	{ //kern pair AU
	//encoding of the second char in the pair
	85,
	//offset for the pair
	-1,
	},
	{ //kern pair AT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-3,
	},
	{ //kern pair AQ
	//encoding of the second char in the pair
	81,
	//offset for the pair
	-1,
	},
	{ //kern pair AO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair AG
	//encoding of the second char in the pair
	71,
	//offset for the pair
	-1,
	},
	{ //kern pair AC
	//encoding of the second char in the pair
	67,
	//offset for the pair
	-1,
	},
	{ //kern pair Cperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ccomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair Bperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Bcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair Dperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair Dcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair DY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair DW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair DV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-2,
	},
	{ //kern pair DA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Fr
	//encoding of the second char in the pair
	114,
	//offset for the pair
	-1,
	},
	{ //kern pair Fperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-4,
	},
	{ //kern pair Fo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Fe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Fcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-4,
	},
	{ //kern pair Fa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair FA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair Ky
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair Ku
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Ko
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Ke
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair KO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair Ju
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Jperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Jcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair Ja
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair JA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Ly
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair LY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-4,
	},
	{ //kern pair LW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-2,
	},
	{ //kern pair LV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-3,
	},
	{ //kern pair LT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-3,
	},
	{ //kern pair Operiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ocomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair OY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair OX
	//encoding of the second char in the pair
	88,
	//offset for the pair
	-2,
	},
	{ //kern pair OW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair OV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair OT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair OA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Pperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-5,
	},
	{ //kern pair Po
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Pe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Pcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-5,
	},
	{ //kern pair Pa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair PA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-3,
	},
	{ //kern pair Speriod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Scomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair RY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-1,
	},
	{ //kern pair RW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair RV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair RU
	//encoding of the second char in the pair
	85,
	//offset for the pair
	-1,
	},
	{ //kern pair RT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair RO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair Uperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ucomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair UA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Ty
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-3,
	},
	{ //kern pair Tw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-3,
	},
	{ //kern pair Tu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-3,
	},
	{ //kern pair Tsemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	-1,
	},
	{ //kern pair Tr
	//encoding of the second char in the pair
	114,
	//offset for the pair
	-3,
	},
	{ //kern pair Tperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair To
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-3,
	},
	{ //kern pair Thyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-4,
	},
	{ //kern pair Te
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-3,
	},
	{ //kern pair Tcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair Tcolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	-1,
	},
	{ //kern pair Ta
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-3,
	},
	{ //kern pair TO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair TA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-3,
	},
	{ //kern pair Wy
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair Wu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Wperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair Wo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Whyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-1,
	},
	{ //kern pair We
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Wcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair Wa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair WO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair WA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Vu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-2,
	},
	{ //kern pair Vsemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	-1,
	},
	{ //kern pair Vperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair Vo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-2,
	},
	{ //kern pair Vhyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-2,
	},
	{ //kern pair Ve
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-2,
	},
	{ //kern pair Vcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair Vcolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	-1,
	},
	{ //kern pair Va
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-2,
	},
	{ //kern pair VO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair VG
	//encoding of the second char in the pair
	71,
	//offset for the pair
	-1,
	},
	{ //kern pair VA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair Yu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-3,
	},
	{ //kern pair Ysemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	-2,
	},
	{ //kern pair Yperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-4,
	},
	{ //kern pair Yo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-4,
	},
	{ //kern pair Yi
	//encoding of the second char in the pair
	105,
	//offset for the pair
	-1,
	},
	{ //kern pair Yhyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-4,
	},
	{ //kern pair Ye
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-4,
	},
	{ //kern pair Ycomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-4,
	},
	{ //kern pair Ycolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	-2,
	},
	{ //kern pair Ya
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-4,
	},
	{ //kern pair YO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-2,
	},
	{ //kern pair YA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-3,
	},
	{ //kern pair ay
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair aw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair av
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair ck
	//encoding of the second char in the pair
	107,
	//offset for the pair
	-1,
	},
	{ //kern pair by
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair bv
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair bu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair bperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair bl
	//encoding of the second char in the pair
	108,
	//offset for the pair
	-1,
	},
	{ //kern pair bcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair ey
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair ex
	//encoding of the second char in the pair
	120,
	//offset for the pair
	-1,
	},
	{ //kern pair ew
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair ev
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair fperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair fo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair fe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair fcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair fa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair hy
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair ko
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair ke
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair oy
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair ox
	//encoding of the second char in the pair
	120,
	//offset for the pair
	-1,
	},
	{ //kern pair operiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair ocomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair nv
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair py
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair pperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair pcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair sw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair ry
	//encoding of the second char in the pair
	121,
	//offset for the pair
	1,
	},
	{ //kern pair rv
	//encoding of the second char in the pair
	118,
	//offset for the pair
	1,
	},
	{ //kern pair rt
	//encoding of the second char in the pair
	116,
	//offset for the pair
	1,
	},
	{ //kern pair rsemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	1,
	},
	{ //kern pair rperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair rp
	//encoding of the second char in the pair
	112,
	//offset for the pair
	1,
	},
	{ //kern pair rn
	//encoding of the second char in the pair
	110,
	//offset for the pair
	1,
	},
	{ //kern pair rm
	//encoding of the second char in the pair
	109,
	//offset for the pair
	1,
	},
	{ //kern pair rcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair rcolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	1,
	},
	{ //kern pair wperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair wcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair vperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair vo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair ve
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair vcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair va
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair yperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair yo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair ye
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair ycomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair ya
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},

};


//the array of characters we support in this font
const static struct FONT_CHAR Helvetica_Medium_R_24_ligatures[8] = {
	{
	//encoding = 2nd letter in ligature for character AE
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	23,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2714,
	},
	{
	//encoding = 2nd letter in ligature for character ae
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	21,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2771,
	},
	{
	//encoding = 2nd letter in ligature for character fi
	105,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2974,
	},
	{
	//encoding = 2nd letter in ligature for character fl
	108,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	3012,
	},
	{
	//encoding = 2nd letter in ligature for character IJ
	74,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	21,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	3,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2813,
	},
	{
	//encoding = 2nd letter in ligature for character OE
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	23,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2875,
	},
	{
	//encoding = 2nd letter in ligature for character ij
	106,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2851,
	},
	{
	//encoding = 2nd letter in ligature for character oe
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	22,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	2932,
	},

};


//the array of characters we support in this font
const static struct FONT_CHAR Helvetica_Medium_R_24_chars[91] = {
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character space
	32,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	1,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	3,
	//kernCount = num of entries in  the kern table starting with this character.  
	4,
	//offset into the bitmap for this character  
	0,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character exclam
	33,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character quotedbl
	34,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	13,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	20,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character numbersign
	35,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	17,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	26,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character dollar
	36,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	21,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-2,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	60,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character percent
	37,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	22,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	102,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character ampersand
	38,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	156,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character quotesingle
	39,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	13,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	192,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character parenleft
	40,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	198,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character parenright
	41,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	222,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character asterisk
	42,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	7,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	12,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	246,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character plus
	43,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	12,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	1,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	253,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character comma
	44,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-3,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	277,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character hyphen
	45,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	2,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	6,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	283,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character period
	46,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	3,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	1,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	285,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character slash
	47,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	288,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character zero
	48,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	307,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character one
	49,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	343,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character two
	50,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	361,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character three
	51,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	397,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character four
	52,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	433,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character five
	53,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	469,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character six
	54,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	505,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character seven
	55,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	541,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character eight
	56,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	577,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character nine
	57,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	613,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character colon
	58,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	2,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	649,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character semicolon
	59,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	17,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-3,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	663,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character less
	60,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	12,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	1,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	680,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character equal
	61,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	704,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character greater
	62,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	12,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	1,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	716,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character question
	63,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	740,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character at
	64,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	25,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	23,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	778,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character A
	65,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	1,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	8,
	//kernCount = num of entries in  the kern table starting with this character.  
	13,
	//offset into the bitmap for this character  
	847,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character B
	66,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	23,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	885,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character C
	67,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	21,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	923,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character D
	68,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	25,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	961,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character E
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	999,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character F
	70,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	31,
	//kernCount = num of entries in  the kern table starting with this character.  
	7,
	//offset into the bitmap for this character  
	1037,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character G
	71,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	19,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1075,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character H
	72,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1113,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character I
	73,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	3,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	65,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1151,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character J
	74,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	43,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	1170,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character K
	75,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	38,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	1208,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character L
	76,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	48,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	1246,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character M
	77,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	21,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1284,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character N
	78,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1341,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character O
	79,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	81,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	53,
	//kernCount = num of entries in  the kern table starting with this character.  
	8,
	//offset into the bitmap for this character  
	1379,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character P
	80,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	61,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	1417,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Q
	81,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1455,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character R
	82,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	69,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	1493,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character S
	83,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	67,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1531,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character T
	84,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	78,
	//kernCount = num of entries in  the kern table starting with this character.  
	14,
	//offset into the bitmap for this character  
	1569,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character U
	85,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	75,
	//kernCount = num of entries in  the kern table starting with this character.  
	3,
	//offset into the bitmap for this character  
	1607,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character V
	86,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	102,
	//kernCount = num of entries in  the kern table starting with this character.  
	12,
	//offset into the bitmap for this character  
	1645,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character W
	87,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	22,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	92,
	//kernCount = num of entries in  the kern table starting with this character.  
	10,
	//offset into the bitmap for this character  
	1683,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character X
	88,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1740,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Y
	89,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	114,
	//kernCount = num of entries in  the kern table starting with this character.  
	12,
	//offset into the bitmap for this character  
	1778,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Z
	90,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1816,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character bracketleft
	91,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1854,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character backslash
	92,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1878,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character bracketright
	93,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1897,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character asciicircum
	94,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	9,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	10,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1921,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character underscore
	95,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	2,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1939,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character grave
	96,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	4,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	15,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1943,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character a
	97,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	17,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	126,
	//kernCount = num of entries in  the kern table starting with this character.  
	3,
	//offset into the bitmap for this character  
	1947,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character b
	98,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	130,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	1975,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character c
	99,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	129,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	2013,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character d
	100,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2041,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character e
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	136,
	//kernCount = num of entries in  the kern table starting with this character.  
	4,
	//offset into the bitmap for this character  
	2079,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character f
	102,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	34,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	140,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	2107,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character g
	103,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2126,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character h
	104,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	145,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	2164,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character i
	105,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	97,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2202,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character j
	106,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	24,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2221,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character k
	107,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	146,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	2245,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character l
	108,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2283,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character m
	109,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	20,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2302,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character n
	110,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	152,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	2330,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character o
	111,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	113,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	148,
	//kernCount = num of entries in  the kern table starting with this character.  
	4,
	//offset into the bitmap for this character  
	2358,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character p
	112,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	153,
	//kernCount = num of entries in  the kern table starting with this character.  
	3,
	//offset into the bitmap for this character  
	2386,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character q
	113,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2424,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character r
	114,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	157,
	//kernCount = num of entries in  the kern table starting with this character.  
	10,
	//offset into the bitmap for this character  
	2462,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character s
	115,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	156,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	2476,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character t
	116,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2504,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character u
	117,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2522,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character v
	118,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	169,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	2550,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character w
	119,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	167,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	2578,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character x
	120,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	7,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	2620,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character y
	121,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	19,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	-5,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	174,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	2648,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character z
	122,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	2686,
	},

};




// the main font structure
const static struct FONT Helvetica_Medium_R_24_font = {
//ascent
22,
//descent
5,
//resolution
75,
//pointSize
240,
//bitmap ptr
Helvetica_Medium_R_24_bitmap,
//bitmapSize
3050,
//char ptr
Helvetica_Medium_R_24_chars,
//number of characters + ligatures in this font
91,
//kern ptr
Helvetica_Medium_R_24_kern,
//number of kern pairs in this font
179,
//ligature ptr
Helvetica_Medium_R_24_ligatures,
//number of ligatures in this font
8,
//ascii offset (e.g. ascii to index offset) 
32
};
