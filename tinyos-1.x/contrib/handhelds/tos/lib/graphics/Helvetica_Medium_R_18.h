// this is the array of bitmaps all the chars point into
const static unsigned char Helvetica_Medium_R_18_bitmap[1825] = {
'\000', // 0
'\003', // 1
'\003', // 2
'\003', // 3
'\003', // 4
'\003', // 5
'\003', // 6
'\003', // 7
'\003', // 8
'\001', // 9
'\001', // 10
'\000', // 11
'\000', // 12
'\003', // 13
'\003', // 14
'\033', // 15
'\033', // 16
'\033', // 17
'\011', // 18
'\011', // 19
'\220', // 20
'\000', // 21
'\220', // 22
'\000', // 23
'\220', // 24
'\000', // 25
'\376', // 26
'\003', // 27
'\376', // 28
'\003', // 29
'\110', // 30
'\000', // 31
'\110', // 32
'\000', // 33
'\110', // 34
'\000', // 35
'\377', // 36
'\001', // 37
'\377', // 38
'\001', // 39
'\044', // 40
'\000', // 41
'\044', // 42
'\000', // 43
'\044', // 44
'\000', // 45
'\020', // 46
'\000', // 47
'\174', // 48
'\000', // 49
'\376', // 50
'\000', // 51
'\323', // 52
'\000', // 53
'\023', // 54
'\000', // 55
'\027', // 56
'\000', // 57
'\036', // 58
'\000', // 59
'\174', // 60
'\000', // 61
'\360', // 62
'\000', // 63
'\220', // 64
'\001', // 65
'\223', // 66
'\001', // 67
'\327', // 68
'\001', // 69
'\376', // 70
'\000', // 71
'\174', // 72
'\000', // 73
'\020', // 74
'\000', // 75
'\020', // 76
'\000', // 77
'\036', // 78
'\006', // 79
'\077', // 80
'\003', // 81
'\063', // 82
'\003', // 83
'\263', // 84
'\001', // 85
'\277', // 86
'\001', // 87
'\336', // 88
'\000', // 89
'\300', // 90
'\000', // 91
'\140', // 92
'\036', // 93
'\140', // 94
'\077', // 95
'\060', // 96
'\063', // 97
'\060', // 98
'\063', // 99
'\030', // 100
'\077', // 101
'\030', // 102
'\036', // 103
'\074', // 104
'\000', // 105
'\176', // 106
'\000', // 107
'\146', // 108
'\000', // 109
'\146', // 110
'\000', // 111
'\074', // 112
'\000', // 113
'\076', // 114
'\000', // 115
'\167', // 116
'\003', // 117
'\143', // 118
'\003', // 119
'\303', // 120
'\003', // 121
'\303', // 122
'\001', // 123
'\347', // 124
'\003', // 125
'\176', // 126
'\007', // 127
'\074', // 128
'\016', // 129
'\001', // 130
'\001', // 131
'\001', // 132
'\001', // 133
'\001', // 134
'\010', // 135
'\014', // 136
'\006', // 137
'\006', // 138
'\003', // 139
'\003', // 140
'\003', // 141
'\003', // 142
'\003', // 143
'\003', // 144
'\003', // 145
'\003', // 146
'\003', // 147
'\003', // 148
'\006', // 149
'\006', // 150
'\014', // 151
'\010', // 152
'\001', // 153
'\003', // 154
'\006', // 155
'\006', // 156
'\014', // 157
'\014', // 158
'\014', // 159
'\014', // 160
'\014', // 161
'\014', // 162
'\014', // 163
'\014', // 164
'\014', // 165
'\014', // 166
'\006', // 167
'\006', // 168
'\003', // 169
'\001', // 170
'\004', // 171
'\004', // 172
'\037', // 173
'\016', // 174
'\016', // 175
'\021', // 176
'\030', // 177
'\030', // 178
'\030', // 179
'\030', // 180
'\377', // 181
'\377', // 182
'\030', // 183
'\030', // 184
'\030', // 185
'\030', // 186
'\003', // 187
'\003', // 188
'\002', // 189
'\002', // 190
'\001', // 191
'\037', // 192
'\037', // 193
'\003', // 194
'\003', // 195
'\030', // 196
'\030', // 197
'\010', // 198
'\010', // 199
'\014', // 200
'\014', // 201
'\004', // 202
'\004', // 203
'\006', // 204
'\006', // 205
'\002', // 206
'\002', // 207
'\003', // 208
'\003', // 209
'\074', // 210
'\176', // 211
'\146', // 212
'\303', // 213
'\303', // 214
'\303', // 215
'\303', // 216
'\303', // 217
'\303', // 218
'\303', // 219
'\146', // 220
'\176', // 221
'\074', // 222
'\030', // 223
'\037', // 224
'\037', // 225
'\030', // 226
'\030', // 227
'\030', // 228
'\030', // 229
'\030', // 230
'\030', // 231
'\030', // 232
'\030', // 233
'\030', // 234
'\030', // 235
'\074', // 236
'\177', // 237
'\303', // 238
'\300', // 239
'\340', // 240
'\160', // 241
'\070', // 242
'\034', // 243
'\016', // 244
'\007', // 245
'\003', // 246
'\377', // 247
'\377', // 248
'\074', // 249
'\176', // 250
'\303', // 251
'\303', // 252
'\140', // 253
'\070', // 254
'\170', // 255
'\340', // 256
'\300', // 257
'\303', // 258
'\343', // 259
'\176', // 260
'\074', // 261
'\300', // 262
'\000', // 263
'\340', // 264
'\000', // 265
'\360', // 266
'\000', // 267
'\330', // 268
'\000', // 269
'\314', // 270
'\000', // 271
'\314', // 272
'\000', // 273
'\306', // 274
'\000', // 275
'\303', // 276
'\000', // 277
'\377', // 278
'\001', // 279
'\377', // 280
'\001', // 281
'\300', // 282
'\000', // 283
'\300', // 284
'\000', // 285
'\300', // 286
'\000', // 287
'\177', // 288
'\177', // 289
'\003', // 290
'\003', // 291
'\077', // 292
'\177', // 293
'\343', // 294
'\300', // 295
'\300', // 296
'\303', // 297
'\343', // 298
'\177', // 299
'\076', // 300
'\074', // 301
'\376', // 302
'\306', // 303
'\003', // 304
'\003', // 305
'\073', // 306
'\177', // 307
'\303', // 308
'\303', // 309
'\303', // 310
'\307', // 311
'\176', // 312
'\074', // 313
'\377', // 314
'\377', // 315
'\300', // 316
'\140', // 317
'\060', // 318
'\060', // 319
'\030', // 320
'\030', // 321
'\014', // 322
'\014', // 323
'\014', // 324
'\006', // 325
'\006', // 326
'\074', // 327
'\176', // 328
'\347', // 329
'\303', // 330
'\303', // 331
'\146', // 332
'\176', // 333
'\146', // 334
'\303', // 335
'\303', // 336
'\347', // 337
'\176', // 338
'\074', // 339
'\074', // 340
'\176', // 341
'\343', // 342
'\303', // 343
'\303', // 344
'\303', // 345
'\376', // 346
'\334', // 347
'\300', // 348
'\300', // 349
'\143', // 350
'\177', // 351
'\076', // 352
'\003', // 353
'\003', // 354
'\000', // 355
'\000', // 356
'\000', // 357
'\000', // 358
'\000', // 359
'\000', // 360
'\003', // 361
'\003', // 362
'\003', // 363
'\003', // 364
'\000', // 365
'\000', // 366
'\000', // 367
'\000', // 368
'\000', // 369
'\000', // 370
'\003', // 371
'\003', // 372
'\002', // 373
'\002', // 374
'\001', // 375
'\300', // 376
'\360', // 377
'\074', // 378
'\016', // 379
'\003', // 380
'\016', // 381
'\074', // 382
'\360', // 383
'\300', // 384
'\177', // 385
'\177', // 386
'\000', // 387
'\000', // 388
'\177', // 389
'\177', // 390
'\003', // 391
'\017', // 392
'\074', // 393
'\160', // 394
'\300', // 395
'\160', // 396
'\074', // 397
'\017', // 398
'\003', // 399
'\076', // 400
'\177', // 401
'\143', // 402
'\143', // 403
'\160', // 404
'\070', // 405
'\034', // 406
'\014', // 407
'\014', // 408
'\014', // 409
'\000', // 410
'\000', // 411
'\014', // 412
'\014', // 413
'\300', // 414
'\017', // 415
'\360', // 416
'\077', // 417
'\070', // 418
'\160', // 419
'\014', // 420
'\140', // 421
'\306', // 422
'\315', // 423
'\346', // 424
'\316', // 425
'\143', // 426
'\314', // 427
'\063', // 428
'\306', // 429
'\063', // 430
'\146', // 431
'\063', // 432
'\146', // 433
'\063', // 434
'\063', // 435
'\363', // 436
'\037', // 437
'\346', // 438
'\016', // 439
'\016', // 440
'\000', // 441
'\034', // 442
'\000', // 443
'\370', // 444
'\017', // 445
'\340', // 446
'\007', // 447
'\140', // 448
'\000', // 449
'\140', // 450
'\000', // 451
'\360', // 452
'\000', // 453
'\360', // 454
'\000', // 455
'\230', // 456
'\001', // 457
'\230', // 458
'\001', // 459
'\014', // 460
'\003', // 461
'\014', // 462
'\003', // 463
'\374', // 464
'\003', // 465
'\376', // 466
'\007', // 467
'\006', // 468
'\006', // 469
'\006', // 470
'\006', // 471
'\003', // 472
'\014', // 473
'\003', // 474
'\014', // 475
'\377', // 476
'\000', // 477
'\377', // 478
'\001', // 479
'\203', // 480
'\003', // 481
'\003', // 482
'\003', // 483
'\003', // 484
'\003', // 485
'\203', // 486
'\001', // 487
'\377', // 488
'\001', // 489
'\377', // 490
'\003', // 491
'\003', // 492
'\007', // 493
'\003', // 494
'\006', // 495
'\003', // 496
'\006', // 497
'\003', // 498
'\007', // 499
'\377', // 500
'\003', // 501
'\377', // 502
'\001', // 503
'\360', // 504
'\001', // 505
'\374', // 506
'\007', // 507
'\016', // 508
'\016', // 509
'\006', // 510
'\014', // 511
'\007', // 512
'\000', // 513
'\003', // 514
'\000', // 515
'\003', // 516
'\000', // 517
'\003', // 518
'\000', // 519
'\003', // 520
'\000', // 521
'\007', // 522
'\000', // 523
'\006', // 524
'\014', // 525
'\016', // 526
'\016', // 527
'\374', // 528
'\007', // 529
'\360', // 530
'\001', // 531
'\377', // 532
'\000', // 533
'\377', // 534
'\001', // 535
'\203', // 536
'\003', // 537
'\003', // 538
'\003', // 539
'\003', // 540
'\006', // 541
'\003', // 542
'\006', // 543
'\003', // 544
'\006', // 545
'\003', // 546
'\006', // 547
'\003', // 548
'\006', // 549
'\003', // 550
'\006', // 551
'\003', // 552
'\003', // 553
'\203', // 554
'\003', // 555
'\377', // 556
'\001', // 557
'\377', // 558
'\000', // 559
'\377', // 560
'\001', // 561
'\377', // 562
'\001', // 563
'\003', // 564
'\000', // 565
'\003', // 566
'\000', // 567
'\003', // 568
'\000', // 569
'\003', // 570
'\000', // 571
'\377', // 572
'\000', // 573
'\377', // 574
'\000', // 575
'\003', // 576
'\000', // 577
'\003', // 578
'\000', // 579
'\003', // 580
'\000', // 581
'\003', // 582
'\000', // 583
'\377', // 584
'\001', // 585
'\377', // 586
'\001', // 587
'\377', // 588
'\001', // 589
'\377', // 590
'\001', // 591
'\003', // 592
'\000', // 593
'\003', // 594
'\000', // 595
'\003', // 596
'\000', // 597
'\003', // 598
'\000', // 599
'\377', // 600
'\000', // 601
'\377', // 602
'\000', // 603
'\003', // 604
'\000', // 605
'\003', // 606
'\000', // 607
'\003', // 608
'\000', // 609
'\003', // 610
'\000', // 611
'\003', // 612
'\000', // 613
'\003', // 614
'\000', // 615
'\360', // 616
'\001', // 617
'\374', // 618
'\007', // 619
'\016', // 620
'\016', // 621
'\006', // 622
'\014', // 623
'\007', // 624
'\014', // 625
'\003', // 626
'\000', // 627
'\003', // 628
'\000', // 629
'\203', // 630
'\017', // 631
'\203', // 632
'\017', // 633
'\007', // 634
'\014', // 635
'\006', // 636
'\014', // 637
'\016', // 638
'\016', // 639
'\374', // 640
'\017', // 641
'\360', // 642
'\015', // 643
'\003', // 644
'\006', // 645
'\003', // 646
'\006', // 647
'\003', // 648
'\006', // 649
'\003', // 650
'\006', // 651
'\003', // 652
'\006', // 653
'\003', // 654
'\006', // 655
'\377', // 656
'\007', // 657
'\377', // 658
'\007', // 659
'\003', // 660
'\006', // 661
'\003', // 662
'\006', // 663
'\003', // 664
'\006', // 665
'\003', // 666
'\006', // 667
'\003', // 668
'\006', // 669
'\003', // 670
'\006', // 671
'\003', // 672
'\003', // 673
'\003', // 674
'\003', // 675
'\003', // 676
'\003', // 677
'\003', // 678
'\003', // 679
'\003', // 680
'\003', // 681
'\003', // 682
'\003', // 683
'\003', // 684
'\003', // 685
'\300', // 686
'\300', // 687
'\300', // 688
'\300', // 689
'\300', // 690
'\300', // 691
'\300', // 692
'\300', // 693
'\300', // 694
'\303', // 695
'\303', // 696
'\347', // 697
'\176', // 698
'\074', // 699
'\003', // 700
'\007', // 701
'\203', // 702
'\003', // 703
'\303', // 704
'\001', // 705
'\343', // 706
'\000', // 707
'\163', // 708
'\000', // 709
'\073', // 710
'\000', // 711
'\037', // 712
'\000', // 713
'\077', // 714
'\000', // 715
'\163', // 716
'\000', // 717
'\343', // 718
'\000', // 719
'\303', // 720
'\001', // 721
'\203', // 722
'\003', // 723
'\003', // 724
'\007', // 725
'\003', // 726
'\016', // 727
'\003', // 728
'\003', // 729
'\003', // 730
'\003', // 731
'\003', // 732
'\003', // 733
'\003', // 734
'\003', // 735
'\003', // 736
'\003', // 737
'\003', // 738
'\003', // 739
'\377', // 740
'\377', // 741
'\003', // 742
'\060', // 743
'\003', // 744
'\060', // 745
'\007', // 746
'\070', // 747
'\007', // 748
'\070', // 749
'\017', // 750
'\074', // 751
'\017', // 752
'\074', // 753
'\033', // 754
'\066', // 755
'\033', // 756
'\066', // 757
'\063', // 758
'\063', // 759
'\063', // 760
'\063', // 761
'\043', // 762
'\061', // 763
'\343', // 764
'\061', // 765
'\303', // 766
'\060', // 767
'\303', // 768
'\060', // 769
'\003', // 770
'\006', // 771
'\007', // 772
'\006', // 773
'\017', // 774
'\006', // 775
'\017', // 776
'\006', // 777
'\033', // 778
'\006', // 779
'\063', // 780
'\006', // 781
'\063', // 782
'\006', // 783
'\143', // 784
'\006', // 785
'\143', // 786
'\006', // 787
'\303', // 788
'\006', // 789
'\203', // 790
'\007', // 791
'\203', // 792
'\007', // 793
'\003', // 794
'\007', // 795
'\003', // 796
'\006', // 797
'\360', // 798
'\001', // 799
'\374', // 800
'\007', // 801
'\016', // 802
'\016', // 803
'\006', // 804
'\014', // 805
'\007', // 806
'\034', // 807
'\003', // 808
'\030', // 809
'\003', // 810
'\030', // 811
'\003', // 812
'\030', // 813
'\003', // 814
'\030', // 815
'\007', // 816
'\034', // 817
'\006', // 818
'\014', // 819
'\016', // 820
'\016', // 821
'\374', // 822
'\007', // 823
'\360', // 824
'\001', // 825
'\377', // 826
'\000', // 827
'\377', // 828
'\001', // 829
'\203', // 830
'\003', // 831
'\003', // 832
'\003', // 833
'\003', // 834
'\003', // 835
'\203', // 836
'\003', // 837
'\377', // 838
'\001', // 839
'\377', // 840
'\000', // 841
'\003', // 842
'\000', // 843
'\003', // 844
'\000', // 845
'\003', // 846
'\000', // 847
'\003', // 848
'\000', // 849
'\003', // 850
'\000', // 851
'\003', // 852
'\000', // 853
'\360', // 854
'\001', // 855
'\374', // 856
'\007', // 857
'\016', // 858
'\016', // 859
'\006', // 860
'\014', // 861
'\007', // 862
'\034', // 863
'\003', // 864
'\030', // 865
'\003', // 866
'\030', // 867
'\003', // 868
'\030', // 869
'\003', // 870
'\030', // 871
'\207', // 872
'\035', // 873
'\206', // 874
'\015', // 875
'\016', // 876
'\017', // 877
'\374', // 878
'\007', // 879
'\360', // 880
'\015', // 881
'\000', // 882
'\014', // 883
'\377', // 884
'\000', // 885
'\377', // 886
'\001', // 887
'\203', // 888
'\003', // 889
'\003', // 890
'\003', // 891
'\003', // 892
'\003', // 893
'\203', // 894
'\003', // 895
'\377', // 896
'\001', // 897
'\377', // 898
'\000', // 899
'\203', // 900
'\001', // 901
'\203', // 902
'\001', // 903
'\003', // 904
'\003', // 905
'\003', // 906
'\003', // 907
'\003', // 908
'\003', // 909
'\003', // 910
'\003', // 911
'\370', // 912
'\000', // 913
'\376', // 914
'\003', // 915
'\007', // 916
'\007', // 917
'\003', // 918
'\006', // 919
'\007', // 920
'\000', // 921
'\076', // 922
'\000', // 923
'\370', // 924
'\000', // 925
'\300', // 926
'\003', // 927
'\000', // 928
'\007', // 929
'\000', // 930
'\006', // 931
'\003', // 932
'\006', // 933
'\007', // 934
'\007', // 935
'\376', // 936
'\003', // 937
'\374', // 938
'\000', // 939
'\377', // 940
'\003', // 941
'\377', // 942
'\003', // 943
'\060', // 944
'\000', // 945
'\060', // 946
'\000', // 947
'\060', // 948
'\000', // 949
'\060', // 950
'\000', // 951
'\060', // 952
'\000', // 953
'\060', // 954
'\000', // 955
'\060', // 956
'\000', // 957
'\060', // 958
'\000', // 959
'\060', // 960
'\000', // 961
'\060', // 962
'\000', // 963
'\060', // 964
'\000', // 965
'\060', // 966
'\000', // 967
'\003', // 968
'\006', // 969
'\003', // 970
'\006', // 971
'\003', // 972
'\006', // 973
'\003', // 974
'\006', // 975
'\003', // 976
'\006', // 977
'\003', // 978
'\006', // 979
'\003', // 980
'\006', // 981
'\003', // 982
'\006', // 983
'\003', // 984
'\006', // 985
'\003', // 986
'\006', // 987
'\003', // 988
'\006', // 989
'\006', // 990
'\003', // 991
'\376', // 992
'\003', // 993
'\370', // 994
'\000', // 995
'\003', // 996
'\014', // 997
'\003', // 998
'\014', // 999
'\006', // 1000
'\006', // 1001
'\006', // 1002
'\006', // 1003
'\006', // 1004
'\006', // 1005
'\014', // 1006
'\003', // 1007
'\014', // 1008
'\003', // 1009
'\014', // 1010
'\003', // 1011
'\230', // 1012
'\001', // 1013
'\230', // 1014
'\001', // 1015
'\230', // 1016
'\001', // 1017
'\360', // 1018
'\000', // 1019
'\360', // 1020
'\000', // 1021
'\140', // 1022
'\000', // 1023
'\203', // 1024
'\301', // 1025
'\203', // 1026
'\301', // 1027
'\203', // 1028
'\301', // 1029
'\303', // 1030
'\303', // 1031
'\306', // 1032
'\143', // 1033
'\106', // 1034
'\142', // 1035
'\146', // 1036
'\146', // 1037
'\146', // 1038
'\146', // 1039
'\154', // 1040
'\066', // 1041
'\154', // 1042
'\066', // 1043
'\054', // 1044
'\064', // 1045
'\070', // 1046
'\034', // 1047
'\030', // 1048
'\030', // 1049
'\030', // 1050
'\030', // 1051
'\003', // 1052
'\006', // 1053
'\007', // 1054
'\007', // 1055
'\006', // 1056
'\003', // 1057
'\216', // 1058
'\003', // 1059
'\214', // 1060
'\001', // 1061
'\330', // 1062
'\000', // 1063
'\160', // 1064
'\000', // 1065
'\160', // 1066
'\000', // 1067
'\330', // 1068
'\000', // 1069
'\214', // 1070
'\001', // 1071
'\216', // 1072
'\003', // 1073
'\006', // 1074
'\003', // 1075
'\007', // 1076
'\007', // 1077
'\003', // 1078
'\006', // 1079
'\003', // 1080
'\014', // 1081
'\003', // 1082
'\014', // 1083
'\006', // 1084
'\006', // 1085
'\006', // 1086
'\006', // 1087
'\014', // 1088
'\003', // 1089
'\014', // 1090
'\003', // 1091
'\230', // 1092
'\001', // 1093
'\360', // 1094
'\000', // 1095
'\140', // 1096
'\000', // 1097
'\140', // 1098
'\000', // 1099
'\140', // 1100
'\000', // 1101
'\140', // 1102
'\000', // 1103
'\140', // 1104
'\000', // 1105
'\140', // 1106
'\000', // 1107
'\377', // 1108
'\003', // 1109
'\377', // 1110
'\003', // 1111
'\000', // 1112
'\003', // 1113
'\200', // 1114
'\001', // 1115
'\300', // 1116
'\000', // 1117
'\140', // 1118
'\000', // 1119
'\060', // 1120
'\000', // 1121
'\070', // 1122
'\000', // 1123
'\030', // 1124
'\000', // 1125
'\014', // 1126
'\000', // 1127
'\006', // 1128
'\000', // 1129
'\003', // 1130
'\000', // 1131
'\377', // 1132
'\003', // 1133
'\377', // 1134
'\003', // 1135
'\017', // 1136
'\017', // 1137
'\003', // 1138
'\003', // 1139
'\003', // 1140
'\003', // 1141
'\003', // 1142
'\003', // 1143
'\003', // 1144
'\003', // 1145
'\003', // 1146
'\003', // 1147
'\003', // 1148
'\003', // 1149
'\003', // 1150
'\003', // 1151
'\017', // 1152
'\017', // 1153
'\003', // 1154
'\003', // 1155
'\002', // 1156
'\002', // 1157
'\006', // 1158
'\006', // 1159
'\004', // 1160
'\004', // 1161
'\014', // 1162
'\014', // 1163
'\010', // 1164
'\010', // 1165
'\030', // 1166
'\030', // 1167
'\017', // 1168
'\017', // 1169
'\014', // 1170
'\014', // 1171
'\014', // 1172
'\014', // 1173
'\014', // 1174
'\014', // 1175
'\014', // 1176
'\014', // 1177
'\014', // 1178
'\014', // 1179
'\014', // 1180
'\014', // 1181
'\014', // 1182
'\014', // 1183
'\017', // 1184
'\017', // 1185
'\010', // 1186
'\034', // 1187
'\066', // 1188
'\143', // 1189
'\101', // 1190
'\377', // 1191
'\003', // 1192
'\377', // 1193
'\003', // 1194
'\003', // 1195
'\006', // 1196
'\014', // 1197
'\076', // 1198
'\167', // 1199
'\143', // 1200
'\160', // 1201
'\176', // 1202
'\147', // 1203
'\143', // 1204
'\143', // 1205
'\167', // 1206
'\156', // 1207
'\003', // 1208
'\000', // 1209
'\003', // 1210
'\000', // 1211
'\003', // 1212
'\000', // 1213
'\003', // 1214
'\000', // 1215
'\173', // 1216
'\000', // 1217
'\377', // 1218
'\000', // 1219
'\307', // 1220
'\000', // 1221
'\203', // 1222
'\001', // 1223
'\203', // 1224
'\001', // 1225
'\203', // 1226
'\001', // 1227
'\203', // 1228
'\001', // 1229
'\307', // 1230
'\000', // 1231
'\377', // 1232
'\000', // 1233
'\173', // 1234
'\000', // 1235
'\174', // 1236
'\376', // 1237
'\306', // 1238
'\003', // 1239
'\003', // 1240
'\003', // 1241
'\003', // 1242
'\306', // 1243
'\376', // 1244
'\174', // 1245
'\200', // 1246
'\001', // 1247
'\200', // 1248
'\001', // 1249
'\200', // 1250
'\001', // 1251
'\200', // 1252
'\001', // 1253
'\274', // 1254
'\001', // 1255
'\376', // 1256
'\001', // 1257
'\306', // 1258
'\001', // 1259
'\203', // 1260
'\001', // 1261
'\203', // 1262
'\001', // 1263
'\203', // 1264
'\001', // 1265
'\203', // 1266
'\001', // 1267
'\306', // 1268
'\001', // 1269
'\376', // 1270
'\001', // 1271
'\274', // 1272
'\001', // 1273
'\074', // 1274
'\176', // 1275
'\303', // 1276
'\303', // 1277
'\377', // 1278
'\003', // 1279
'\003', // 1280
'\307', // 1281
'\376', // 1282
'\074', // 1283
'\070', // 1284
'\074', // 1285
'\014', // 1286
'\014', // 1287
'\077', // 1288
'\077', // 1289
'\014', // 1290
'\014', // 1291
'\014', // 1292
'\014', // 1293
'\014', // 1294
'\014', // 1295
'\014', // 1296
'\014', // 1297
'\274', // 1298
'\001', // 1299
'\376', // 1300
'\001', // 1301
'\206', // 1302
'\001', // 1303
'\203', // 1304
'\001', // 1305
'\203', // 1306
'\001', // 1307
'\203', // 1308
'\001', // 1309
'\203', // 1310
'\001', // 1311
'\306', // 1312
'\001', // 1313
'\376', // 1314
'\001', // 1315
'\274', // 1316
'\001', // 1317
'\200', // 1318
'\001', // 1319
'\306', // 1320
'\000', // 1321
'\376', // 1322
'\000', // 1323
'\070', // 1324
'\000', // 1325
'\003', // 1326
'\003', // 1327
'\003', // 1328
'\003', // 1329
'\163', // 1330
'\373', // 1331
'\307', // 1332
'\303', // 1333
'\303', // 1334
'\303', // 1335
'\303', // 1336
'\303', // 1337
'\303', // 1338
'\303', // 1339
'\003', // 1340
'\003', // 1341
'\000', // 1342
'\000', // 1343
'\003', // 1344
'\003', // 1345
'\003', // 1346
'\003', // 1347
'\003', // 1348
'\003', // 1349
'\003', // 1350
'\003', // 1351
'\003', // 1352
'\003', // 1353
'\014', // 1354
'\014', // 1355
'\000', // 1356
'\000', // 1357
'\014', // 1358
'\014', // 1359
'\014', // 1360
'\014', // 1361
'\014', // 1362
'\014', // 1363
'\014', // 1364
'\014', // 1365
'\014', // 1366
'\014', // 1367
'\014', // 1368
'\014', // 1369
'\017', // 1370
'\007', // 1371
'\003', // 1372
'\003', // 1373
'\003', // 1374
'\003', // 1375
'\143', // 1376
'\063', // 1377
'\033', // 1378
'\017', // 1379
'\037', // 1380
'\033', // 1381
'\063', // 1382
'\163', // 1383
'\143', // 1384
'\343', // 1385
'\003', // 1386
'\003', // 1387
'\003', // 1388
'\003', // 1389
'\003', // 1390
'\003', // 1391
'\003', // 1392
'\003', // 1393
'\003', // 1394
'\003', // 1395
'\003', // 1396
'\003', // 1397
'\003', // 1398
'\003', // 1399
'\063', // 1400
'\006', // 1401
'\173', // 1402
'\017', // 1403
'\347', // 1404
'\014', // 1405
'\143', // 1406
'\014', // 1407
'\143', // 1408
'\014', // 1409
'\143', // 1410
'\014', // 1411
'\143', // 1412
'\014', // 1413
'\143', // 1414
'\014', // 1415
'\143', // 1416
'\014', // 1417
'\143', // 1418
'\014', // 1419
'\163', // 1420
'\373', // 1421
'\307', // 1422
'\303', // 1423
'\303', // 1424
'\303', // 1425
'\303', // 1426
'\303', // 1427
'\303', // 1428
'\303', // 1429
'\174', // 1430
'\000', // 1431
'\376', // 1432
'\000', // 1433
'\306', // 1434
'\000', // 1435
'\203', // 1436
'\001', // 1437
'\203', // 1438
'\001', // 1439
'\203', // 1440
'\001', // 1441
'\203', // 1442
'\001', // 1443
'\306', // 1444
'\000', // 1445
'\376', // 1446
'\000', // 1447
'\174', // 1448
'\000', // 1449
'\173', // 1450
'\000', // 1451
'\377', // 1452
'\000', // 1453
'\307', // 1454
'\000', // 1455
'\203', // 1456
'\001', // 1457
'\203', // 1458
'\001', // 1459
'\203', // 1460
'\001', // 1461
'\203', // 1462
'\001', // 1463
'\307', // 1464
'\000', // 1465
'\377', // 1466
'\000', // 1467
'\173', // 1468
'\000', // 1469
'\003', // 1470
'\000', // 1471
'\003', // 1472
'\000', // 1473
'\003', // 1474
'\000', // 1475
'\003', // 1476
'\000', // 1477
'\274', // 1478
'\001', // 1479
'\376', // 1480
'\001', // 1481
'\306', // 1482
'\001', // 1483
'\203', // 1484
'\001', // 1485
'\203', // 1486
'\001', // 1487
'\203', // 1488
'\001', // 1489
'\203', // 1490
'\001', // 1491
'\306', // 1492
'\001', // 1493
'\376', // 1494
'\001', // 1495
'\274', // 1496
'\001', // 1497
'\200', // 1498
'\001', // 1499
'\200', // 1500
'\001', // 1501
'\200', // 1502
'\001', // 1503
'\200', // 1504
'\001', // 1505
'\033', // 1506
'\033', // 1507
'\007', // 1508
'\003', // 1509
'\003', // 1510
'\003', // 1511
'\003', // 1512
'\003', // 1513
'\003', // 1514
'\003', // 1515
'\074', // 1516
'\176', // 1517
'\143', // 1518
'\003', // 1519
'\077', // 1520
'\174', // 1521
'\140', // 1522
'\143', // 1523
'\077', // 1524
'\036', // 1525
'\014', // 1526
'\014', // 1527
'\014', // 1528
'\077', // 1529
'\077', // 1530
'\014', // 1531
'\014', // 1532
'\014', // 1533
'\014', // 1534
'\014', // 1535
'\014', // 1536
'\034', // 1537
'\030', // 1538
'\303', // 1539
'\303', // 1540
'\303', // 1541
'\303', // 1542
'\303', // 1543
'\303', // 1544
'\303', // 1545
'\343', // 1546
'\337', // 1547
'\316', // 1548
'\303', // 1549
'\303', // 1550
'\303', // 1551
'\146', // 1552
'\146', // 1553
'\146', // 1554
'\044', // 1555
'\074', // 1556
'\030', // 1557
'\030', // 1558
'\143', // 1559
'\014', // 1560
'\143', // 1561
'\014', // 1562
'\143', // 1563
'\014', // 1564
'\146', // 1565
'\006', // 1566
'\146', // 1567
'\006', // 1568
'\226', // 1569
'\006', // 1570
'\224', // 1571
'\002', // 1572
'\234', // 1573
'\003', // 1574
'\230', // 1575
'\001', // 1576
'\230', // 1577
'\001', // 1578
'\303', // 1579
'\347', // 1580
'\146', // 1581
'\074', // 1582
'\030', // 1583
'\030', // 1584
'\074', // 1585
'\146', // 1586
'\347', // 1587
'\303', // 1588
'\303', // 1589
'\303', // 1590
'\303', // 1591
'\146', // 1592
'\146', // 1593
'\146', // 1594
'\044', // 1595
'\074', // 1596
'\030', // 1597
'\030', // 1598
'\030', // 1599
'\030', // 1600
'\016', // 1601
'\016', // 1602
'\177', // 1603
'\177', // 1604
'\140', // 1605
'\060', // 1606
'\030', // 1607
'\014', // 1608
'\006', // 1609
'\003', // 1610
'\177', // 1611
'\177', // 1612
'\340', // 1613
'\377', // 1614
'\340', // 1615
'\377', // 1616
'\260', // 1617
'\001', // 1618
'\260', // 1619
'\001', // 1620
'\230', // 1621
'\001', // 1622
'\230', // 1623
'\001', // 1624
'\214', // 1625
'\177', // 1626
'\214', // 1627
'\177', // 1628
'\374', // 1629
'\001', // 1630
'\376', // 1631
'\001', // 1632
'\206', // 1633
'\001', // 1634
'\206', // 1635
'\001', // 1636
'\203', // 1637
'\377', // 1638
'\203', // 1639
'\377', // 1640
'\276', // 1641
'\007', // 1642
'\367', // 1643
'\017', // 1644
'\143', // 1645
'\030', // 1646
'\160', // 1647
'\030', // 1648
'\376', // 1649
'\037', // 1650
'\147', // 1651
'\000', // 1652
'\143', // 1653
'\000', // 1654
'\343', // 1655
'\030', // 1656
'\367', // 1657
'\037', // 1658
'\256', // 1659
'\007', // 1660
'\003', // 1661
'\030', // 1662
'\003', // 1663
'\030', // 1664
'\003', // 1665
'\030', // 1666
'\003', // 1667
'\030', // 1668
'\003', // 1669
'\030', // 1670
'\003', // 1671
'\030', // 1672
'\003', // 1673
'\030', // 1674
'\003', // 1675
'\030', // 1676
'\003', // 1677
'\030', // 1678
'\143', // 1679
'\030', // 1680
'\143', // 1681
'\030', // 1682
'\343', // 1683
'\034', // 1684
'\303', // 1685
'\017', // 1686
'\203', // 1687
'\007', // 1688
'\063', // 1689
'\063', // 1690
'\000', // 1691
'\000', // 1692
'\063', // 1693
'\063', // 1694
'\063', // 1695
'\063', // 1696
'\063', // 1697
'\063', // 1698
'\063', // 1699
'\063', // 1700
'\063', // 1701
'\063', // 1702
'\060', // 1703
'\060', // 1704
'\074', // 1705
'\034', // 1706
'\160', // 1707
'\377', // 1708
'\001', // 1709
'\374', // 1710
'\377', // 1711
'\001', // 1712
'\216', // 1713
'\003', // 1714
'\000', // 1715
'\006', // 1716
'\003', // 1717
'\000', // 1718
'\007', // 1719
'\003', // 1720
'\000', // 1721
'\003', // 1722
'\003', // 1723
'\000', // 1724
'\003', // 1725
'\377', // 1726
'\000', // 1727
'\003', // 1728
'\377', // 1729
'\000', // 1730
'\003', // 1731
'\003', // 1732
'\000', // 1733
'\007', // 1734
'\003', // 1735
'\000', // 1736
'\006', // 1737
'\003', // 1738
'\000', // 1739
'\216', // 1740
'\003', // 1741
'\000', // 1742
'\374', // 1743
'\377', // 1744
'\001', // 1745
'\160', // 1746
'\377', // 1747
'\001', // 1748
'\174', // 1749
'\036', // 1750
'\376', // 1751
'\077', // 1752
'\306', // 1753
'\141', // 1754
'\203', // 1755
'\141', // 1756
'\203', // 1757
'\177', // 1758
'\203', // 1759
'\001', // 1760
'\203', // 1761
'\001', // 1762
'\306', // 1763
'\143', // 1764
'\376', // 1765
'\177', // 1766
'\174', // 1767
'\036', // 1768
'\270', // 1769
'\001', // 1770
'\274', // 1771
'\001', // 1772
'\014', // 1773
'\000', // 1774
'\014', // 1775
'\000', // 1776
'\277', // 1777
'\001', // 1778
'\277', // 1779
'\001', // 1780
'\214', // 1781
'\001', // 1782
'\214', // 1783
'\001', // 1784
'\214', // 1785
'\001', // 1786
'\214', // 1787
'\001', // 1788
'\214', // 1789
'\001', // 1790
'\214', // 1791
'\001', // 1792
'\214', // 1793
'\001', // 1794
'\214', // 1795
'\001', // 1796
'\270', // 1797
'\001', // 1798
'\274', // 1799
'\001', // 1800
'\214', // 1801
'\001', // 1802
'\214', // 1803
'\001', // 1804
'\277', // 1805
'\001', // 1806
'\277', // 1807
'\001', // 1808
'\214', // 1809
'\001', // 1810
'\214', // 1811
'\001', // 1812
'\214', // 1813
'\001', // 1814
'\214', // 1815
'\001', // 1816
'\214', // 1817
'\001', // 1818
'\214', // 1819
'\001', // 1820
'\214', // 1821
'\001', // 1822
'\214', // 1823
'\001', // 1824
};


//the array of kern pairs  we support in this font
const static struct KERN_INFO Helvetica_Medium_R_18_kern[145] = {
	{ //kern pair semicolonspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-1,
	},
	{ //kern pair periodspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-1,
	},
	{ //kern pair colonspace
	//encoding of the second char in the pair
	32,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair spaceW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair spaceT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair xe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Ay
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair Aw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair Av
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair Au
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair AY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair AW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair AV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair AU
	//encoding of the second char in the pair
	85,
	//offset for the pair
	-1,
	},
	{ //kern pair AT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-2,
	},
	{ //kern pair AQ
	//encoding of the second char in the pair
	81,
	//offset for the pair
	-1,
	},
	{ //kern pair AO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair AG
	//encoding of the second char in the pair
	71,
	//offset for the pair
	-1,
	},
	{ //kern pair AC
	//encoding of the second char in the pair
	67,
	//offset for the pair
	-1,
	},
	{ //kern pair Cperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ccomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair Dperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Dcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair DY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-2,
	},
	{ //kern pair DW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair DV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair DA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Fr
	//encoding of the second char in the pair
	114,
	//offset for the pair
	-1,
	},
	{ //kern pair Fperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair Fo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Fe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Fcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair Fa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair FA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair Ky
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair Ku
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Ko
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Ke
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair KO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair Jperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Jcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair Ly
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair LY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-3,
	},
	{ //kern pair LW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair LV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-2,
	},
	{ //kern pair LT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-2,
	},
	{ //kern pair Operiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ocomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair OY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-1,
	},
	{ //kern pair OX
	//encoding of the second char in the pair
	88,
	//offset for the pair
	-1,
	},
	{ //kern pair OW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair OV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair OT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair Pperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair Po
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Pe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Pcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair Pa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair PA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair RY
	//encoding of the second char in the pair
	89,
	//offset for the pair
	-1,
	},
	{ //kern pair RW
	//encoding of the second char in the pair
	87,
	//offset for the pair
	-1,
	},
	{ //kern pair RV
	//encoding of the second char in the pair
	86,
	//offset for the pair
	-1,
	},
	{ //kern pair RU
	//encoding of the second char in the pair
	85,
	//offset for the pair
	-1,
	},
	{ //kern pair RT
	//encoding of the second char in the pair
	84,
	//offset for the pair
	-1,
	},
	{ //kern pair Uperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair Ucomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair UA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Ty
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-2,
	},
	{ //kern pair Tw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-2,
	},
	{ //kern pair Tu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-2,
	},
	{ //kern pair Tr
	//encoding of the second char in the pair
	114,
	//offset for the pair
	-2,
	},
	{ //kern pair Tperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair To
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-2,
	},
	{ //kern pair Thyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-3,
	},
	{ //kern pair Te
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-2,
	},
	{ //kern pair Tcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair Ta
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-2,
	},
	{ //kern pair TO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair TA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair Wu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Wperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair Wo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair Whyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-1,
	},
	{ //kern pair We
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair Wcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair Wa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair WA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-1,
	},
	{ //kern pair Vu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-1,
	},
	{ //kern pair Vsemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	-1,
	},
	{ //kern pair Vperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair Vo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-2,
	},
	{ //kern pair Vhyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-2,
	},
	{ //kern pair Ve
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-2,
	},
	{ //kern pair Vcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair Vcolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	-1,
	},
	{ //kern pair Va
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair VO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-1,
	},
	{ //kern pair VG
	//encoding of the second char in the pair
	71,
	//offset for the pair
	-1,
	},
	{ //kern pair VA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair Yu
	//encoding of the second char in the pair
	117,
	//offset for the pair
	-2,
	},
	{ //kern pair Ysemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	-1,
	},
	{ //kern pair Yperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-3,
	},
	{ //kern pair Yo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-3,
	},
	{ //kern pair Yhyphen
	//encoding of the second char in the pair
	45,
	//offset for the pair
	-3,
	},
	{ //kern pair Ye
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-3,
	},
	{ //kern pair Ycomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-3,
	},
	{ //kern pair Ycolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	-1,
	},
	{ //kern pair Ya
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-3,
	},
	{ //kern pair YO
	//encoding of the second char in the pair
	79,
	//offset for the pair
	-2,
	},
	{ //kern pair YA
	//encoding of the second char in the pair
	65,
	//offset for the pair
	-2,
	},
	{ //kern pair ay
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair bperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair bcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair ex
	//encoding of the second char in the pair
	120,
	//offset for the pair
	-1,
	},
	{ //kern pair ev
	//encoding of the second char in the pair
	118,
	//offset for the pair
	-1,
	},
	{ //kern pair fperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair fo
	//encoding of the second char in the pair
	111,
	//offset for the pair
	-1,
	},
	{ //kern pair fe
	//encoding of the second char in the pair
	101,
	//offset for the pair
	-1,
	},
	{ //kern pair fcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair fa
	//encoding of the second char in the pair
	97,
	//offset for the pair
	-1,
	},
	{ //kern pair hy
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair oy
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair ox
	//encoding of the second char in the pair
	120,
	//offset for the pair
	-1,
	},
	{ //kern pair operiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair ocomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair py
	//encoding of the second char in the pair
	121,
	//offset for the pair
	-1,
	},
	{ //kern pair pperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair pcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair sw
	//encoding of the second char in the pair
	119,
	//offset for the pair
	-1,
	},
	{ //kern pair ry
	//encoding of the second char in the pair
	121,
	//offset for the pair
	1,
	},
	{ //kern pair rv
	//encoding of the second char in the pair
	118,
	//offset for the pair
	1,
	},
	{ //kern pair rt
	//encoding of the second char in the pair
	116,
	//offset for the pair
	1,
	},
	{ //kern pair rsemicolon
	//encoding of the second char in the pair
	59,
	//offset for the pair
	1,
	},
	{ //kern pair rperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair rp
	//encoding of the second char in the pair
	112,
	//offset for the pair
	1,
	},
	{ //kern pair rcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair rcolon
	//encoding of the second char in the pair
	58,
	//offset for the pair
	1,
	},
	{ //kern pair wperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-1,
	},
	{ //kern pair wcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-1,
	},
	{ //kern pair vperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair vcomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},
	{ //kern pair yperiod
	//encoding of the second char in the pair
	46,
	//offset for the pair
	-2,
	},
	{ //kern pair ycomma
	//encoding of the second char in the pair
	44,
	//offset for the pair
	-2,
	},

};


//the array of characters we support in this font
const static struct FONT_CHAR Helvetica_Medium_R_18_ligatures[8] = {
	{
	//encoding = 2nd letter in ligature for character AE
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1613,
	},
	{
	//encoding = 2nd letter in ligature for character ae
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1641,
	},
	{
	//encoding = 2nd letter in ligature for character fi
	105,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1769,
	},
	{
	//encoding = 2nd letter in ligature for character fl
	108,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1797,
	},
	{
	//encoding = 2nd letter in ligature for character IJ
	74,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1661,
	},
	{
	//encoding = 2nd letter in ligature for character OE
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	19,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	3,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1707,
	},
	{
	//encoding = 2nd letter in ligature for character ij
	106,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	8,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1689,
	},
	{
	//encoding = 2nd letter in ligature for character oe
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	17,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = 0 junk entry to match characters  
	0,
	//kernIndex = 0 junk entry to match characters  
	0,
	//kernNum = 0 junk entry to match characters  
	0,
	//offset into the bitmap for this character  
	1749,
	},

};


//the array of characters we support in this font
const static struct FONT_CHAR Helvetica_Medium_R_18_chars[91] = {
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character space
	32,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	1,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	3,
	//kernCount = num of entries in  the kern table starting with this character.  
	4,
	//offset into the bitmap for this character  
	0,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character exclam
	33,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character quotedbl
	34,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	5,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	9,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	15,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character numbersign
	35,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	20,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character dollar
	36,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	16,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-2,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	46,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character percent
	37,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	78,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character ampersand
	38,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	104,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character quotesingle
	39,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	3,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	5,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	9,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	130,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character parenleft
	40,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	135,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character parenright
	41,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	153,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character asterisk
	42,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	8,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	171,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character plus
	43,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	177,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character comma
	44,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	5,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-3,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	187,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character hyphen
	45,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	7,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	2,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	192,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character period
	46,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	2,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	1,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	194,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character slash
	47,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	196,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character zero
	48,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	210,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character one
	49,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	223,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character two
	50,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	236,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character three
	51,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	249,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character four
	52,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	262,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character five
	53,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	288,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character six
	54,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	301,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character seven
	55,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	314,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character eight
	56,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	327,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character nine
	57,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	340,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character colon
	58,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	2,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	353,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character semicolon
	59,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-3,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	363,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character less
	60,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	9,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	376,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character equal
	61,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	6,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	2,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	385,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character greater
	62,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	9,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	391,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character question
	63,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	400,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character at
	64,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	17,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-3,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	414,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character A
	65,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	1,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	8,
	//kernCount = num of entries in  the kern table starting with this character.  
	13,
	//offset into the bitmap for this character  
	448,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character B
	66,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	476,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character C
	67,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	21,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	504,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character D
	68,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	23,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	532,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character E
	69,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	560,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character F
	70,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	29,
	//kernCount = num of entries in  the kern table starting with this character.  
	7,
	//offset into the bitmap for this character  
	588,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character G
	71,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	616,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character H
	72,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	644,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character I
	73,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	2,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	65,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	672,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character J
	74,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	41,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	686,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character K
	75,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	36,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	700,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character L
	76,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	43,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	728,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character M
	77,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	16,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	742,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character N
	78,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	770,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character O
	79,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	81,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	48,
	//kernCount = num of entries in  the kern table starting with this character.  
	7,
	//offset into the bitmap for this character  
	798,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character P
	80,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	55,
	//kernCount = num of entries in  the kern table starting with this character.  
	6,
	//offset into the bitmap for this character  
	826,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Q
	81,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	15,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	15,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-1,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	854,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character R
	82,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	61,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	884,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character S
	83,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	912,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character T
	84,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	69,
	//kernCount = num of entries in  the kern table starting with this character.  
	12,
	//offset into the bitmap for this character  
	940,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character U
	85,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	66,
	//kernCount = num of entries in  the kern table starting with this character.  
	3,
	//offset into the bitmap for this character  
	968,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character V
	86,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	89,
	//kernCount = num of entries in  the kern table starting with this character.  
	12,
	//offset into the bitmap for this character  
	996,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character W
	87,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	18,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	81,
	//kernCount = num of entries in  the kern table starting with this character.  
	8,
	//offset into the bitmap for this character  
	1024,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character X
	88,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	13,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1052,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Y
	89,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	101,
	//kernCount = num of entries in  the kern table starting with this character.  
	11,
	//offset into the bitmap for this character  
	1080,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character Z
	90,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	12,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1108,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character bracketleft
	91,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1136,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character backslash
	92,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1154,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character bracketright
	93,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	5,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1168,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character asciicircum
	94,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	5,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	8,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1186,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character underscore
	95,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	2,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1191,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character grave
	96,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	4,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	3,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	11,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1195,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character a
	97,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	17,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	112,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	1198,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character b
	98,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	113,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1208,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character c
	99,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1236,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character d
	100,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1246,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character e
	101,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	115,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1274,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character f
	102,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	34,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	117,
	//kernCount = num of entries in  the kern table starting with this character.  
	5,
	//offset into the bitmap for this character  
	1284,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character g
	103,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1298,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character h
	104,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	122,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	1326,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character i
	105,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	4,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	97,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1340,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character j
	106,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	4,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	18,
	//XOff = bounding box x offset from origin in pixels 
	-1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1354,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character k
	107,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1372,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character l
	108,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	4,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1386,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character m
	109,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1400,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character n
	110,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1420,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character o
	111,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	113,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	123,
	//kernCount = num of entries in  the kern table starting with this character.  
	4,
	//offset into the bitmap for this character  
	1430,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character p
	112,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	127,
	//kernCount = num of entries in  the kern table starting with this character.  
	3,
	//offset into the bitmap for this character  
	1450,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character q
	113,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	11,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1478,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character r
	114,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	131,
	//kernCount = num of entries in  the kern table starting with this character.  
	8,
	//offset into the bitmap for this character  
	1506,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character s
	115,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	130,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	1516,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character t
	116,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	6,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	13,
	//XOff = bounding box x offset from origin in pixels 
	0,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1526,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character u
	117,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1539,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character v
	118,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	141,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1549,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character w
	119,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	14,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	2,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	139,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1559,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character x
	120,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	7,
	//kernCount = num of entries in  the kern table starting with this character.  
	1,
	//offset into the bitmap for this character  
	1579,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character y
	121,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	10,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	14,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	-4,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	143,
	//kernCount = num of entries in  the kern table starting with this character.  
	2,
	//offset into the bitmap for this character  
	1589,
	},
	{
	//encoding = ascii or ascii of 2nd letter in ligature for character z
	122,
	//dwidth = width in pixels e.g. distance to the next characters origin 
	9,
	//bbw = bounding box width in pixels ***We dont use the bbw value so to save space I'm tossing it***
	//bbh = bounding box height in pixels 
	10,
	//XOff = bounding box x offset from origin in pixels 
	1,
	//YOff = bounding box y offset from origin in pixels 
	0,
	//byteWidth = num of bytes per row in the character bitmap  
	1,
	//ligatureInfo = high nibble index into the ligature table if we have a ligature  low nibble lig count.    
	0,
	//kernIndex = index into the kern table if we have a kern pair starting with this character.  
	0,
	//kernCount = num of entries in  the kern table starting with this character.  
	0,
	//offset into the bitmap for this character  
	1603,
	},

};




// the main font structure
const static struct FONT Helvetica_Medium_R_18_font = {
//ascent
16,
//descent
5,
//resolution
75,
//pointSize
180,
//bitmap ptr
Helvetica_Medium_R_18_bitmap,
//bitmapSize
1825,
//char ptr
Helvetica_Medium_R_18_chars,
//number of characters + ligatures in this font
91,
//kern ptr
Helvetica_Medium_R_18_kern,
//number of kern pairs in this font
145,
//ligature ptr
Helvetica_Medium_R_18_ligatures,
//number of ligatures in this font
8,
//ascii offset (e.g. ascii to index offset) 
32
};
