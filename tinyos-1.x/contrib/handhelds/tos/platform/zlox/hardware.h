/*
 * Copyright (c) 2005 Hewlett-Packard Company
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:

 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of the Hewlett-Packard Company nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _H_hardware_h
#define _H_hardware_h

#include "msp430hardware.h"
#include "MSP430ADC12.h"

#define USART0_RTS_CTS 1

// LEDs
TOSH_ASSIGN_PIN(RED_LED, 1, 3); // unused
TOSH_ASSIGN_PIN(GREEN_LED, 5, 4); 
TOSH_ASSIGN_PIN(YELLOW_LED, 5, 5);


// CC2420 RADIO #defines
TOSH_ASSIGN_PIN(RADIO_FIFO, 1, 0);
TOSH_ASSIGN_PIN(RADIO_FIFOP, 1, 7);

TOSH_ASSIGN_PIN(RADIO_CCA, 1, 5);
TOSH_ASSIGN_PIN(RADIO_CSN, 2, 0);
TOSH_ASSIGN_PIN(RADIO_RESET, 2, 4);
TOSH_ASSIGN_PIN(RADIO_VREF, 2, 3);
TOSH_ASSIGN_PIN(RADIO_SFD, 4, 1);
// this net is also run to the following interrupt pin in case you dont wanna use the time capture pin
//TOSH_ASSIGN_PIN(RADIO_SFD, 1, 2);

//bsl
TOSH_ASSIGN_PIN(BSL_RX, 2, 2);
TOSH_ASSIGN_PIN(BSL_TX, 1, 1);

// go faster rosc 
TOSH_ASSIGN_PIN(ROSC, 2, 5);


// 1-Wire
TOSH_ASSIGN_PIN(ONEWIRE, 6, 2);
TOSH_ASSIGN_PIN(ONEWIRE_POWER, 5, 7);


// battery
TOSH_ASSIGN_PIN(ADC_0, 6, 0);
TOSH_ASSIGN_PIN(ADC_0_SINK, 6, 1);


// UART pins
TOSH_ASSIGN_PIN(UCLK1, 5, 3);
TOSH_ASSIGN_PIN(SOMI1, 5, 2);
TOSH_ASSIGN_PIN(SIMO1, 5, 1);

TOSH_ASSIGN_PIN(UCLK0, 3, 3); /* not to be used for SPI used  in uart mode*/
TOSH_ASSIGN_PIN(SOMI0, 3, 2); /* not to be used for SPI used  in uart mode*/
TOSH_ASSIGN_PIN(SIMO0, 3, 1); /* not to be used for SPI used  in uart mode*/


TOSH_ASSIGN_PIN(UTXD0, 3, 4);
TOSH_ASSIGN_PIN(URXD0, 3, 5);


#define UART_HACK 1
#ifdef UART_HACK
//XXX these are now routed to test points so they dont hurt anyone
TOSH_ASSIGN_PIN(UTXD1, 3, 6);
TOSH_ASSIGN_PIN(URXD1, 3, 7);
#endif


// unused pins
TOSH_ASSIGN_PIN(UNUSED_1_3, 1, 3);
TOSH_ASSIGN_PIN(UNUSED_1_4, 1, 4);
TOSH_ASSIGN_PIN(UNUSED_1_6, 1, 6);
TOSH_ASSIGN_PIN(UNUSED_2_1, 2, 1);
TOSH_ASSIGN_PIN(UNUSED_2_6, 2, 6);
TOSH_ASSIGN_PIN(UNUSED_2_7, 2, 7);
TOSH_ASSIGN_PIN(UNUSED_3_1, 3, 1);
TOSH_ASSIGN_PIN(UNUSED_3_2, 3, 2);
TOSH_ASSIGN_PIN(UNUSED_3_3, 3, 3);
TOSH_ASSIGN_PIN(UNUSED_3_6, 3, 6);
TOSH_ASSIGN_PIN(UNUSED_3_7, 3, 7);
TOSH_ASSIGN_PIN(UNUSED_4_0, 4, 0);
TOSH_ASSIGN_PIN(UNUSED_4_2, 4, 2);
TOSH_ASSIGN_PIN(UNUSED_4_3, 4, 3);
TOSH_ASSIGN_PIN(UNUSED_4_4, 4, 4);
TOSH_ASSIGN_PIN(UNUSED_4_5, 4, 5);
TOSH_ASSIGN_PIN(UNUSED_4_6, 4, 6);
TOSH_ASSIGN_PIN(UNUSED_4_7, 4, 7);
TOSH_ASSIGN_PIN(UNUSED_5_0, 5, 0);
TOSH_ASSIGN_PIN(UNUSED_5_6, 5, 6);
TOSH_ASSIGN_PIN(UNUSED_6_3, 6, 3);
TOSH_ASSIGN_PIN(UNUSED_6_4, 6, 4);
TOSH_ASSIGN_PIN(UNUSED_6_5, 6, 5);
TOSH_ASSIGN_PIN(UNUSED_6_6, 6, 6);
TOSH_ASSIGN_PIN(UNUSED_6_7, 6, 7);









/*
 * After power-on-reset (POR) all pins will be set to digital input
 * To save space, we shouldn't reset them in this module.
 */

void TOSH_SET_PIN_DIRECTIONS(void)
{
  //LEDS (remember, there is no RED LED)
  TOSH_SET_GREEN_LED_PIN();
  TOSH_SET_YELLOW_LED_PIN();
  TOSH_MAKE_GREEN_LED_OUTPUT();
  TOSH_MAKE_YELLOW_LED_OUTPUT();


  //RADIO CC2420 pins
  TOSH_CLR_RADIO_VREF_PIN();     // Disable the voltage regulator on the CC2420
  TOSH_MAKE_RADIO_VREF_OUTPUT();
  TOSH_SET_RADIO_RESET_PIN();    // Digital reset, active low
  TOSH_MAKE_RADIO_RESET_OUTPUT();
  TOSH_SET_RADIO_CSN_PIN();      // SPI chip select, active low
  TOSH_MAKE_RADIO_CSN_OUTPUT();


#ifdef UART_HACK
  TOSH_MAKE_UTXD1_OUTPUT();
  TOSH_MAKE_URXD1_OUTPUT();
  TOSH_CLR_UTXD1_PIN();
  TOSH_CLR_URXD1_PIN();
#endif

  TOSH_MAKE_UTXD0_OUTPUT();
  TOSH_CLR_UTXD0_PIN();
  TOSH_MAKE_URXD0_INPUT();

    // Force known states
  TOSH_MAKE_UCLK1_OUTPUT();
  TOSH_CLR_UCLK1_PIN();
  TOSH_MAKE_SIMO1_OUTPUT();
  TOSH_CLR_SIMO1_PIN();
  TOSH_MAKE_SOMI1_INPUT();


  // ADC lines on the battery
  // tied to battery so must stay high to burn no power
#if 0
  TOSH_MAKE_ADC_0_OUTPUT();
  TOSH_SET_ADC_0_PIN();
  TOSH_MAKE_ADC_0_SINK_OUTPUT();
  TOSH_SET_ADC_0_SINK_PIN();
#else
  TOSH_MAKE_ADC_0_INPUT();
  TOSH_MAKE_ADC_0_SINK_INPUT();
#endif

  TOSH_MAKE_ONEWIRE_POWER_OUTPUT();
  TOSH_CLR_ONEWIRE_POWER_PIN();




// unused pins
  TOSH_MAKE_UNUSED_1_3_OUTPUT();
  TOSH_CLR_UNUSED_1_3_PIN();
  TOSH_MAKE_UNUSED_1_4_OUTPUT();
  TOSH_CLR_UNUSED_1_4_PIN();
  TOSH_MAKE_UNUSED_1_6_OUTPUT();
  TOSH_CLR_UNUSED_1_6_PIN();
  TOSH_MAKE_UNUSED_2_1_OUTPUT();
  TOSH_CLR_UNUSED_2_1_PIN();
  TOSH_MAKE_UNUSED_2_6_OUTPUT();
  TOSH_CLR_UNUSED_2_6_PIN();
  TOSH_MAKE_UNUSED_2_7_OUTPUT();
  TOSH_CLR_UNUSED_2_7_PIN();
  TOSH_MAKE_UNUSED_3_1_OUTPUT();
  TOSH_CLR_UNUSED_3_1_PIN();
  TOSH_MAKE_UNUSED_3_2_OUTPUT();
  TOSH_CLR_UNUSED_3_2_PIN();
  TOSH_MAKE_UNUSED_3_3_OUTPUT();
  TOSH_CLR_UNUSED_3_3_PIN();
  TOSH_MAKE_UNUSED_3_6_OUTPUT();
  TOSH_CLR_UNUSED_3_6_PIN();
  TOSH_MAKE_UNUSED_3_7_OUTPUT();
  TOSH_CLR_UNUSED_3_7_PIN();
  TOSH_MAKE_UNUSED_4_0_OUTPUT();
  TOSH_CLR_UNUSED_4_0_PIN();
  TOSH_MAKE_UNUSED_4_2_OUTPUT();
  TOSH_CLR_UNUSED_4_2_PIN();
  TOSH_MAKE_UNUSED_4_3_OUTPUT();
  TOSH_CLR_UNUSED_4_3_PIN();
  TOSH_MAKE_UNUSED_4_4_OUTPUT();
  TOSH_CLR_UNUSED_4_4_PIN();
  TOSH_MAKE_UNUSED_4_5_OUTPUT();
  TOSH_CLR_UNUSED_4_5_PIN();
  TOSH_MAKE_UNUSED_4_6_OUTPUT();
  TOSH_CLR_UNUSED_4_6_PIN();
  TOSH_MAKE_UNUSED_4_7_OUTPUT();
  TOSH_CLR_UNUSED_4_7_PIN();
  TOSH_MAKE_UNUSED_5_0_OUTPUT();
  TOSH_CLR_UNUSED_5_0_PIN();
  TOSH_MAKE_UNUSED_5_6_OUTPUT();
  TOSH_CLR_UNUSED_5_6_PIN();
  TOSH_MAKE_UNUSED_6_3_OUTPUT();
  TOSH_CLR_UNUSED_6_3_PIN();
  TOSH_MAKE_UNUSED_6_4_OUTPUT();
  TOSH_CLR_UNUSED_6_4_PIN();
  TOSH_MAKE_UNUSED_6_5_OUTPUT();
  TOSH_CLR_UNUSED_6_5_PIN();
  TOSH_MAKE_UNUSED_6_6_OUTPUT();
  TOSH_CLR_UNUSED_6_6_PIN();
  TOSH_MAKE_UNUSED_6_7_OUTPUT();
  TOSH_CLR_UNUSED_6_7_PIN();
  
}

#endif // _H_hardware_h

