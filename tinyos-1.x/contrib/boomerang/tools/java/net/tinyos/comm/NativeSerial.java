/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.tinyos.comm;

public class NativeSerial {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected NativeSerial(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NativeSerial obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      TOSCommJNI.delete_NativeSerial(swigCPtr);
    }
    swigCPtr = 0;
  }

  public NativeSerial(String portstr) {
    this(TOSCommJNI.new_NativeSerial(portstr), true);
  }

  public void close() {
    TOSCommJNI.NativeSerial_close(swigCPtr);
  }

  public void setSerialPortParams(int baudrate, NativeSerial.DataBits databits, NativeSerial.Parity parity, NativeSerial.StopBits stopbits) {
    TOSCommJNI.NativeSerial_setSerialPortParams(swigCPtr, baudrate, databits.swigValue(), parity.swigValue(), stopbits.swigValue());
  }

  public int getBaudRate() {
    return TOSCommJNI.NativeSerial_getBaudRate(swigCPtr);
  }

  public NativeSerial.DataBits getDataBits() {
    return NativeSerial.DataBits.swigToEnum(TOSCommJNI.NativeSerial_getDataBits(swigCPtr));
  }

  public NativeSerial.Parity getParity() {
    return NativeSerial.Parity.swigToEnum(TOSCommJNI.NativeSerial_getParity(swigCPtr));
  }

  public NativeSerial.StopBits getStopBits() {
    return NativeSerial.StopBits.swigToEnum(TOSCommJNI.NativeSerial_getStopBits(swigCPtr));
  }

  public int read(byte[] buffer_out, int off, int len, int timeout_milli) {
    return TOSCommJNI.NativeSerial_read(swigCPtr, buffer_out, off, len, timeout_milli);
  }

  public int write(byte[] buffer_in, int off, int len, int timeout_milli) {
    return TOSCommJNI.NativeSerial_write(swigCPtr, buffer_in, off, len, timeout_milli);
  }

  public void purge_io() {
    TOSCommJNI.NativeSerial_purge_io(swigCPtr);
  }

  public final static class DataBits {
    public final static DataBits DATABITS_7 = new DataBits("DATABITS_7", TOSCommJNI.get_NativeSerial_DATABITS_7());
    public final static DataBits DATABITS_8 = new DataBits("DATABITS_8", TOSCommJNI.get_NativeSerial_DATABITS_8());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DataBits swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DataBits.class + " with value " + swigValue);
    }

    private DataBits(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DataBits(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static DataBits[] swigValues = { DATABITS_7, DATABITS_8 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Parity {
    public final static Parity PARITY_NONE = new Parity("PARITY_NONE", TOSCommJNI.get_NativeSerial_PARITY_NONE());
    public final static Parity PARITY_ODD = new Parity("PARITY_ODD", TOSCommJNI.get_NativeSerial_PARITY_ODD());
    public final static Parity PARITY_EVEN = new Parity("PARITY_EVEN", TOSCommJNI.get_NativeSerial_PARITY_EVEN());
    public final static Parity PARITY_MARK = new Parity("PARITY_MARK", TOSCommJNI.get_NativeSerial_PARITY_MARK());
    public final static Parity PARITY_SPACE = new Parity("PARITY_SPACE", TOSCommJNI.get_NativeSerial_PARITY_SPACE());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Parity swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Parity.class + " with value " + swigValue);
    }

    private Parity(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Parity(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static Parity[] swigValues = { PARITY_NONE, PARITY_ODD, PARITY_EVEN, PARITY_MARK, PARITY_SPACE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class StopBits {
    public final static StopBits STOPBITS_1 = new StopBits("STOPBITS_1", TOSCommJNI.get_NativeSerial_STOPBITS_1());
    public final static StopBits STOPBITS_2 = new StopBits("STOPBITS_2", TOSCommJNI.get_NativeSerial_STOPBITS_2());
    public final static StopBits STOPBITS_1P5 = new StopBits("STOPBITS_1P5", TOSCommJNI.get_NativeSerial_STOPBITS_1P5());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static StopBits swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + StopBits.class + " with value " + swigValue);
    }

    private StopBits(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private StopBits(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private static StopBits[] swigValues = { STOPBITS_1, STOPBITS_2, STOPBITS_1P5 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
