schemefile
(define (x args) 0) ;; use to avoid dropping effect-free exprs
(x blah)
(x (lambda))
(x (lambda (a)))
(x (lambda (a1 a2 a3 a4 a5 a6 a17 a18 a19 a10 a110 a111 a112 a113 a114 a115) 1))
(x (lambda (a a) 1))
(x (lambda (a b . c) 1))
(x (lambda "aa" 1))
(x (lambda (1 a 2) 1))
(x (x 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8))
(x (set!))
(x (set! a))
(x (set! a 1 2))
(x (set! 1 2))
(x (define "aa" 11))
(x (let))
(x (let ((a 0)) 1 . 2))
(x (let 11 1))
(x (let (11) 1))
(x (let ((11)) 1))
(x (let ((a . 11)) 1))
(x (let ((a 1 2)) 1))
(x (let ((c 1) (c 2)) c))
(x (let loop 11 1))
(x (let loop (11) 1))
(x (let loop ((11)) 1))
(x (let loop ((a . 11)) 1))
(x (let loop ((a 1 2)) 1))
(x (let loop ((a1 1) (a2 1) (a3 1) (a4 1) (a5 1) (a6 1) (a17 1) (a18 1) (a19 1) (a10 1) (a110 1) (a111 1) (a112 1) (a113 1) (a114 1) (a115 1)) 1))
(x (define))
(x (define a))
(x (define a b c))
(x (define (fun a1 a2 a3 a4 a5 a6 a17 a18 a19 a10 a110 a111 a112 a113 a114 a115) 1))
(x (define (foo x) (define a 1) (define a 1) 2))
(x (define (foo b b) 1))
(x (let*))
(x (let* ((a 0)) 1 . 2))
(x (let* 11 1))
(x (let* (11) 1))
(x (let* ((11)) 1))
(x (let* ((a . 11)) 1))
(x (let* ((a 1 2)) 1))
;; (x (let* ((c 1) (c 2)) c))  -- not an error
(x (letrec))
(x (letrec ((a 0)) 1 . 2))
(x (letrec 11 1))
(x (letrec (11) 1))
(x (letrec ((11)) 1))
(x (letrec ((a . 11)) 1))
(x (letrec ((a 1 2)) 1))
(x (letrec ((c 1) (c 2)) c))
(x (do))
(x (do ((i 0 1))))
(x (do 11 (1)))
(x (do (11) (1)))
(x (do ((11)) (1)))
(x (do ((a . 11)) (1)))
(x (do ((a 11 2) . 3) (1)))
(x (do ((a 11 2)) 1))
(x (do ((a 11 2)) (1 . 2)))
(x (cond))
(x (cond 11))
(x (cond (11)))
(x (cond (11 . 1)))
(x (cond (11 =>)))
(x (cond (11 => 2 3)))
(x (cond (else)))
(x (cond (else 11) (1 2)))
(x (case))
(x (case 1))
(x (case 1 1))
(x (case 1 (1)))
(x (case 1 ((1))))
(x (case 1 ((1) 2 . 3)))
(x (case 1 (else)))
(x (case 1 (else 11) ((1) 2)))
