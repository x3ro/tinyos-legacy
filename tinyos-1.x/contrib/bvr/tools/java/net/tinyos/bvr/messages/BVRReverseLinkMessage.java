/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BVRReverseLinkMessage'
 * message type.
 */

package net.tinyos.bvr.messages;

public class BVRReverseLinkMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 27;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 59;

    /** Create a new BVRReverseLinkMessage of size 27. */
    public BVRReverseLinkMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BVRReverseLinkMessage of the given data_length. */
    public BVRReverseLinkMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage with the given data_length
     * and base offset.
     */
    public BVRReverseLinkMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage using the given byte array
     * as backing store.
     */
    public BVRReverseLinkMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public BVRReverseLinkMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BVRReverseLinkMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage embedded in the given message
     * at the given base offset.
     */
    public BVRReverseLinkMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRReverseLinkMessage embedded in the given message
     * at the given base offset and length.
     */
    public BVRReverseLinkMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BVRReverseLinkMessage> \n";
      try {
        s += "  [header.last_hop=0x"+Long.toHexString(get_header_last_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.seqno=0x"+Long.toHexString(get_header_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [info.num_elements=0x"+Long.toHexString(get_info_num_elements())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [info.total_links=0x"+Long.toHexString(get_info_total_links())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [info.entries.addr=";
        for (int i = 0; i < 7; i++) {
          s += "0x"+Long.toHexString(getElement_info_entries_addr(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [info.entries.quality=";
        for (int i = 0; i < 7; i++) {
          s += "0x"+Long.toHexString(getElement_info_entries_quality(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.last_hop
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.last_hop' is signed (false).
     */
    public static boolean isSigned_header_last_hop() {
        return false;
    }

    /**
     * Return whether the field 'header.last_hop' is an array (false).
     */
    public static boolean isArray_header_last_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.last_hop'
     */
    public static int offset_header_last_hop() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.last_hop'
     */
    public static int offsetBits_header_last_hop() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.last_hop'
     */
    public int get_header_last_hop() {
        return (int)getUIntElement(offsetBits_header_last_hop(), 16);
    }

    /**
     * Set the value of the field 'header.last_hop'
     */
    public void set_header_last_hop(int value) {
        setUIntElement(offsetBits_header_last_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.last_hop'
     */
    public static int size_header_last_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.last_hop'
     */
    public static int sizeBits_header_last_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqno
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqno' is signed (false).
     */
    public static boolean isSigned_header_seqno() {
        return false;
    }

    /**
     * Return whether the field 'header.seqno' is an array (false).
     */
    public static boolean isArray_header_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqno'
     */
    public static int offset_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqno'
     */
    public static int offsetBits_header_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.seqno'
     */
    public int get_header_seqno() {
        return (int)getUIntElement(offsetBits_header_seqno(), 16);
    }

    /**
     * Set the value of the field 'header.seqno'
     */
    public void set_header_seqno(int value) {
        setUIntElement(offsetBits_header_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqno'
     */
    public static int size_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqno'
     */
    public static int sizeBits_header_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: info.num_elements
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'info.num_elements' is signed (false).
     */
    public static boolean isSigned_info_num_elements() {
        return false;
    }

    /**
     * Return whether the field 'info.num_elements' is an array (false).
     */
    public static boolean isArray_info_num_elements() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'info.num_elements'
     */
    public static int offset_info_num_elements() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'info.num_elements'
     */
    public static int offsetBits_info_num_elements() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'info.num_elements'
     */
    public short get_info_num_elements() {
        return (short)getUIntElement(offsetBits_info_num_elements(), 8);
    }

    /**
     * Set the value of the field 'info.num_elements'
     */
    public void set_info_num_elements(short value) {
        setUIntElement(offsetBits_info_num_elements(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'info.num_elements'
     */
    public static int size_info_num_elements() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'info.num_elements'
     */
    public static int sizeBits_info_num_elements() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: info.total_links
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'info.total_links' is signed (false).
     */
    public static boolean isSigned_info_total_links() {
        return false;
    }

    /**
     * Return whether the field 'info.total_links' is an array (false).
     */
    public static boolean isArray_info_total_links() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'info.total_links'
     */
    public static int offset_info_total_links() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'info.total_links'
     */
    public static int offsetBits_info_total_links() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'info.total_links'
     */
    public short get_info_total_links() {
        return (short)getUIntElement(offsetBits_info_total_links(), 8);
    }

    /**
     * Set the value of the field 'info.total_links'
     */
    public void set_info_total_links(short value) {
        setUIntElement(offsetBits_info_total_links(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'info.total_links'
     */
    public static int size_info_total_links() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'info.total_links'
     */
    public static int sizeBits_info_total_links() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: info.entries.addr
    //   Field type: int[]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'info.entries.addr' is signed (false).
     */
    public static boolean isSigned_info_entries_addr() {
        return false;
    }

    /**
     * Return whether the field 'info.entries.addr' is an array (true).
     */
    public static boolean isArray_info_entries_addr() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'info.entries.addr'
     */
    public static int offset_info_entries_addr(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 48 + index1 * 24;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'info.entries.addr'
     */
    public static int offsetBits_info_entries_addr(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 48 + index1 * 24;
        return offset;
    }

    /**
     * Return the entire array 'info.entries.addr' as a int[]
     */
    public int[] get_info_entries_addr() {
        int[] tmp = new int[7];
        for (int index0 = 0; index0 < numElements_info_entries_addr(0); index0++) {
            tmp[index0] = getElement_info_entries_addr(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'info.entries.addr' from the given int[]
     */
    public void set_info_entries_addr(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_info_entries_addr(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'info.entries.addr'
     */
    public int getElement_info_entries_addr(int index1) {
        return (int)getUIntElement(offsetBits_info_entries_addr(index1), 16);
    }

    /**
     * Set an element of the array 'info.entries.addr'
     */
    public void setElement_info_entries_addr(int index1, int value) {
        setUIntElement(offsetBits_info_entries_addr(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'info.entries.addr'
     */
    public static int totalSize_info_entries_addr() {
        return (168 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'info.entries.addr'
     */
    public static int totalSizeBits_info_entries_addr() {
        return 168;
    }

    /**
     * Return the size, in bytes, of each element of the array 'info.entries.addr'
     */
    public static int elementSize_info_entries_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'info.entries.addr'
     */
    public static int elementSizeBits_info_entries_addr() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'info.entries.addr'
     */
    public static int numDimensions_info_entries_addr() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'info.entries.addr'
     */
    public static int numElements_info_entries_addr() {
        return 7;
    }

    /**
     * Return the number of elements in the array 'info.entries.addr'
     * for the given dimension.
     */
    public static int numElements_info_entries_addr(int dimension) {
      int array_dims[] = { 7,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: info.entries.quality
    //   Field type: short[]
    //   Offset (bits): 16
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'info.entries.quality' is signed (false).
     */
    public static boolean isSigned_info_entries_quality() {
        return false;
    }

    /**
     * Return whether the field 'info.entries.quality' is an array (true).
     */
    public static boolean isArray_info_entries_quality() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'info.entries.quality'
     */
    public static int offset_info_entries_quality(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 48 + index1 * 24;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'info.entries.quality'
     */
    public static int offsetBits_info_entries_quality(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 48 + index1 * 24;
        return offset;
    }

    /**
     * Return the entire array 'info.entries.quality' as a short[]
     */
    public short[] get_info_entries_quality() {
        short[] tmp = new short[7];
        for (int index0 = 0; index0 < numElements_info_entries_quality(0); index0++) {
            tmp[index0] = getElement_info_entries_quality(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'info.entries.quality' from the given short[]
     */
    public void set_info_entries_quality(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_info_entries_quality(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'info.entries.quality'
     */
    public short getElement_info_entries_quality(int index1) {
        return (short)getUIntElement(offsetBits_info_entries_quality(index1), 8);
    }

    /**
     * Set an element of the array 'info.entries.quality'
     */
    public void setElement_info_entries_quality(int index1, short value) {
        setUIntElement(offsetBits_info_entries_quality(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'info.entries.quality'
     */
    public static int totalSize_info_entries_quality() {
        return (168 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'info.entries.quality'
     */
    public static int totalSizeBits_info_entries_quality() {
        return 168;
    }

    /**
     * Return the size, in bytes, of each element of the array 'info.entries.quality'
     */
    public static int elementSize_info_entries_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'info.entries.quality'
     */
    public static int elementSizeBits_info_entries_quality() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'info.entries.quality'
     */
    public static int numDimensions_info_entries_quality() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'info.entries.quality'
     */
    public static int numElements_info_entries_quality() {
        return 7;
    }

    /**
     * Return the number of elements in the array 'info.entries.quality'
     * for the given dimension.
     */
    public static int numElements_info_entries_quality(int dimension) {
      int array_dims[] = { 7,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'info.entries.quality' with a String
     */
    public void setString_info_entries_quality(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_info_entries_quality(i, (short)s.charAt(i));
         }
         setElement_info_entries_quality(i, (short)0); //null terminate
    }

    /**
     * Read the array 'info.entries.quality' as a String
     */
    public String getString_info_entries_quality() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,7)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_info_entries_quality(i) == (char)0) break;
             carr[i] = (char)getElement_info_entries_quality(i);
         }
         return new String(carr,0,i);
    }

}
