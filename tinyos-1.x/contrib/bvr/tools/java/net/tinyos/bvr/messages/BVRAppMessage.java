/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BVRAppMessage'
 * message type.
 */

package net.tinyos.bvr.messages;

public class BVRAppMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 55;

    /** Create a new BVRAppMessage of size 24. */
    public BVRAppMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BVRAppMessage of the given data_length. */
    public BVRAppMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage with the given data_length
     * and base offset.
     */
    public BVRAppMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage using the given byte array
     * as backing store.
     */
    public BVRAppMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public BVRAppMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BVRAppMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage embedded in the given message
     * at the given base offset.
     */
    public BVRAppMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRAppMessage embedded in the given message
     * at the given base offset and length.
     */
    public BVRAppMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BVRAppMessage> \n";
      try {
        s += "  [header.last_hop=0x"+Long.toHexString(get_header_last_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.seqno=0x"+Long.toHexString(get_header_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.hopcount=0x"+Long.toHexString(get_type_data_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.dest.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_dest_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.dest_id=0x"+Long.toHexString(get_type_data_dest_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.origin=0x"+Long.toHexString(get_type_data_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.mode=0x"+Long.toHexString(get_type_data_mode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.fallback_thresh=0x"+Long.toHexString(get_type_data_fallback_thresh())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.data=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.last_hop
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.last_hop' is signed (false).
     */
    public static boolean isSigned_header_last_hop() {
        return false;
    }

    /**
     * Return whether the field 'header.last_hop' is an array (false).
     */
    public static boolean isArray_header_last_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.last_hop'
     */
    public static int offset_header_last_hop() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.last_hop'
     */
    public static int offsetBits_header_last_hop() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.last_hop'
     */
    public int get_header_last_hop() {
        return (int)getUIntElement(offsetBits_header_last_hop(), 16);
    }

    /**
     * Set the value of the field 'header.last_hop'
     */
    public void set_header_last_hop(int value) {
        setUIntElement(offsetBits_header_last_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.last_hop'
     */
    public static int size_header_last_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.last_hop'
     */
    public static int sizeBits_header_last_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqno
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqno' is signed (false).
     */
    public static boolean isSigned_header_seqno() {
        return false;
    }

    /**
     * Return whether the field 'header.seqno' is an array (false).
     */
    public static boolean isArray_header_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqno'
     */
    public static int offset_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqno'
     */
    public static int offsetBits_header_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.seqno'
     */
    public int get_header_seqno() {
        return (int)getUIntElement(offsetBits_header_seqno(), 16);
    }

    /**
     * Set the value of the field 'header.seqno'
     */
    public void set_header_seqno(int value) {
        setUIntElement(offsetBits_header_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqno'
     */
    public static int size_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqno'
     */
    public static int sizeBits_header_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.hopcount
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.hopcount' is signed (false).
     */
    public static boolean isSigned_type_data_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'type_data.hopcount' is an array (false).
     */
    public static boolean isArray_type_data_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.hopcount'
     */
    public static int offset_type_data_hopcount() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.hopcount'
     */
    public static int offsetBits_type_data_hopcount() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'type_data.hopcount'
     */
    public short get_type_data_hopcount() {
        return (short)getUIntElement(offsetBits_type_data_hopcount(), 8);
    }

    /**
     * Set the value of the field 'type_data.hopcount'
     */
    public void set_type_data_hopcount(short value) {
        setUIntElement(offsetBits_type_data_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.hopcount'
     */
    public static int size_type_data_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.hopcount'
     */
    public static int sizeBits_type_data_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.dest.comps
    //   Field type: short[]
    //   Offset (bits): 40
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.dest.comps' is signed (false).
     */
    public static boolean isSigned_type_data_dest_comps() {
        return false;
    }

    /**
     * Return whether the field 'type_data.dest.comps' is an array (true).
     */
    public static boolean isArray_type_data_dest_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.dest.comps'
     */
    public static int offset_type_data_dest_comps(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.dest.comps'
     */
    public static int offsetBits_type_data_dest_comps(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.dest.comps' as a short[]
     */
    public short[] get_type_data_dest_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_type_data_dest_comps(0); index0++) {
            tmp[index0] = getElement_type_data_dest_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.dest.comps' from the given short[]
     */
    public void set_type_data_dest_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_dest_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.dest.comps'
     */
    public short getElement_type_data_dest_comps(int index1) {
        return (short)getUIntElement(offsetBits_type_data_dest_comps(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.dest.comps'
     */
    public void setElement_type_data_dest_comps(int index1, short value) {
        setUIntElement(offsetBits_type_data_dest_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.dest.comps'
     */
    public static int totalSize_type_data_dest_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.dest.comps'
     */
    public static int totalSizeBits_type_data_dest_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.dest.comps'
     */
    public static int elementSize_type_data_dest_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.dest.comps'
     */
    public static int elementSizeBits_type_data_dest_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.dest.comps'
     */
    public static int numDimensions_type_data_dest_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.dest.comps'
     */
    public static int numElements_type_data_dest_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'type_data.dest.comps'
     * for the given dimension.
     */
    public static int numElements_type_data_dest_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.dest.comps' with a String
     */
    public void setString_type_data_dest_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_dest_comps(i, (short)s.charAt(i));
         }
         setElement_type_data_dest_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.dest.comps' as a String
     */
    public String getString_type_data_dest_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_dest_comps(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_dest_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.dest_id
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.dest_id' is signed (false).
     */
    public static boolean isSigned_type_data_dest_id() {
        return false;
    }

    /**
     * Return whether the field 'type_data.dest_id' is an array (false).
     */
    public static boolean isArray_type_data_dest_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.dest_id'
     */
    public static int offset_type_data_dest_id() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.dest_id'
     */
    public static int offsetBits_type_data_dest_id() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'type_data.dest_id'
     */
    public int get_type_data_dest_id() {
        return (int)getUIntElement(offsetBits_type_data_dest_id(), 16);
    }

    /**
     * Set the value of the field 'type_data.dest_id'
     */
    public void set_type_data_dest_id(int value) {
        setUIntElement(offsetBits_type_data_dest_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.dest_id'
     */
    public static int size_type_data_dest_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.dest_id'
     */
    public static int sizeBits_type_data_dest_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.origin
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.origin' is signed (false).
     */
    public static boolean isSigned_type_data_origin() {
        return false;
    }

    /**
     * Return whether the field 'type_data.origin' is an array (false).
     */
    public static boolean isArray_type_data_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.origin'
     */
    public static int offset_type_data_origin() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.origin'
     */
    public static int offsetBits_type_data_origin() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'type_data.origin'
     */
    public int get_type_data_origin() {
        return (int)getUIntElement(offsetBits_type_data_origin(), 16);
    }

    /**
     * Set the value of the field 'type_data.origin'
     */
    public void set_type_data_origin(int value) {
        setUIntElement(offsetBits_type_data_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.origin'
     */
    public static int size_type_data_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.origin'
     */
    public static int sizeBits_type_data_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.mode
    //   Field type: short
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.mode' is signed (false).
     */
    public static boolean isSigned_type_data_mode() {
        return false;
    }

    /**
     * Return whether the field 'type_data.mode' is an array (false).
     */
    public static boolean isArray_type_data_mode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.mode'
     */
    public static int offset_type_data_mode() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.mode'
     */
    public static int offsetBits_type_data_mode() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'type_data.mode'
     */
    public short get_type_data_mode() {
        return (short)getUIntElement(offsetBits_type_data_mode(), 8);
    }

    /**
     * Set the value of the field 'type_data.mode'
     */
    public void set_type_data_mode(short value) {
        setUIntElement(offsetBits_type_data_mode(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.mode'
     */
    public static int size_type_data_mode() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.mode'
     */
    public static int sizeBits_type_data_mode() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.fallback_thresh
    //   Field type: int
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.fallback_thresh' is signed (false).
     */
    public static boolean isSigned_type_data_fallback_thresh() {
        return false;
    }

    /**
     * Return whether the field 'type_data.fallback_thresh' is an array (false).
     */
    public static boolean isArray_type_data_fallback_thresh() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.fallback_thresh'
     */
    public static int offset_type_data_fallback_thresh() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.fallback_thresh'
     */
    public static int offsetBits_type_data_fallback_thresh() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'type_data.fallback_thresh'
     */
    public int get_type_data_fallback_thresh() {
        return (int)getUIntElement(offsetBits_type_data_fallback_thresh(), 16);
    }

    /**
     * Set the value of the field 'type_data.fallback_thresh'
     */
    public void set_type_data_fallback_thresh(int value) {
        setUIntElement(offsetBits_type_data_fallback_thresh(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.fallback_thresh'
     */
    public static int size_type_data_fallback_thresh() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.fallback_thresh'
     */
    public static int sizeBits_type_data_fallback_thresh() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.data
    //   Field type: short[]
    //   Offset (bits): 160
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.data' is signed (false).
     */
    public static boolean isSigned_type_data_data_data() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.data' is an array (true).
     */
    public static boolean isArray_type_data_data_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.data'
     */
    public static int offset_type_data_data_data(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.data'
     */
    public static int offsetBits_type_data_data_data(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.data' as a short[]
     */
    public short[] get_type_data_data_data() {
        short[] tmp = new short[4];
        for (int index0 = 0; index0 < numElements_type_data_data_data(0); index0++) {
            tmp[index0] = getElement_type_data_data_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.data' from the given short[]
     */
    public void set_type_data_data_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.data'
     */
    public short getElement_type_data_data_data(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_data(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.data'
     */
    public void setElement_type_data_data_data(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.data'
     */
    public static int totalSize_type_data_data_data() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.data'
     */
    public static int totalSizeBits_type_data_data_data() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.data'
     */
    public static int elementSize_type_data_data_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.data'
     */
    public static int elementSizeBits_type_data_data_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.data'
     */
    public static int numDimensions_type_data_data_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.data'
     */
    public static int numElements_type_data_data_data() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'type_data.data.data'
     * for the given dimension.
     */
    public static int numElements_type_data_data_data(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.data' with a String
     */
    public void setString_type_data_data_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_data(i, (short)s.charAt(i));
         }
         setElement_type_data_data_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.data' as a String
     */
    public String getString_type_data_data_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,4)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_data(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_data(i);
         }
         return new String(carr,0,i);
    }

}
