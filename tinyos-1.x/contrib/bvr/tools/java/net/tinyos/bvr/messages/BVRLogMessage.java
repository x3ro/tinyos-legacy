/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BVRLogMessage'
 * message type.
 */

package net.tinyos.bvr.messages;

public class BVRLogMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 60;

    /** Create a new BVRLogMessage of size 29. */
    public BVRLogMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BVRLogMessage of the given data_length. */
    public BVRLogMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage with the given data_length
     * and base offset.
     */
    public BVRLogMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage using the given byte array
     * as backing store.
     */
    public BVRLogMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public BVRLogMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BVRLogMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage embedded in the given message
     * at the given base offset.
     */
    public BVRLogMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRLogMessage embedded in the given message
     * at the given base offset and length.
     */
    public BVRLogMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BVRLogMessage> \n";
      try {
        s += "  [header.last_hop=0x"+Long.toHexString(get_header_last_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.seqno=0x"+Long.toHexString(get_header_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.type=0x"+Long.toHexString(get_log_msg_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.type=0x"+Long.toHexString(get_log_msg_receive_root_beacon_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.id=0x"+Long.toHexString(get_log_msg_receive_root_beacon_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.seqno=0x"+Long.toHexString(get_log_msg_receive_root_beacon_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.hopcount=0x"+Long.toHexString(get_log_msg_receive_root_beacon_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.last_hop=0x"+Long.toHexString(get_log_msg_receive_root_beacon_last_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.receive_root_beacon.quality=0x"+Long.toHexString(get_log_msg_receive_root_beacon_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.drop_link.type=0x"+Long.toHexString(get_log_msg_drop_link_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.drop_link.addr=0x"+Long.toHexString(get_log_msg_drop_link_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.type=0x"+Long.toHexString(get_log_msg_add_link_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.state=0x"+Long.toHexString(get_log_msg_add_link_link_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.addr=0x"+Long.toHexString(get_log_msg_add_link_link_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.reverse_quality=0x"+Long.toHexString(get_log_msg_add_link_link_reverse_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.reverse_expiration=0x"+Long.toHexString(get_log_msg_add_link_link_reverse_expiration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.quality=0x"+Long.toHexString(get_log_msg_add_link_link_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.strength=0x"+Long.toHexString(get_log_msg_add_link_link_strength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.last_seqno=0x"+Long.toHexString(get_log_msg_add_link_link_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.missed=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_add_link_link_missed(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.received=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_add_link_link_received(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.age=0x"+Long.toHexString(get_log_msg_add_link_link_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_link.link.chances=0x"+Long.toHexString(get_log_msg_add_link_link_chances())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.type=0x"+Long.toHexString(get_log_msg_change_link_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.state=0x"+Long.toHexString(get_log_msg_change_link_link_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.addr=0x"+Long.toHexString(get_log_msg_change_link_link_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.reverse_quality=0x"+Long.toHexString(get_log_msg_change_link_link_reverse_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.reverse_expiration=0x"+Long.toHexString(get_log_msg_change_link_link_reverse_expiration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.quality=0x"+Long.toHexString(get_log_msg_change_link_link_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.strength=0x"+Long.toHexString(get_log_msg_change_link_link_strength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.last_seqno=0x"+Long.toHexString(get_log_msg_change_link_link_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.missed=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_change_link_link_missed(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.received=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_change_link_link_received(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.age=0x"+Long.toHexString(get_log_msg_change_link_link_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_link.link.chances=0x"+Long.toHexString(get_log_msg_change_link_link_chances())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.type=0x"+Long.toHexString(get_log_msg_add_neighbor_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.valid=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.first_hop=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_first_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.last_seqno=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.addr=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_add_neighbor_neighbor_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.quality=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.age=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.add_neighbor.neighbor.pos=0x"+Long.toHexString(get_log_msg_add_neighbor_neighbor_pos())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.type=0x"+Long.toHexString(get_log_msg_change_neighbor_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.valid=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.first_hop=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_first_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.last_seqno=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.addr=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_change_neighbor_neighbor_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.quality=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.age=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.change_neighbor.neighbor.pos=0x"+Long.toHexString(get_log_msg_change_neighbor_neighbor_pos())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.drop_neighbor.type=0x"+Long.toHexString(get_log_msg_drop_neighbor_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.drop_neighbor.addr=0x"+Long.toHexString(get_log_msg_drop_neighbor_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinates.type=0x"+Long.toHexString(get_log_msg_update_coordinates_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinates.Coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_update_coordinates_Coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinates.parents.parent=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_update_coordinates_parents_parent(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinate.type=0x"+Long.toHexString(get_log_msg_update_coordinate_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinate.beacon=0x"+Long.toHexString(get_log_msg_update_coordinate_beacon())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinate.hopcount=0x"+Long.toHexString(get_log_msg_update_coordinate_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinate.parent=0x"+Long.toHexString(get_log_msg_update_coordinate_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.update_coordinate.combined_quality=0x"+Long.toHexString(get_log_msg_update_coordinate_combined_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.type=0x"+Long.toHexString(get_log_msg_route_report_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.id=0x"+Long.toHexString(get_log_msg_route_report_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.origin_addr=0x"+Long.toHexString(get_log_msg_route_report_origin_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.dest_addr=0x"+Long.toHexString(get_log_msg_route_report_dest_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.hopcount=0x"+Long.toHexString(get_log_msg_route_report_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.dest_coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_route_report_dest_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.route_report.my_coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_log_msg_route_report_my_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.type=0x"+Long.toHexString(get_log_msg_logger_stats_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.free_pos=0x"+Long.toHexString(get_log_msg_logger_stats_free_pos())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.max_queue=0x"+Long.toHexString(get_log_msg_logger_stats_max_queue())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.stat_received=0x"+Long.toHexString(get_log_msg_logger_stats_stat_received())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.stat_written=0x"+Long.toHexString(get_log_msg_logger_stats_stat_written())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.stat_no_buffer=0x"+Long.toHexString(get_log_msg_logger_stats_stat_no_buffer())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.stat_send_failed=0x"+Long.toHexString(get_log_msg_logger_stats_stat_send_failed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.logger_stats.stat_send_done_failed=0x"+Long.toHexString(get_log_msg_logger_stats_stat_send_done_failed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.type=0x"+Long.toHexString(get_log_msg_UART_comm_stats_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_receive_duplicate_send_failed=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_receive_total=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_receive_total())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_duplicate_no_buffer=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_duplicate_send_fail=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_duplicate_send_fail())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_duplicate_success=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_duplicate_success())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_duplicate_total=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_duplicate_total())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_original_send_done_fail=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_original_send_done_fail())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_original_send_failed=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_original_send_failed())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_original_success=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_original_success())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.UART_comm_stats.stat_send_original_total=0x"+Long.toHexString(get_log_msg_UART_comm_stats_stat_send_original_total())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.type=0x"+Long.toHexString(get_log_msg_lrx_pkt_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.sender=0x"+Long.toHexString(get_log_msg_lrx_pkt_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.sender_session_id=0x"+Long.toHexString(get_log_msg_lrx_pkt_sender_session_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.sender_msg_id=0x"+Long.toHexString(get_log_msg_lrx_pkt_sender_msg_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.receiver=0x"+Long.toHexString(get_log_msg_lrx_pkt_receiver())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.receiver_session_id=0x"+Long.toHexString(get_log_msg_lrx_pkt_receiver_session_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.receiver_msg_id=0x"+Long.toHexString(get_log_msg_lrx_pkt_receiver_msg_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.ctrl=0x"+Long.toHexString(get_log_msg_lrx_pkt_ctrl())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.blockNum=0x"+Long.toHexString(get_log_msg_lrx_pkt_blockNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.subCtrl=0x"+Long.toHexString(get_log_msg_lrx_pkt_subCtrl())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_pkt.state=0x"+Long.toHexString(get_log_msg_lrx_pkt_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.type=0x"+Long.toHexString(get_log_msg_lrx_xfer_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.sender=0x"+Long.toHexString(get_log_msg_lrx_xfer_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.receiver=0x"+Long.toHexString(get_log_msg_lrx_xfer_receiver())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.session_id=0x"+Long.toHexString(get_log_msg_lrx_xfer_session_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.msg_id=0x"+Long.toHexString(get_log_msg_lrx_xfer_msg_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.numofBlock=0x"+Long.toHexString(get_log_msg_lrx_xfer_numofBlock())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.success=0x"+Long.toHexString(get_log_msg_lrx_xfer_success())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.lrx_xfer.state=0x"+Long.toHexString(get_log_msg_lrx_xfer_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.debug.type=0x"+Long.toHexString(get_log_msg_debug_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.debug.arg1=0x"+Long.toHexString(get_log_msg_debug_arg1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.debug.arg2=0x"+Long.toHexString(get_log_msg_debug_arg2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.debug.arg3=0x"+Long.toHexString(get_log_msg_debug_arg3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.type=0x"+Long.toHexString(get_log_msg_retransmit_report_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.id=0x"+Long.toHexString(get_log_msg_retransmit_report_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.origin_addr=0x"+Long.toHexString(get_log_msg_retransmit_report_origin_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.dest_addr=0x"+Long.toHexString(get_log_msg_retransmit_report_dest_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.hopcount=0x"+Long.toHexString(get_log_msg_retransmit_report_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.next_hop=0x"+Long.toHexString(get_log_msg_retransmit_report_next_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [log_msg.retransmit_report.retransmit_count=0x"+Long.toHexString(get_log_msg_retransmit_report_retransmit_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.last_hop
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.last_hop' is signed (false).
     */
    public static boolean isSigned_header_last_hop() {
        return false;
    }

    /**
     * Return whether the field 'header.last_hop' is an array (false).
     */
    public static boolean isArray_header_last_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.last_hop'
     */
    public static int offset_header_last_hop() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.last_hop'
     */
    public static int offsetBits_header_last_hop() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.last_hop'
     */
    public int get_header_last_hop() {
        return (int)getUIntElement(offsetBits_header_last_hop(), 16);
    }

    /**
     * Set the value of the field 'header.last_hop'
     */
    public void set_header_last_hop(int value) {
        setUIntElement(offsetBits_header_last_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.last_hop'
     */
    public static int size_header_last_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.last_hop'
     */
    public static int sizeBits_header_last_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqno
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqno' is signed (false).
     */
    public static boolean isSigned_header_seqno() {
        return false;
    }

    /**
     * Return whether the field 'header.seqno' is an array (false).
     */
    public static boolean isArray_header_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqno'
     */
    public static int offset_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqno'
     */
    public static int offsetBits_header_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.seqno'
     */
    public int get_header_seqno() {
        return (int)getUIntElement(offsetBits_header_seqno(), 16);
    }

    /**
     * Set the value of the field 'header.seqno'
     */
    public void set_header_seqno(int value) {
        setUIntElement(offsetBits_header_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqno'
     */
    public static int size_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqno'
     */
    public static int sizeBits_header_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.type' is signed (false).
     */
    public static boolean isSigned_log_msg_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.type' is an array (false).
     */
    public static boolean isArray_log_msg_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.type'
     */
    public static int offset_log_msg_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.type'
     */
    public static int offsetBits_log_msg_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.type'
     */
    public short get_log_msg_type() {
        return (short)getUIntElement(offsetBits_log_msg_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.type'
     */
    public void set_log_msg_type(short value) {
        setUIntElement(offsetBits_log_msg_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.type'
     */
    public static int size_log_msg_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.type'
     */
    public static int sizeBits_log_msg_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.type' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.type' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.type'
     */
    public static int offset_log_msg_receive_root_beacon_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.type'
     */
    public static int offsetBits_log_msg_receive_root_beacon_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.receive_root_beacon.type'
     */
    public short get_log_msg_receive_root_beacon_type() {
        return (short)getUIntElement(offsetBits_log_msg_receive_root_beacon_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.type'
     */
    public void set_log_msg_receive_root_beacon_type(short value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.type'
     */
    public static int size_log_msg_receive_root_beacon_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.type'
     */
    public static int sizeBits_log_msg_receive_root_beacon_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.id
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.id' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.id' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.id'
     */
    public static int offset_log_msg_receive_root_beacon_id() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.id'
     */
    public static int offsetBits_log_msg_receive_root_beacon_id() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.receive_root_beacon.id'
     */
    public short get_log_msg_receive_root_beacon_id() {
        return (short)getUIntElement(offsetBits_log_msg_receive_root_beacon_id(), 8);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.id'
     */
    public void set_log_msg_receive_root_beacon_id(short value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.id'
     */
    public static int size_log_msg_receive_root_beacon_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.id'
     */
    public static int sizeBits_log_msg_receive_root_beacon_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.seqno
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.seqno' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_seqno() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.seqno' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.seqno'
     */
    public static int offset_log_msg_receive_root_beacon_seqno() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.seqno'
     */
    public static int offsetBits_log_msg_receive_root_beacon_seqno() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.receive_root_beacon.seqno'
     */
    public short get_log_msg_receive_root_beacon_seqno() {
        return (short)getUIntElement(offsetBits_log_msg_receive_root_beacon_seqno(), 8);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.seqno'
     */
    public void set_log_msg_receive_root_beacon_seqno(short value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.seqno'
     */
    public static int size_log_msg_receive_root_beacon_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.seqno'
     */
    public static int sizeBits_log_msg_receive_root_beacon_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.hopcount
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.hopcount' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.hopcount' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public static int offset_log_msg_receive_root_beacon_hopcount() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public static int offsetBits_log_msg_receive_root_beacon_hopcount() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public short get_log_msg_receive_root_beacon_hopcount() {
        return (short)getUIntElement(offsetBits_log_msg_receive_root_beacon_hopcount(), 8);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public void set_log_msg_receive_root_beacon_hopcount(short value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public static int size_log_msg_receive_root_beacon_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.hopcount'
     */
    public static int sizeBits_log_msg_receive_root_beacon_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.last_hop
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.last_hop' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_last_hop() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.last_hop' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_last_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public static int offset_log_msg_receive_root_beacon_last_hop() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public static int offsetBits_log_msg_receive_root_beacon_last_hop() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public int get_log_msg_receive_root_beacon_last_hop() {
        return (int)getUIntElement(offsetBits_log_msg_receive_root_beacon_last_hop(), 16);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public void set_log_msg_receive_root_beacon_last_hop(int value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_last_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public static int size_log_msg_receive_root_beacon_last_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.last_hop'
     */
    public static int sizeBits_log_msg_receive_root_beacon_last_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.receive_root_beacon.quality
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.receive_root_beacon.quality' is signed (false).
     */
    public static boolean isSigned_log_msg_receive_root_beacon_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.receive_root_beacon.quality' is an array (false).
     */
    public static boolean isArray_log_msg_receive_root_beacon_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.receive_root_beacon.quality'
     */
    public static int offset_log_msg_receive_root_beacon_quality() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.receive_root_beacon.quality'
     */
    public static int offsetBits_log_msg_receive_root_beacon_quality() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.receive_root_beacon.quality'
     */
    public short get_log_msg_receive_root_beacon_quality() {
        return (short)getUIntElement(offsetBits_log_msg_receive_root_beacon_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.receive_root_beacon.quality'
     */
    public void set_log_msg_receive_root_beacon_quality(short value) {
        setUIntElement(offsetBits_log_msg_receive_root_beacon_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.receive_root_beacon.quality'
     */
    public static int size_log_msg_receive_root_beacon_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.receive_root_beacon.quality'
     */
    public static int sizeBits_log_msg_receive_root_beacon_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.drop_link.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.drop_link.type' is signed (false).
     */
    public static boolean isSigned_log_msg_drop_link_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.drop_link.type' is an array (false).
     */
    public static boolean isArray_log_msg_drop_link_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.drop_link.type'
     */
    public static int offset_log_msg_drop_link_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.drop_link.type'
     */
    public static int offsetBits_log_msg_drop_link_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.drop_link.type'
     */
    public short get_log_msg_drop_link_type() {
        return (short)getUIntElement(offsetBits_log_msg_drop_link_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.drop_link.type'
     */
    public void set_log_msg_drop_link_type(short value) {
        setUIntElement(offsetBits_log_msg_drop_link_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.drop_link.type'
     */
    public static int size_log_msg_drop_link_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.drop_link.type'
     */
    public static int sizeBits_log_msg_drop_link_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.drop_link.addr
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.drop_link.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_drop_link_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.drop_link.addr' is an array (false).
     */
    public static boolean isArray_log_msg_drop_link_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.drop_link.addr'
     */
    public static int offset_log_msg_drop_link_addr() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.drop_link.addr'
     */
    public static int offsetBits_log_msg_drop_link_addr() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.drop_link.addr'
     */
    public int get_log_msg_drop_link_addr() {
        return (int)getUIntElement(offsetBits_log_msg_drop_link_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.drop_link.addr'
     */
    public void set_log_msg_drop_link_addr(int value) {
        setUIntElement(offsetBits_log_msg_drop_link_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.drop_link.addr'
     */
    public static int size_log_msg_drop_link_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.drop_link.addr'
     */
    public static int sizeBits_log_msg_drop_link_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.type' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.type' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.type'
     */
    public static int offset_log_msg_add_link_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.type'
     */
    public static int offsetBits_log_msg_add_link_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.type'
     */
    public short get_log_msg_add_link_type() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.type'
     */
    public void set_log_msg_add_link_type(short value) {
        setUIntElement(offsetBits_log_msg_add_link_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.type'
     */
    public static int size_log_msg_add_link_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.type'
     */
    public static int sizeBits_log_msg_add_link_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.state
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.state' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_state() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.state' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.state'
     */
    public static int offset_log_msg_add_link_link_state() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.state'
     */
    public static int offsetBits_log_msg_add_link_link_state() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.state'
     */
    public short get_log_msg_add_link_link_state() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_state(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.state'
     */
    public void set_log_msg_add_link_link_state(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.state'
     */
    public static int size_log_msg_add_link_link_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.state'
     */
    public static int sizeBits_log_msg_add_link_link_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.addr
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.addr' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.addr'
     */
    public static int offset_log_msg_add_link_link_addr() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.addr'
     */
    public static int offsetBits_log_msg_add_link_link_addr() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.add_link.link.addr'
     */
    public int get_log_msg_add_link_link_addr() {
        return (int)getUIntElement(offsetBits_log_msg_add_link_link_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.addr'
     */
    public void set_log_msg_add_link_link_addr(int value) {
        setUIntElement(offsetBits_log_msg_add_link_link_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.addr'
     */
    public static int size_log_msg_add_link_link_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.addr'
     */
    public static int sizeBits_log_msg_add_link_link_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.reverse_quality
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.reverse_quality' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_reverse_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.reverse_quality' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_reverse_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.reverse_quality'
     */
    public static int offset_log_msg_add_link_link_reverse_quality() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.reverse_quality'
     */
    public static int offsetBits_log_msg_add_link_link_reverse_quality() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.reverse_quality'
     */
    public short get_log_msg_add_link_link_reverse_quality() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_reverse_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.reverse_quality'
     */
    public void set_log_msg_add_link_link_reverse_quality(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_reverse_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.reverse_quality'
     */
    public static int size_log_msg_add_link_link_reverse_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.reverse_quality'
     */
    public static int sizeBits_log_msg_add_link_link_reverse_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.reverse_expiration
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.reverse_expiration' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_reverse_expiration() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.reverse_expiration' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_reverse_expiration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public static int offset_log_msg_add_link_link_reverse_expiration() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public static int offsetBits_log_msg_add_link_link_reverse_expiration() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public short get_log_msg_add_link_link_reverse_expiration() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_reverse_expiration(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public void set_log_msg_add_link_link_reverse_expiration(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_reverse_expiration(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public static int size_log_msg_add_link_link_reverse_expiration() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.reverse_expiration'
     */
    public static int sizeBits_log_msg_add_link_link_reverse_expiration() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.quality
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.quality' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.quality' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.quality'
     */
    public static int offset_log_msg_add_link_link_quality() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.quality'
     */
    public static int offsetBits_log_msg_add_link_link_quality() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.quality'
     */
    public short get_log_msg_add_link_link_quality() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.quality'
     */
    public void set_log_msg_add_link_link_quality(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.quality'
     */
    public static int size_log_msg_add_link_link_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.quality'
     */
    public static int sizeBits_log_msg_add_link_link_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.strength
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.strength' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_strength() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.strength' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_strength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.strength'
     */
    public static int offset_log_msg_add_link_link_strength() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.strength'
     */
    public static int offsetBits_log_msg_add_link_link_strength() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.add_link.link.strength'
     */
    public int get_log_msg_add_link_link_strength() {
        return (int)getUIntElement(offsetBits_log_msg_add_link_link_strength(), 16);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.strength'
     */
    public void set_log_msg_add_link_link_strength(int value) {
        setUIntElement(offsetBits_log_msg_add_link_link_strength(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.strength'
     */
    public static int size_log_msg_add_link_link_strength() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.strength'
     */
    public static int sizeBits_log_msg_add_link_link_strength() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.last_seqno
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.last_seqno' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.last_seqno' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.last_seqno'
     */
    public static int offset_log_msg_add_link_link_last_seqno() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.last_seqno'
     */
    public static int offsetBits_log_msg_add_link_link_last_seqno() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.add_link.link.last_seqno'
     */
    public int get_log_msg_add_link_link_last_seqno() {
        return (int)getUIntElement(offsetBits_log_msg_add_link_link_last_seqno(), 16);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.last_seqno'
     */
    public void set_log_msg_add_link_link_last_seqno(int value) {
        setUIntElement(offsetBits_log_msg_add_link_link_last_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.last_seqno'
     */
    public static int size_log_msg_add_link_link_last_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.last_seqno'
     */
    public static int sizeBits_log_msg_add_link_link_last_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.missed
    //   Field type: short[]
    //   Offset (bits): 120
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.missed' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_missed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.missed' is an array (true).
     */
    public static boolean isArray_log_msg_add_link_link_missed() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.missed'
     */
    public static int offset_log_msg_add_link_link_missed(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.missed'
     */
    public static int offsetBits_log_msg_add_link_link_missed(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.add_link.link.missed' as a short[]
     */
    public short[] get_log_msg_add_link_link_missed() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_log_msg_add_link_link_missed(0); index0++) {
            tmp[index0] = getElement_log_msg_add_link_link_missed(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.add_link.link.missed' from the given short[]
     */
    public void set_log_msg_add_link_link_missed(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_add_link_link_missed(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.add_link.link.missed'
     */
    public short getElement_log_msg_add_link_link_missed(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_missed(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.add_link.link.missed'
     */
    public void setElement_log_msg_add_link_link_missed(int index1, short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_missed(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.add_link.link.missed'
     */
    public static int totalSize_log_msg_add_link_link_missed() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.add_link.link.missed'
     */
    public static int totalSizeBits_log_msg_add_link_link_missed() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.add_link.link.missed'
     */
    public static int elementSize_log_msg_add_link_link_missed() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.add_link.link.missed'
     */
    public static int elementSizeBits_log_msg_add_link_link_missed() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.add_link.link.missed'
     */
    public static int numDimensions_log_msg_add_link_link_missed() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_link.link.missed'
     */
    public static int numElements_log_msg_add_link_link_missed() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_link.link.missed'
     * for the given dimension.
     */
    public static int numElements_log_msg_add_link_link_missed(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.add_link.link.missed' with a String
     */
    public void setString_log_msg_add_link_link_missed(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_add_link_link_missed(i, (short)s.charAt(i));
         }
         setElement_log_msg_add_link_link_missed(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.add_link.link.missed' as a String
     */
    public String getString_log_msg_add_link_link_missed() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_add_link_link_missed(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_add_link_link_missed(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.received
    //   Field type: short[]
    //   Offset (bits): 144
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.received' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_received() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.received' is an array (true).
     */
    public static boolean isArray_log_msg_add_link_link_received() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.received'
     */
    public static int offset_log_msg_add_link_link_received(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.received'
     */
    public static int offsetBits_log_msg_add_link_link_received(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.add_link.link.received' as a short[]
     */
    public short[] get_log_msg_add_link_link_received() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_log_msg_add_link_link_received(0); index0++) {
            tmp[index0] = getElement_log_msg_add_link_link_received(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.add_link.link.received' from the given short[]
     */
    public void set_log_msg_add_link_link_received(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_add_link_link_received(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.add_link.link.received'
     */
    public short getElement_log_msg_add_link_link_received(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_received(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.add_link.link.received'
     */
    public void setElement_log_msg_add_link_link_received(int index1, short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_received(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.add_link.link.received'
     */
    public static int totalSize_log_msg_add_link_link_received() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.add_link.link.received'
     */
    public static int totalSizeBits_log_msg_add_link_link_received() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.add_link.link.received'
     */
    public static int elementSize_log_msg_add_link_link_received() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.add_link.link.received'
     */
    public static int elementSizeBits_log_msg_add_link_link_received() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.add_link.link.received'
     */
    public static int numDimensions_log_msg_add_link_link_received() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_link.link.received'
     */
    public static int numElements_log_msg_add_link_link_received() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_link.link.received'
     * for the given dimension.
     */
    public static int numElements_log_msg_add_link_link_received(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.add_link.link.received' with a String
     */
    public void setString_log_msg_add_link_link_received(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_add_link_link_received(i, (short)s.charAt(i));
         }
         setElement_log_msg_add_link_link_received(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.add_link.link.received' as a String
     */
    public String getString_log_msg_add_link_link_received() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_add_link_link_received(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_add_link_link_received(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.age
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.age' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_age() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.age' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.age'
     */
    public static int offset_log_msg_add_link_link_age() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.age'
     */
    public static int offsetBits_log_msg_add_link_link_age() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.age'
     */
    public short get_log_msg_add_link_link_age() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_age(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.age'
     */
    public void set_log_msg_add_link_link_age(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.age'
     */
    public static int size_log_msg_add_link_link_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.age'
     */
    public static int sizeBits_log_msg_add_link_link_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_link.link.chances
    //   Field type: short
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_link.link.chances' is signed (false).
     */
    public static boolean isSigned_log_msg_add_link_link_chances() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_link.link.chances' is an array (false).
     */
    public static boolean isArray_log_msg_add_link_link_chances() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_link.link.chances'
     */
    public static int offset_log_msg_add_link_link_chances() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_link.link.chances'
     */
    public static int offsetBits_log_msg_add_link_link_chances() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_link.link.chances'
     */
    public short get_log_msg_add_link_link_chances() {
        return (short)getUIntElement(offsetBits_log_msg_add_link_link_chances(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_link.link.chances'
     */
    public void set_log_msg_add_link_link_chances(short value) {
        setUIntElement(offsetBits_log_msg_add_link_link_chances(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_link.link.chances'
     */
    public static int size_log_msg_add_link_link_chances() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_link.link.chances'
     */
    public static int sizeBits_log_msg_add_link_link_chances() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.type' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.type' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.type'
     */
    public static int offset_log_msg_change_link_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.type'
     */
    public static int offsetBits_log_msg_change_link_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.type'
     */
    public short get_log_msg_change_link_type() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.type'
     */
    public void set_log_msg_change_link_type(short value) {
        setUIntElement(offsetBits_log_msg_change_link_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.type'
     */
    public static int size_log_msg_change_link_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.type'
     */
    public static int sizeBits_log_msg_change_link_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.state
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.state' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_state() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.state' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.state'
     */
    public static int offset_log_msg_change_link_link_state() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.state'
     */
    public static int offsetBits_log_msg_change_link_link_state() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.state'
     */
    public short get_log_msg_change_link_link_state() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_state(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.state'
     */
    public void set_log_msg_change_link_link_state(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.state'
     */
    public static int size_log_msg_change_link_link_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.state'
     */
    public static int sizeBits_log_msg_change_link_link_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.addr
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.addr' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.addr'
     */
    public static int offset_log_msg_change_link_link_addr() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.addr'
     */
    public static int offsetBits_log_msg_change_link_link_addr() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.change_link.link.addr'
     */
    public int get_log_msg_change_link_link_addr() {
        return (int)getUIntElement(offsetBits_log_msg_change_link_link_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.addr'
     */
    public void set_log_msg_change_link_link_addr(int value) {
        setUIntElement(offsetBits_log_msg_change_link_link_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.addr'
     */
    public static int size_log_msg_change_link_link_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.addr'
     */
    public static int sizeBits_log_msg_change_link_link_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.reverse_quality
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.reverse_quality' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_reverse_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.reverse_quality' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_reverse_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.reverse_quality'
     */
    public static int offset_log_msg_change_link_link_reverse_quality() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.reverse_quality'
     */
    public static int offsetBits_log_msg_change_link_link_reverse_quality() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.reverse_quality'
     */
    public short get_log_msg_change_link_link_reverse_quality() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_reverse_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.reverse_quality'
     */
    public void set_log_msg_change_link_link_reverse_quality(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_reverse_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.reverse_quality'
     */
    public static int size_log_msg_change_link_link_reverse_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.reverse_quality'
     */
    public static int sizeBits_log_msg_change_link_link_reverse_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.reverse_expiration
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.reverse_expiration' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_reverse_expiration() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.reverse_expiration' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_reverse_expiration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public static int offset_log_msg_change_link_link_reverse_expiration() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public static int offsetBits_log_msg_change_link_link_reverse_expiration() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public short get_log_msg_change_link_link_reverse_expiration() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_reverse_expiration(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public void set_log_msg_change_link_link_reverse_expiration(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_reverse_expiration(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public static int size_log_msg_change_link_link_reverse_expiration() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.reverse_expiration'
     */
    public static int sizeBits_log_msg_change_link_link_reverse_expiration() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.quality
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.quality' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.quality' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.quality'
     */
    public static int offset_log_msg_change_link_link_quality() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.quality'
     */
    public static int offsetBits_log_msg_change_link_link_quality() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.quality'
     */
    public short get_log_msg_change_link_link_quality() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.quality'
     */
    public void set_log_msg_change_link_link_quality(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.quality'
     */
    public static int size_log_msg_change_link_link_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.quality'
     */
    public static int sizeBits_log_msg_change_link_link_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.strength
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.strength' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_strength() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.strength' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_strength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.strength'
     */
    public static int offset_log_msg_change_link_link_strength() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.strength'
     */
    public static int offsetBits_log_msg_change_link_link_strength() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.change_link.link.strength'
     */
    public int get_log_msg_change_link_link_strength() {
        return (int)getUIntElement(offsetBits_log_msg_change_link_link_strength(), 16);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.strength'
     */
    public void set_log_msg_change_link_link_strength(int value) {
        setUIntElement(offsetBits_log_msg_change_link_link_strength(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.strength'
     */
    public static int size_log_msg_change_link_link_strength() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.strength'
     */
    public static int sizeBits_log_msg_change_link_link_strength() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.last_seqno
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.last_seqno' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.last_seqno' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.last_seqno'
     */
    public static int offset_log_msg_change_link_link_last_seqno() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.last_seqno'
     */
    public static int offsetBits_log_msg_change_link_link_last_seqno() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.change_link.link.last_seqno'
     */
    public int get_log_msg_change_link_link_last_seqno() {
        return (int)getUIntElement(offsetBits_log_msg_change_link_link_last_seqno(), 16);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.last_seqno'
     */
    public void set_log_msg_change_link_link_last_seqno(int value) {
        setUIntElement(offsetBits_log_msg_change_link_link_last_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.last_seqno'
     */
    public static int size_log_msg_change_link_link_last_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.last_seqno'
     */
    public static int sizeBits_log_msg_change_link_link_last_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.missed
    //   Field type: short[]
    //   Offset (bits): 120
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.missed' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_missed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.missed' is an array (true).
     */
    public static boolean isArray_log_msg_change_link_link_missed() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.missed'
     */
    public static int offset_log_msg_change_link_link_missed(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.missed'
     */
    public static int offsetBits_log_msg_change_link_link_missed(int index1) {
        int offset = 120;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.change_link.link.missed' as a short[]
     */
    public short[] get_log_msg_change_link_link_missed() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_log_msg_change_link_link_missed(0); index0++) {
            tmp[index0] = getElement_log_msg_change_link_link_missed(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.change_link.link.missed' from the given short[]
     */
    public void set_log_msg_change_link_link_missed(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_change_link_link_missed(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.change_link.link.missed'
     */
    public short getElement_log_msg_change_link_link_missed(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_missed(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.change_link.link.missed'
     */
    public void setElement_log_msg_change_link_link_missed(int index1, short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_missed(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.change_link.link.missed'
     */
    public static int totalSize_log_msg_change_link_link_missed() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.change_link.link.missed'
     */
    public static int totalSizeBits_log_msg_change_link_link_missed() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.change_link.link.missed'
     */
    public static int elementSize_log_msg_change_link_link_missed() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.change_link.link.missed'
     */
    public static int elementSizeBits_log_msg_change_link_link_missed() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.change_link.link.missed'
     */
    public static int numDimensions_log_msg_change_link_link_missed() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_link.link.missed'
     */
    public static int numElements_log_msg_change_link_link_missed() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_link.link.missed'
     * for the given dimension.
     */
    public static int numElements_log_msg_change_link_link_missed(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.change_link.link.missed' with a String
     */
    public void setString_log_msg_change_link_link_missed(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_change_link_link_missed(i, (short)s.charAt(i));
         }
         setElement_log_msg_change_link_link_missed(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.change_link.link.missed' as a String
     */
    public String getString_log_msg_change_link_link_missed() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_change_link_link_missed(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_change_link_link_missed(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.received
    //   Field type: short[]
    //   Offset (bits): 144
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.received' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_received() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.received' is an array (true).
     */
    public static boolean isArray_log_msg_change_link_link_received() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.received'
     */
    public static int offset_log_msg_change_link_link_received(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.received'
     */
    public static int offsetBits_log_msg_change_link_link_received(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.change_link.link.received' as a short[]
     */
    public short[] get_log_msg_change_link_link_received() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_log_msg_change_link_link_received(0); index0++) {
            tmp[index0] = getElement_log_msg_change_link_link_received(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.change_link.link.received' from the given short[]
     */
    public void set_log_msg_change_link_link_received(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_change_link_link_received(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.change_link.link.received'
     */
    public short getElement_log_msg_change_link_link_received(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_received(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.change_link.link.received'
     */
    public void setElement_log_msg_change_link_link_received(int index1, short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_received(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.change_link.link.received'
     */
    public static int totalSize_log_msg_change_link_link_received() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.change_link.link.received'
     */
    public static int totalSizeBits_log_msg_change_link_link_received() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.change_link.link.received'
     */
    public static int elementSize_log_msg_change_link_link_received() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.change_link.link.received'
     */
    public static int elementSizeBits_log_msg_change_link_link_received() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.change_link.link.received'
     */
    public static int numDimensions_log_msg_change_link_link_received() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_link.link.received'
     */
    public static int numElements_log_msg_change_link_link_received() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_link.link.received'
     * for the given dimension.
     */
    public static int numElements_log_msg_change_link_link_received(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.change_link.link.received' with a String
     */
    public void setString_log_msg_change_link_link_received(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_change_link_link_received(i, (short)s.charAt(i));
         }
         setElement_log_msg_change_link_link_received(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.change_link.link.received' as a String
     */
    public String getString_log_msg_change_link_link_received() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_change_link_link_received(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_change_link_link_received(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.age
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.age' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_age() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.age' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.age'
     */
    public static int offset_log_msg_change_link_link_age() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.age'
     */
    public static int offsetBits_log_msg_change_link_link_age() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.age'
     */
    public short get_log_msg_change_link_link_age() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_age(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.age'
     */
    public void set_log_msg_change_link_link_age(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.age'
     */
    public static int size_log_msg_change_link_link_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.age'
     */
    public static int sizeBits_log_msg_change_link_link_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_link.link.chances
    //   Field type: short
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_link.link.chances' is signed (false).
     */
    public static boolean isSigned_log_msg_change_link_link_chances() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_link.link.chances' is an array (false).
     */
    public static boolean isArray_log_msg_change_link_link_chances() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_link.link.chances'
     */
    public static int offset_log_msg_change_link_link_chances() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_link.link.chances'
     */
    public static int offsetBits_log_msg_change_link_link_chances() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_link.link.chances'
     */
    public short get_log_msg_change_link_link_chances() {
        return (short)getUIntElement(offsetBits_log_msg_change_link_link_chances(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_link.link.chances'
     */
    public void set_log_msg_change_link_link_chances(short value) {
        setUIntElement(offsetBits_log_msg_change_link_link_chances(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_link.link.chances'
     */
    public static int size_log_msg_change_link_link_chances() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_link.link.chances'
     */
    public static int sizeBits_log_msg_change_link_link_chances() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.type' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.type' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.type'
     */
    public static int offset_log_msg_add_neighbor_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.type'
     */
    public static int offsetBits_log_msg_add_neighbor_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.type'
     */
    public short get_log_msg_add_neighbor_type() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.type'
     */
    public void set_log_msg_add_neighbor_type(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.type'
     */
    public static int size_log_msg_add_neighbor_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.type'
     */
    public static int sizeBits_log_msg_add_neighbor_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.valid
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.valid' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_valid() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.valid' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public static int offset_log_msg_add_neighbor_neighbor_valid() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_valid() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public short get_log_msg_add_neighbor_neighbor_valid() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_valid(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public void set_log_msg_add_neighbor_neighbor_valid(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public static int size_log_msg_add_neighbor_neighbor_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.valid'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.first_hop
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.first_hop' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_first_hop() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.first_hop' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_first_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public static int offset_log_msg_add_neighbor_neighbor_first_hop() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_first_hop() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public int get_log_msg_add_neighbor_neighbor_first_hop() {
        return (int)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_first_hop(), 16);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public void set_log_msg_add_neighbor_neighbor_first_hop(int value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_first_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public static int size_log_msg_add_neighbor_neighbor_first_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.first_hop'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_first_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.last_seqno
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.last_seqno' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.last_seqno' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public static int offset_log_msg_add_neighbor_neighbor_last_seqno() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_last_seqno() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public short get_log_msg_add_neighbor_neighbor_last_seqno() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_last_seqno(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public void set_log_msg_add_neighbor_neighbor_last_seqno(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_last_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public static int size_log_msg_add_neighbor_neighbor_last_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.last_seqno'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_last_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.addr
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.addr' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public static int offset_log_msg_add_neighbor_neighbor_addr() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_addr() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public int get_log_msg_add_neighbor_neighbor_addr() {
        return (int)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public void set_log_msg_add_neighbor_neighbor_addr(int value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public static int size_log_msg_add_neighbor_neighbor_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.addr'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.coords.comps
    //   Field type: short[]
    //   Offset (bits): 88
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.coords.comps' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.coords.comps' is an array (true).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int offset_log_msg_add_neighbor_neighbor_coords_comps(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_coords_comps(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.add_neighbor.neighbor.coords.comps' as a short[]
     */
    public short[] get_log_msg_add_neighbor_neighbor_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_log_msg_add_neighbor_neighbor_coords_comps(0); index0++) {
            tmp[index0] = getElement_log_msg_add_neighbor_neighbor_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.add_neighbor.neighbor.coords.comps' from the given short[]
     */
    public void set_log_msg_add_neighbor_neighbor_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_add_neighbor_neighbor_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public short getElement_log_msg_add_neighbor_neighbor_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public void setElement_log_msg_add_neighbor_neighbor_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int totalSize_log_msg_add_neighbor_neighbor_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int totalSizeBits_log_msg_add_neighbor_neighbor_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int elementSize_log_msg_add_neighbor_neighbor_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int elementSizeBits_log_msg_add_neighbor_neighbor_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int numDimensions_log_msg_add_neighbor_neighbor_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_neighbor.neighbor.coords.comps'
     */
    public static int numElements_log_msg_add_neighbor_neighbor_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.add_neighbor.neighbor.coords.comps'
     * for the given dimension.
     */
    public static int numElements_log_msg_add_neighbor_neighbor_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.add_neighbor.neighbor.coords.comps' with a String
     */
    public void setString_log_msg_add_neighbor_neighbor_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_add_neighbor_neighbor_coords_comps(i, (short)s.charAt(i));
         }
         setElement_log_msg_add_neighbor_neighbor_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.add_neighbor.neighbor.coords.comps' as a String
     */
    public String getString_log_msg_add_neighbor_neighbor_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_add_neighbor_neighbor_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_add_neighbor_neighbor_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.quality
    //   Field type: short
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.quality' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.quality' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public static int offset_log_msg_add_neighbor_neighbor_quality() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_quality() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public short get_log_msg_add_neighbor_neighbor_quality() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public void set_log_msg_add_neighbor_neighbor_quality(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public static int size_log_msg_add_neighbor_neighbor_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.quality'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.age
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.age' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_age() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.age' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public static int offset_log_msg_add_neighbor_neighbor_age() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_age() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public short get_log_msg_add_neighbor_neighbor_age() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_age(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public void set_log_msg_add_neighbor_neighbor_age(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public static int size_log_msg_add_neighbor_neighbor_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.age'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.add_neighbor.neighbor.pos
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.pos' is signed (false).
     */
    public static boolean isSigned_log_msg_add_neighbor_neighbor_pos() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.add_neighbor.neighbor.pos' is an array (false).
     */
    public static boolean isArray_log_msg_add_neighbor_neighbor_pos() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public static int offset_log_msg_add_neighbor_neighbor_pos() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public static int offsetBits_log_msg_add_neighbor_neighbor_pos() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public short get_log_msg_add_neighbor_neighbor_pos() {
        return (short)getUIntElement(offsetBits_log_msg_add_neighbor_neighbor_pos(), 8);
    }

    /**
     * Set the value of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public void set_log_msg_add_neighbor_neighbor_pos(short value) {
        setUIntElement(offsetBits_log_msg_add_neighbor_neighbor_pos(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public static int size_log_msg_add_neighbor_neighbor_pos() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.add_neighbor.neighbor.pos'
     */
    public static int sizeBits_log_msg_add_neighbor_neighbor_pos() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.type' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.type' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.type'
     */
    public static int offset_log_msg_change_neighbor_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.type'
     */
    public static int offsetBits_log_msg_change_neighbor_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.type'
     */
    public short get_log_msg_change_neighbor_type() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.type'
     */
    public void set_log_msg_change_neighbor_type(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.type'
     */
    public static int size_log_msg_change_neighbor_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.type'
     */
    public static int sizeBits_log_msg_change_neighbor_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.valid
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.valid' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_valid() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.valid' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public static int offset_log_msg_change_neighbor_neighbor_valid() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_valid() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public short get_log_msg_change_neighbor_neighbor_valid() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_valid(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public void set_log_msg_change_neighbor_neighbor_valid(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public static int size_log_msg_change_neighbor_neighbor_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.valid'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.first_hop
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.first_hop' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_first_hop() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.first_hop' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_first_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public static int offset_log_msg_change_neighbor_neighbor_first_hop() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_first_hop() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public int get_log_msg_change_neighbor_neighbor_first_hop() {
        return (int)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_first_hop(), 16);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public void set_log_msg_change_neighbor_neighbor_first_hop(int value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_first_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public static int size_log_msg_change_neighbor_neighbor_first_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.first_hop'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_first_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.last_seqno
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.last_seqno' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.last_seqno' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public static int offset_log_msg_change_neighbor_neighbor_last_seqno() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_last_seqno() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public short get_log_msg_change_neighbor_neighbor_last_seqno() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_last_seqno(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public void set_log_msg_change_neighbor_neighbor_last_seqno(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_last_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public static int size_log_msg_change_neighbor_neighbor_last_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.last_seqno'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_last_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.addr
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.addr' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public static int offset_log_msg_change_neighbor_neighbor_addr() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_addr() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public int get_log_msg_change_neighbor_neighbor_addr() {
        return (int)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public void set_log_msg_change_neighbor_neighbor_addr(int value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public static int size_log_msg_change_neighbor_neighbor_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.addr'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.coords.comps
    //   Field type: short[]
    //   Offset (bits): 88
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.coords.comps' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.coords.comps' is an array (true).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int offset_log_msg_change_neighbor_neighbor_coords_comps(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_coords_comps(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.change_neighbor.neighbor.coords.comps' as a short[]
     */
    public short[] get_log_msg_change_neighbor_neighbor_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_log_msg_change_neighbor_neighbor_coords_comps(0); index0++) {
            tmp[index0] = getElement_log_msg_change_neighbor_neighbor_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.change_neighbor.neighbor.coords.comps' from the given short[]
     */
    public void set_log_msg_change_neighbor_neighbor_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_change_neighbor_neighbor_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public short getElement_log_msg_change_neighbor_neighbor_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public void setElement_log_msg_change_neighbor_neighbor_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int totalSize_log_msg_change_neighbor_neighbor_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int totalSizeBits_log_msg_change_neighbor_neighbor_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int elementSize_log_msg_change_neighbor_neighbor_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int elementSizeBits_log_msg_change_neighbor_neighbor_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int numDimensions_log_msg_change_neighbor_neighbor_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_neighbor.neighbor.coords.comps'
     */
    public static int numElements_log_msg_change_neighbor_neighbor_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.change_neighbor.neighbor.coords.comps'
     * for the given dimension.
     */
    public static int numElements_log_msg_change_neighbor_neighbor_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.change_neighbor.neighbor.coords.comps' with a String
     */
    public void setString_log_msg_change_neighbor_neighbor_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_change_neighbor_neighbor_coords_comps(i, (short)s.charAt(i));
         }
         setElement_log_msg_change_neighbor_neighbor_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.change_neighbor.neighbor.coords.comps' as a String
     */
    public String getString_log_msg_change_neighbor_neighbor_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_change_neighbor_neighbor_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_change_neighbor_neighbor_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.quality
    //   Field type: short
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.quality' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.quality' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public static int offset_log_msg_change_neighbor_neighbor_quality() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_quality() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public short get_log_msg_change_neighbor_neighbor_quality() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public void set_log_msg_change_neighbor_neighbor_quality(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public static int size_log_msg_change_neighbor_neighbor_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.quality'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.age
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.age' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_age() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.age' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public static int offset_log_msg_change_neighbor_neighbor_age() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_age() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public short get_log_msg_change_neighbor_neighbor_age() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_age(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public void set_log_msg_change_neighbor_neighbor_age(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public static int size_log_msg_change_neighbor_neighbor_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.age'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.change_neighbor.neighbor.pos
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.pos' is signed (false).
     */
    public static boolean isSigned_log_msg_change_neighbor_neighbor_pos() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.change_neighbor.neighbor.pos' is an array (false).
     */
    public static boolean isArray_log_msg_change_neighbor_neighbor_pos() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public static int offset_log_msg_change_neighbor_neighbor_pos() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public static int offsetBits_log_msg_change_neighbor_neighbor_pos() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public short get_log_msg_change_neighbor_neighbor_pos() {
        return (short)getUIntElement(offsetBits_log_msg_change_neighbor_neighbor_pos(), 8);
    }

    /**
     * Set the value of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public void set_log_msg_change_neighbor_neighbor_pos(short value) {
        setUIntElement(offsetBits_log_msg_change_neighbor_neighbor_pos(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public static int size_log_msg_change_neighbor_neighbor_pos() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.change_neighbor.neighbor.pos'
     */
    public static int sizeBits_log_msg_change_neighbor_neighbor_pos() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.drop_neighbor.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.drop_neighbor.type' is signed (false).
     */
    public static boolean isSigned_log_msg_drop_neighbor_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.drop_neighbor.type' is an array (false).
     */
    public static boolean isArray_log_msg_drop_neighbor_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.drop_neighbor.type'
     */
    public static int offset_log_msg_drop_neighbor_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.drop_neighbor.type'
     */
    public static int offsetBits_log_msg_drop_neighbor_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.drop_neighbor.type'
     */
    public short get_log_msg_drop_neighbor_type() {
        return (short)getUIntElement(offsetBits_log_msg_drop_neighbor_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.drop_neighbor.type'
     */
    public void set_log_msg_drop_neighbor_type(short value) {
        setUIntElement(offsetBits_log_msg_drop_neighbor_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.drop_neighbor.type'
     */
    public static int size_log_msg_drop_neighbor_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.drop_neighbor.type'
     */
    public static int sizeBits_log_msg_drop_neighbor_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.drop_neighbor.addr
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.drop_neighbor.addr' is signed (false).
     */
    public static boolean isSigned_log_msg_drop_neighbor_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.drop_neighbor.addr' is an array (false).
     */
    public static boolean isArray_log_msg_drop_neighbor_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.drop_neighbor.addr'
     */
    public static int offset_log_msg_drop_neighbor_addr() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.drop_neighbor.addr'
     */
    public static int offsetBits_log_msg_drop_neighbor_addr() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.drop_neighbor.addr'
     */
    public int get_log_msg_drop_neighbor_addr() {
        return (int)getUIntElement(offsetBits_log_msg_drop_neighbor_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.drop_neighbor.addr'
     */
    public void set_log_msg_drop_neighbor_addr(int value) {
        setUIntElement(offsetBits_log_msg_drop_neighbor_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.drop_neighbor.addr'
     */
    public static int size_log_msg_drop_neighbor_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.drop_neighbor.addr'
     */
    public static int sizeBits_log_msg_drop_neighbor_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinates.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinates.type' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinates_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinates.type' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinates_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinates.type'
     */
    public static int offset_log_msg_update_coordinates_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinates.type'
     */
    public static int offsetBits_log_msg_update_coordinates_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.update_coordinates.type'
     */
    public short get_log_msg_update_coordinates_type() {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinates_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinates.type'
     */
    public void set_log_msg_update_coordinates_type(short value) {
        setUIntElement(offsetBits_log_msg_update_coordinates_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinates.type'
     */
    public static int size_log_msg_update_coordinates_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinates.type'
     */
    public static int sizeBits_log_msg_update_coordinates_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinates.Coords.comps
    //   Field type: short[]
    //   Offset (bits): 40
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinates.Coords.comps' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinates_Coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinates.Coords.comps' is an array (true).
     */
    public static boolean isArray_log_msg_update_coordinates_Coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinates.Coords.comps'
     */
    public static int offset_log_msg_update_coordinates_Coords_comps(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinates.Coords.comps'
     */
    public static int offsetBits_log_msg_update_coordinates_Coords_comps(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.update_coordinates.Coords.comps' as a short[]
     */
    public short[] get_log_msg_update_coordinates_Coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_log_msg_update_coordinates_Coords_comps(0); index0++) {
            tmp[index0] = getElement_log_msg_update_coordinates_Coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.update_coordinates.Coords.comps' from the given short[]
     */
    public void set_log_msg_update_coordinates_Coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_update_coordinates_Coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public short getElement_log_msg_update_coordinates_Coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinates_Coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public void setElement_log_msg_update_coordinates_Coords_comps(int index1, short value) {
        setUIntElement(offsetBits_log_msg_update_coordinates_Coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int totalSize_log_msg_update_coordinates_Coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int totalSizeBits_log_msg_update_coordinates_Coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int elementSize_log_msg_update_coordinates_Coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int elementSizeBits_log_msg_update_coordinates_Coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int numDimensions_log_msg_update_coordinates_Coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.update_coordinates.Coords.comps'
     */
    public static int numElements_log_msg_update_coordinates_Coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.update_coordinates.Coords.comps'
     * for the given dimension.
     */
    public static int numElements_log_msg_update_coordinates_Coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.update_coordinates.Coords.comps' with a String
     */
    public void setString_log_msg_update_coordinates_Coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_update_coordinates_Coords_comps(i, (short)s.charAt(i));
         }
         setElement_log_msg_update_coordinates_Coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.update_coordinates.Coords.comps' as a String
     */
    public String getString_log_msg_update_coordinates_Coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_update_coordinates_Coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_update_coordinates_Coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinates.parents.parent
    //   Field type: int[]
    //   Offset (bits): 104
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinates.parents.parent' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinates_parents_parent() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinates.parents.parent' is an array (true).
     */
    public static boolean isArray_log_msg_update_coordinates_parents_parent() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinates.parents.parent'
     */
    public static int offset_log_msg_update_coordinates_parents_parent(int index1) {
        int offset = 104;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinates.parents.parent'
     */
    public static int offsetBits_log_msg_update_coordinates_parents_parent(int index1) {
        int offset = 104;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.update_coordinates.parents.parent' as a int[]
     */
    public int[] get_log_msg_update_coordinates_parents_parent() {
        int[] tmp = new int[8];
        for (int index0 = 0; index0 < numElements_log_msg_update_coordinates_parents_parent(0); index0++) {
            tmp[index0] = getElement_log_msg_update_coordinates_parents_parent(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.update_coordinates.parents.parent' from the given int[]
     */
    public void set_log_msg_update_coordinates_parents_parent(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_update_coordinates_parents_parent(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'log_msg.update_coordinates.parents.parent'
     */
    public int getElement_log_msg_update_coordinates_parents_parent(int index1) {
        return (int)getUIntElement(offsetBits_log_msg_update_coordinates_parents_parent(index1), 16);
    }

    /**
     * Set an element of the array 'log_msg.update_coordinates.parents.parent'
     */
    public void setElement_log_msg_update_coordinates_parents_parent(int index1, int value) {
        setUIntElement(offsetBits_log_msg_update_coordinates_parents_parent(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int totalSize_log_msg_update_coordinates_parents_parent() {
        return (128 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int totalSizeBits_log_msg_update_coordinates_parents_parent() {
        return 128;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int elementSize_log_msg_update_coordinates_parents_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int elementSizeBits_log_msg_update_coordinates_parents_parent() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int numDimensions_log_msg_update_coordinates_parents_parent() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.update_coordinates.parents.parent'
     */
    public static int numElements_log_msg_update_coordinates_parents_parent() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.update_coordinates.parents.parent'
     * for the given dimension.
     */
    public static int numElements_log_msg_update_coordinates_parents_parent(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinate.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinate.type' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinate_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinate.type' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinate_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinate.type'
     */
    public static int offset_log_msg_update_coordinate_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinate.type'
     */
    public static int offsetBits_log_msg_update_coordinate_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.update_coordinate.type'
     */
    public short get_log_msg_update_coordinate_type() {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinate_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinate.type'
     */
    public void set_log_msg_update_coordinate_type(short value) {
        setUIntElement(offsetBits_log_msg_update_coordinate_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinate.type'
     */
    public static int size_log_msg_update_coordinate_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinate.type'
     */
    public static int sizeBits_log_msg_update_coordinate_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinate.beacon
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinate.beacon' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinate_beacon() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinate.beacon' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinate_beacon() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinate.beacon'
     */
    public static int offset_log_msg_update_coordinate_beacon() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinate.beacon'
     */
    public static int offsetBits_log_msg_update_coordinate_beacon() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.update_coordinate.beacon'
     */
    public short get_log_msg_update_coordinate_beacon() {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinate_beacon(), 8);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinate.beacon'
     */
    public void set_log_msg_update_coordinate_beacon(short value) {
        setUIntElement(offsetBits_log_msg_update_coordinate_beacon(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinate.beacon'
     */
    public static int size_log_msg_update_coordinate_beacon() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinate.beacon'
     */
    public static int sizeBits_log_msg_update_coordinate_beacon() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinate.hopcount
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinate.hopcount' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinate_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinate.hopcount' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinate_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinate.hopcount'
     */
    public static int offset_log_msg_update_coordinate_hopcount() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinate.hopcount'
     */
    public static int offsetBits_log_msg_update_coordinate_hopcount() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.update_coordinate.hopcount'
     */
    public short get_log_msg_update_coordinate_hopcount() {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinate_hopcount(), 8);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinate.hopcount'
     */
    public void set_log_msg_update_coordinate_hopcount(short value) {
        setUIntElement(offsetBits_log_msg_update_coordinate_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinate.hopcount'
     */
    public static int size_log_msg_update_coordinate_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinate.hopcount'
     */
    public static int sizeBits_log_msg_update_coordinate_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinate.parent
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinate.parent' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinate_parent() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinate.parent' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinate_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinate.parent'
     */
    public static int offset_log_msg_update_coordinate_parent() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinate.parent'
     */
    public static int offsetBits_log_msg_update_coordinate_parent() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.update_coordinate.parent'
     */
    public int get_log_msg_update_coordinate_parent() {
        return (int)getUIntElement(offsetBits_log_msg_update_coordinate_parent(), 16);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinate.parent'
     */
    public void set_log_msg_update_coordinate_parent(int value) {
        setUIntElement(offsetBits_log_msg_update_coordinate_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinate.parent'
     */
    public static int size_log_msg_update_coordinate_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinate.parent'
     */
    public static int sizeBits_log_msg_update_coordinate_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.update_coordinate.combined_quality
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.update_coordinate.combined_quality' is signed (false).
     */
    public static boolean isSigned_log_msg_update_coordinate_combined_quality() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.update_coordinate.combined_quality' is an array (false).
     */
    public static boolean isArray_log_msg_update_coordinate_combined_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.update_coordinate.combined_quality'
     */
    public static int offset_log_msg_update_coordinate_combined_quality() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.update_coordinate.combined_quality'
     */
    public static int offsetBits_log_msg_update_coordinate_combined_quality() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.update_coordinate.combined_quality'
     */
    public short get_log_msg_update_coordinate_combined_quality() {
        return (short)getUIntElement(offsetBits_log_msg_update_coordinate_combined_quality(), 8);
    }

    /**
     * Set the value of the field 'log_msg.update_coordinate.combined_quality'
     */
    public void set_log_msg_update_coordinate_combined_quality(short value) {
        setUIntElement(offsetBits_log_msg_update_coordinate_combined_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.update_coordinate.combined_quality'
     */
    public static int size_log_msg_update_coordinate_combined_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.update_coordinate.combined_quality'
     */
    public static int sizeBits_log_msg_update_coordinate_combined_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.type' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.type' is an array (false).
     */
    public static boolean isArray_log_msg_route_report_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.type'
     */
    public static int offset_log_msg_route_report_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.type'
     */
    public static int offsetBits_log_msg_route_report_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.route_report.type'
     */
    public short get_log_msg_route_report_type() {
        return (short)getUIntElement(offsetBits_log_msg_route_report_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.route_report.type'
     */
    public void set_log_msg_route_report_type(short value) {
        setUIntElement(offsetBits_log_msg_route_report_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.route_report.type'
     */
    public static int size_log_msg_route_report_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.route_report.type'
     */
    public static int sizeBits_log_msg_route_report_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.id
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.id' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.id' is an array (false).
     */
    public static boolean isArray_log_msg_route_report_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.id'
     */
    public static int offset_log_msg_route_report_id() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.id'
     */
    public static int offsetBits_log_msg_route_report_id() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.route_report.id'
     */
    public int get_log_msg_route_report_id() {
        return (int)getUIntElement(offsetBits_log_msg_route_report_id(), 16);
    }

    /**
     * Set the value of the field 'log_msg.route_report.id'
     */
    public void set_log_msg_route_report_id(int value) {
        setUIntElement(offsetBits_log_msg_route_report_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.route_report.id'
     */
    public static int size_log_msg_route_report_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.route_report.id'
     */
    public static int sizeBits_log_msg_route_report_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.origin_addr
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.origin_addr' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_origin_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.origin_addr' is an array (false).
     */
    public static boolean isArray_log_msg_route_report_origin_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.origin_addr'
     */
    public static int offset_log_msg_route_report_origin_addr() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.origin_addr'
     */
    public static int offsetBits_log_msg_route_report_origin_addr() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.route_report.origin_addr'
     */
    public int get_log_msg_route_report_origin_addr() {
        return (int)getUIntElement(offsetBits_log_msg_route_report_origin_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.route_report.origin_addr'
     */
    public void set_log_msg_route_report_origin_addr(int value) {
        setUIntElement(offsetBits_log_msg_route_report_origin_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.route_report.origin_addr'
     */
    public static int size_log_msg_route_report_origin_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.route_report.origin_addr'
     */
    public static int sizeBits_log_msg_route_report_origin_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.dest_addr
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.dest_addr' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_dest_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.dest_addr' is an array (false).
     */
    public static boolean isArray_log_msg_route_report_dest_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.dest_addr'
     */
    public static int offset_log_msg_route_report_dest_addr() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.dest_addr'
     */
    public static int offsetBits_log_msg_route_report_dest_addr() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.route_report.dest_addr'
     */
    public int get_log_msg_route_report_dest_addr() {
        return (int)getUIntElement(offsetBits_log_msg_route_report_dest_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.route_report.dest_addr'
     */
    public void set_log_msg_route_report_dest_addr(int value) {
        setUIntElement(offsetBits_log_msg_route_report_dest_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.route_report.dest_addr'
     */
    public static int size_log_msg_route_report_dest_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.route_report.dest_addr'
     */
    public static int sizeBits_log_msg_route_report_dest_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.hopcount
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.hopcount' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.hopcount' is an array (false).
     */
    public static boolean isArray_log_msg_route_report_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.hopcount'
     */
    public static int offset_log_msg_route_report_hopcount() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.hopcount'
     */
    public static int offsetBits_log_msg_route_report_hopcount() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.route_report.hopcount'
     */
    public short get_log_msg_route_report_hopcount() {
        return (short)getUIntElement(offsetBits_log_msg_route_report_hopcount(), 8);
    }

    /**
     * Set the value of the field 'log_msg.route_report.hopcount'
     */
    public void set_log_msg_route_report_hopcount(short value) {
        setUIntElement(offsetBits_log_msg_route_report_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.route_report.hopcount'
     */
    public static int size_log_msg_route_report_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.route_report.hopcount'
     */
    public static int sizeBits_log_msg_route_report_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.dest_coords.comps
    //   Field type: short[]
    //   Offset (bits): 96
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.dest_coords.comps' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_dest_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.dest_coords.comps' is an array (true).
     */
    public static boolean isArray_log_msg_route_report_dest_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.dest_coords.comps'
     */
    public static int offset_log_msg_route_report_dest_coords_comps(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.dest_coords.comps'
     */
    public static int offsetBits_log_msg_route_report_dest_coords_comps(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.route_report.dest_coords.comps' as a short[]
     */
    public short[] get_log_msg_route_report_dest_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_log_msg_route_report_dest_coords_comps(0); index0++) {
            tmp[index0] = getElement_log_msg_route_report_dest_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.route_report.dest_coords.comps' from the given short[]
     */
    public void set_log_msg_route_report_dest_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_route_report_dest_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.route_report.dest_coords.comps'
     */
    public short getElement_log_msg_route_report_dest_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_route_report_dest_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.route_report.dest_coords.comps'
     */
    public void setElement_log_msg_route_report_dest_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_log_msg_route_report_dest_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int totalSize_log_msg_route_report_dest_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int totalSizeBits_log_msg_route_report_dest_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int elementSize_log_msg_route_report_dest_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int elementSizeBits_log_msg_route_report_dest_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int numDimensions_log_msg_route_report_dest_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.route_report.dest_coords.comps'
     */
    public static int numElements_log_msg_route_report_dest_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.route_report.dest_coords.comps'
     * for the given dimension.
     */
    public static int numElements_log_msg_route_report_dest_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.route_report.dest_coords.comps' with a String
     */
    public void setString_log_msg_route_report_dest_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_route_report_dest_coords_comps(i, (short)s.charAt(i));
         }
         setElement_log_msg_route_report_dest_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.route_report.dest_coords.comps' as a String
     */
    public String getString_log_msg_route_report_dest_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_route_report_dest_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_route_report_dest_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.route_report.my_coords.comps
    //   Field type: short[]
    //   Offset (bits): 160
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.route_report.my_coords.comps' is signed (false).
     */
    public static boolean isSigned_log_msg_route_report_my_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.route_report.my_coords.comps' is an array (true).
     */
    public static boolean isArray_log_msg_route_report_my_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.route_report.my_coords.comps'
     */
    public static int offset_log_msg_route_report_my_coords_comps(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.route_report.my_coords.comps'
     */
    public static int offsetBits_log_msg_route_report_my_coords_comps(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'log_msg.route_report.my_coords.comps' as a short[]
     */
    public short[] get_log_msg_route_report_my_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_log_msg_route_report_my_coords_comps(0); index0++) {
            tmp[index0] = getElement_log_msg_route_report_my_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'log_msg.route_report.my_coords.comps' from the given short[]
     */
    public void set_log_msg_route_report_my_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_log_msg_route_report_my_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'log_msg.route_report.my_coords.comps'
     */
    public short getElement_log_msg_route_report_my_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_log_msg_route_report_my_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'log_msg.route_report.my_coords.comps'
     */
    public void setElement_log_msg_route_report_my_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_log_msg_route_report_my_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'log_msg.route_report.my_coords.comps'
     */
    public static int totalSize_log_msg_route_report_my_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'log_msg.route_report.my_coords.comps'
     */
    public static int totalSizeBits_log_msg_route_report_my_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'log_msg.route_report.my_coords.comps'
     */
    public static int elementSize_log_msg_route_report_my_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'log_msg.route_report.my_coords.comps'
     */
    public static int elementSizeBits_log_msg_route_report_my_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'log_msg.route_report.my_coords.comps'
     */
    public static int numDimensions_log_msg_route_report_my_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'log_msg.route_report.my_coords.comps'
     */
    public static int numElements_log_msg_route_report_my_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'log_msg.route_report.my_coords.comps'
     * for the given dimension.
     */
    public static int numElements_log_msg_route_report_my_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'log_msg.route_report.my_coords.comps' with a String
     */
    public void setString_log_msg_route_report_my_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_log_msg_route_report_my_coords_comps(i, (short)s.charAt(i));
         }
         setElement_log_msg_route_report_my_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'log_msg.route_report.my_coords.comps' as a String
     */
    public String getString_log_msg_route_report_my_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_log_msg_route_report_my_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_log_msg_route_report_my_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.type' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.type' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.type'
     */
    public static int offset_log_msg_logger_stats_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.type'
     */
    public static int offsetBits_log_msg_logger_stats_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.logger_stats.type'
     */
    public short get_log_msg_logger_stats_type() {
        return (short)getUIntElement(offsetBits_log_msg_logger_stats_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.type'
     */
    public void set_log_msg_logger_stats_type(short value) {
        setUIntElement(offsetBits_log_msg_logger_stats_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.type'
     */
    public static int size_log_msg_logger_stats_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.type'
     */
    public static int sizeBits_log_msg_logger_stats_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.free_pos
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.free_pos' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_free_pos() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.free_pos' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_free_pos() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.free_pos'
     */
    public static int offset_log_msg_logger_stats_free_pos() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.free_pos'
     */
    public static int offsetBits_log_msg_logger_stats_free_pos() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.logger_stats.free_pos'
     */
    public short get_log_msg_logger_stats_free_pos() {
        return (short)getUIntElement(offsetBits_log_msg_logger_stats_free_pos(), 8);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.free_pos'
     */
    public void set_log_msg_logger_stats_free_pos(short value) {
        setUIntElement(offsetBits_log_msg_logger_stats_free_pos(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.free_pos'
     */
    public static int size_log_msg_logger_stats_free_pos() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.free_pos'
     */
    public static int sizeBits_log_msg_logger_stats_free_pos() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.max_queue
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.max_queue' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_max_queue() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.max_queue' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_max_queue() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.max_queue'
     */
    public static int offset_log_msg_logger_stats_max_queue() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.max_queue'
     */
    public static int offsetBits_log_msg_logger_stats_max_queue() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.logger_stats.max_queue'
     */
    public short get_log_msg_logger_stats_max_queue() {
        return (short)getUIntElement(offsetBits_log_msg_logger_stats_max_queue(), 8);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.max_queue'
     */
    public void set_log_msg_logger_stats_max_queue(short value) {
        setUIntElement(offsetBits_log_msg_logger_stats_max_queue(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.max_queue'
     */
    public static int size_log_msg_logger_stats_max_queue() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.max_queue'
     */
    public static int sizeBits_log_msg_logger_stats_max_queue() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.stat_received
    //   Field type: long
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.stat_received' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_stat_received() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.stat_received' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_stat_received() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.stat_received'
     */
    public static int offset_log_msg_logger_stats_stat_received() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.stat_received'
     */
    public static int offsetBits_log_msg_logger_stats_stat_received() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'log_msg.logger_stats.stat_received'
     */
    public long get_log_msg_logger_stats_stat_received() {
        return (long)getUIntElement(offsetBits_log_msg_logger_stats_stat_received(), 32);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.stat_received'
     */
    public void set_log_msg_logger_stats_stat_received(long value) {
        setUIntElement(offsetBits_log_msg_logger_stats_stat_received(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.stat_received'
     */
    public static int size_log_msg_logger_stats_stat_received() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.stat_received'
     */
    public static int sizeBits_log_msg_logger_stats_stat_received() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.stat_written
    //   Field type: long
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.stat_written' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_stat_written() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.stat_written' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_stat_written() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.stat_written'
     */
    public static int offset_log_msg_logger_stats_stat_written() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.stat_written'
     */
    public static int offsetBits_log_msg_logger_stats_stat_written() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'log_msg.logger_stats.stat_written'
     */
    public long get_log_msg_logger_stats_stat_written() {
        return (long)getUIntElement(offsetBits_log_msg_logger_stats_stat_written(), 32);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.stat_written'
     */
    public void set_log_msg_logger_stats_stat_written(long value) {
        setUIntElement(offsetBits_log_msg_logger_stats_stat_written(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.stat_written'
     */
    public static int size_log_msg_logger_stats_stat_written() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.stat_written'
     */
    public static int sizeBits_log_msg_logger_stats_stat_written() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.stat_no_buffer
    //   Field type: long
    //   Offset (bits): 120
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.stat_no_buffer' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_stat_no_buffer() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.stat_no_buffer' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_stat_no_buffer() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public static int offset_log_msg_logger_stats_stat_no_buffer() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public static int offsetBits_log_msg_logger_stats_stat_no_buffer() {
        return 120;
    }

    /**
     * Return the value (as a long) of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public long get_log_msg_logger_stats_stat_no_buffer() {
        return (long)getUIntElement(offsetBits_log_msg_logger_stats_stat_no_buffer(), 32);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public void set_log_msg_logger_stats_stat_no_buffer(long value) {
        setUIntElement(offsetBits_log_msg_logger_stats_stat_no_buffer(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public static int size_log_msg_logger_stats_stat_no_buffer() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.stat_no_buffer'
     */
    public static int sizeBits_log_msg_logger_stats_stat_no_buffer() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.stat_send_failed
    //   Field type: long
    //   Offset (bits): 152
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.stat_send_failed' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_stat_send_failed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.stat_send_failed' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_stat_send_failed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public static int offset_log_msg_logger_stats_stat_send_failed() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public static int offsetBits_log_msg_logger_stats_stat_send_failed() {
        return 152;
    }

    /**
     * Return the value (as a long) of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public long get_log_msg_logger_stats_stat_send_failed() {
        return (long)getUIntElement(offsetBits_log_msg_logger_stats_stat_send_failed(), 32);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public void set_log_msg_logger_stats_stat_send_failed(long value) {
        setUIntElement(offsetBits_log_msg_logger_stats_stat_send_failed(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public static int size_log_msg_logger_stats_stat_send_failed() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.stat_send_failed'
     */
    public static int sizeBits_log_msg_logger_stats_stat_send_failed() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.logger_stats.stat_send_done_failed
    //   Field type: long
    //   Offset (bits): 184
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.logger_stats.stat_send_done_failed' is signed (false).
     */
    public static boolean isSigned_log_msg_logger_stats_stat_send_done_failed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.logger_stats.stat_send_done_failed' is an array (false).
     */
    public static boolean isArray_log_msg_logger_stats_stat_send_done_failed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public static int offset_log_msg_logger_stats_stat_send_done_failed() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public static int offsetBits_log_msg_logger_stats_stat_send_done_failed() {
        return 184;
    }

    /**
     * Return the value (as a long) of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public long get_log_msg_logger_stats_stat_send_done_failed() {
        return (long)getUIntElement(offsetBits_log_msg_logger_stats_stat_send_done_failed(), 32);
    }

    /**
     * Set the value of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public void set_log_msg_logger_stats_stat_send_done_failed(long value) {
        setUIntElement(offsetBits_log_msg_logger_stats_stat_send_done_failed(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public static int size_log_msg_logger_stats_stat_send_done_failed() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.logger_stats.stat_send_done_failed'
     */
    public static int sizeBits_log_msg_logger_stats_stat_send_done_failed() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.type' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.type' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.type'
     */
    public static int offset_log_msg_UART_comm_stats_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.type'
     */
    public static int offsetBits_log_msg_UART_comm_stats_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.UART_comm_stats.type'
     */
    public short get_log_msg_UART_comm_stats_type() {
        return (short)getUIntElement(offsetBits_log_msg_UART_comm_stats_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.type'
     */
    public void set_log_msg_UART_comm_stats_type(short value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.type'
     */
    public static int size_log_msg_UART_comm_stats_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.type'
     */
    public static int sizeBits_log_msg_UART_comm_stats_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public static int offset_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public int get_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public void set_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public static int size_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_no_buffer'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_receive_duplicate_no_buffer() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_receive_duplicate_send_failed
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public static int offset_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public int get_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public void set_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public static int size_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_receive_duplicate_send_failed'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_receive_duplicate_send_failed() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_receive_total
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_total' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_receive_total() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_receive_total' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_receive_total() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public static int offset_log_msg_UART_comm_stats_stat_receive_total() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_receive_total() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public int get_log_msg_UART_comm_stats_stat_receive_total() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_total(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public void set_log_msg_UART_comm_stats_stat_receive_total(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_receive_total(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public static int size_log_msg_UART_comm_stats_stat_receive_total() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_receive_total'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_receive_total() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_duplicate_no_buffer
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public int get_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public void set_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_no_buffer'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_duplicate_no_buffer() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_duplicate_send_fail
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public int get_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_fail(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public void set_log_msg_UART_comm_stats_stat_send_duplicate_send_fail(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_fail(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_fail'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_duplicate_send_fail() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public int get_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public void set_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_send_done_fail'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_duplicate_send_done_fail() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_duplicate_success
    //   Field type: int
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_success' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_success' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public int get_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_success(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public void set_log_msg_UART_comm_stats_stat_send_duplicate_success(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_success(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_success'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_duplicate_success() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_duplicate_total
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_total' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_duplicate_total' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public int get_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_total(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public void set_log_msg_UART_comm_stats_stat_send_duplicate_total(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_duplicate_total(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_duplicate_total'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_duplicate_total() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_original_send_done_fail
    //   Field type: int
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public int get_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_send_done_fail(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public void set_log_msg_UART_comm_stats_stat_send_original_send_done_fail(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_send_done_fail(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_original_send_done_fail'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_original_send_done_fail() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_original_send_failed
    //   Field type: int
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_send_failed' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_send_failed' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public int get_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_send_failed(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public void set_log_msg_UART_comm_stats_stat_send_original_send_failed(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_send_failed(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_original_send_failed'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_original_send_failed() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_original_success
    //   Field type: int
    //   Offset (bits): 200
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_success' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_original_success() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_success' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_original_success() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_original_success() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_original_success() {
        return 200;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public int get_log_msg_UART_comm_stats_stat_send_original_success() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_success(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public void set_log_msg_UART_comm_stats_stat_send_original_success(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_success(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_original_success() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_original_success'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_original_success() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.UART_comm_stats.stat_send_original_total
    //   Field type: int
    //   Offset (bits): 216
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_total' is signed (false).
     */
    public static boolean isSigned_log_msg_UART_comm_stats_stat_send_original_total() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.UART_comm_stats.stat_send_original_total' is an array (false).
     */
    public static boolean isArray_log_msg_UART_comm_stats_stat_send_original_total() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public static int offset_log_msg_UART_comm_stats_stat_send_original_total() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public static int offsetBits_log_msg_UART_comm_stats_stat_send_original_total() {
        return 216;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public int get_log_msg_UART_comm_stats_stat_send_original_total() {
        return (int)getUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_total(), 16);
    }

    /**
     * Set the value of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public void set_log_msg_UART_comm_stats_stat_send_original_total(int value) {
        setUIntElement(offsetBits_log_msg_UART_comm_stats_stat_send_original_total(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public static int size_log_msg_UART_comm_stats_stat_send_original_total() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.UART_comm_stats.stat_send_original_total'
     */
    public static int sizeBits_log_msg_UART_comm_stats_stat_send_original_total() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.type' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.type' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.type'
     */
    public static int offset_log_msg_lrx_pkt_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.type'
     */
    public static int offsetBits_log_msg_lrx_pkt_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.type'
     */
    public short get_log_msg_lrx_pkt_type() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.type'
     */
    public void set_log_msg_lrx_pkt_type(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.type'
     */
    public static int size_log_msg_lrx_pkt_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.type'
     */
    public static int sizeBits_log_msg_lrx_pkt_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.sender
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_sender() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.sender'
     */
    public static int offset_log_msg_lrx_pkt_sender() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.sender'
     */
    public static int offsetBits_log_msg_lrx_pkt_sender() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_pkt.sender'
     */
    public int get_log_msg_lrx_pkt_sender() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_pkt_sender(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.sender'
     */
    public void set_log_msg_lrx_pkt_sender(int value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.sender'
     */
    public static int size_log_msg_lrx_pkt_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.sender'
     */
    public static int sizeBits_log_msg_lrx_pkt_sender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.sender_session_id
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender_session_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_sender_session_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender_session_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_sender_session_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public static int offset_log_msg_lrx_pkt_sender_session_id() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public static int offsetBits_log_msg_lrx_pkt_sender_session_id() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public int get_log_msg_lrx_pkt_sender_session_id() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_pkt_sender_session_id(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public void set_log_msg_lrx_pkt_sender_session_id(int value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_sender_session_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public static int size_log_msg_lrx_pkt_sender_session_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.sender_session_id'
     */
    public static int sizeBits_log_msg_lrx_pkt_sender_session_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.sender_msg_id
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender_msg_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_sender_msg_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.sender_msg_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_sender_msg_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public static int offset_log_msg_lrx_pkt_sender_msg_id() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public static int offsetBits_log_msg_lrx_pkt_sender_msg_id() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public short get_log_msg_lrx_pkt_sender_msg_id() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_sender_msg_id(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public void set_log_msg_lrx_pkt_sender_msg_id(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_sender_msg_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public static int size_log_msg_lrx_pkt_sender_msg_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.sender_msg_id'
     */
    public static int sizeBits_log_msg_lrx_pkt_sender_msg_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.receiver
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_receiver() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_receiver() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.receiver'
     */
    public static int offset_log_msg_lrx_pkt_receiver() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.receiver'
     */
    public static int offsetBits_log_msg_lrx_pkt_receiver() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_pkt.receiver'
     */
    public int get_log_msg_lrx_pkt_receiver() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_pkt_receiver(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.receiver'
     */
    public void set_log_msg_lrx_pkt_receiver(int value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_receiver(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.receiver'
     */
    public static int size_log_msg_lrx_pkt_receiver() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.receiver'
     */
    public static int sizeBits_log_msg_lrx_pkt_receiver() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.receiver_session_id
    //   Field type: int
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver_session_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_receiver_session_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver_session_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_receiver_session_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public static int offset_log_msg_lrx_pkt_receiver_session_id() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public static int offsetBits_log_msg_lrx_pkt_receiver_session_id() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public int get_log_msg_lrx_pkt_receiver_session_id() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_pkt_receiver_session_id(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public void set_log_msg_lrx_pkt_receiver_session_id(int value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_receiver_session_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public static int size_log_msg_lrx_pkt_receiver_session_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.receiver_session_id'
     */
    public static int sizeBits_log_msg_lrx_pkt_receiver_session_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.receiver_msg_id
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver_msg_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_receiver_msg_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.receiver_msg_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_receiver_msg_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public static int offset_log_msg_lrx_pkt_receiver_msg_id() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public static int offsetBits_log_msg_lrx_pkt_receiver_msg_id() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public short get_log_msg_lrx_pkt_receiver_msg_id() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_receiver_msg_id(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public void set_log_msg_lrx_pkt_receiver_msg_id(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_receiver_msg_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public static int size_log_msg_lrx_pkt_receiver_msg_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.receiver_msg_id'
     */
    public static int sizeBits_log_msg_lrx_pkt_receiver_msg_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.ctrl
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.ctrl' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_ctrl() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.ctrl' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_ctrl() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.ctrl'
     */
    public static int offset_log_msg_lrx_pkt_ctrl() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.ctrl'
     */
    public static int offsetBits_log_msg_lrx_pkt_ctrl() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.ctrl'
     */
    public short get_log_msg_lrx_pkt_ctrl() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_ctrl(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.ctrl'
     */
    public void set_log_msg_lrx_pkt_ctrl(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_ctrl(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.ctrl'
     */
    public static int size_log_msg_lrx_pkt_ctrl() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.ctrl'
     */
    public static int sizeBits_log_msg_lrx_pkt_ctrl() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.blockNum
    //   Field type: short
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.blockNum' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_blockNum() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.blockNum' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_blockNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.blockNum'
     */
    public static int offset_log_msg_lrx_pkt_blockNum() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.blockNum'
     */
    public static int offsetBits_log_msg_lrx_pkt_blockNum() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.blockNum'
     */
    public short get_log_msg_lrx_pkt_blockNum() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_blockNum(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.blockNum'
     */
    public void set_log_msg_lrx_pkt_blockNum(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_blockNum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.blockNum'
     */
    public static int size_log_msg_lrx_pkt_blockNum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.blockNum'
     */
    public static int sizeBits_log_msg_lrx_pkt_blockNum() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.subCtrl
    //   Field type: short
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.subCtrl' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_subCtrl() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.subCtrl' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_subCtrl() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public static int offset_log_msg_lrx_pkt_subCtrl() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public static int offsetBits_log_msg_lrx_pkt_subCtrl() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public short get_log_msg_lrx_pkt_subCtrl() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_subCtrl(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public void set_log_msg_lrx_pkt_subCtrl(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_subCtrl(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public static int size_log_msg_lrx_pkt_subCtrl() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.subCtrl'
     */
    public static int sizeBits_log_msg_lrx_pkt_subCtrl() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_pkt.state
    //   Field type: short
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_pkt.state' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_pkt_state() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_pkt.state' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_pkt_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_pkt.state'
     */
    public static int offset_log_msg_lrx_pkt_state() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_pkt.state'
     */
    public static int offsetBits_log_msg_lrx_pkt_state() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_pkt.state'
     */
    public short get_log_msg_lrx_pkt_state() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_pkt_state(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_pkt.state'
     */
    public void set_log_msg_lrx_pkt_state(short value) {
        setUIntElement(offsetBits_log_msg_lrx_pkt_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_pkt.state'
     */
    public static int size_log_msg_lrx_pkt_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_pkt.state'
     */
    public static int sizeBits_log_msg_lrx_pkt_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.type' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.type' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.type'
     */
    public static int offset_log_msg_lrx_xfer_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.type'
     */
    public static int offsetBits_log_msg_lrx_xfer_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_xfer.type'
     */
    public short get_log_msg_lrx_xfer_type() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_xfer_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.type'
     */
    public void set_log_msg_lrx_xfer_type(short value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.type'
     */
    public static int size_log_msg_lrx_xfer_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.type'
     */
    public static int sizeBits_log_msg_lrx_xfer_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.sender
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.sender' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_sender() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.sender' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.sender'
     */
    public static int offset_log_msg_lrx_xfer_sender() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.sender'
     */
    public static int offsetBits_log_msg_lrx_xfer_sender() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_xfer.sender'
     */
    public int get_log_msg_lrx_xfer_sender() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_xfer_sender(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.sender'
     */
    public void set_log_msg_lrx_xfer_sender(int value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.sender'
     */
    public static int size_log_msg_lrx_xfer_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.sender'
     */
    public static int sizeBits_log_msg_lrx_xfer_sender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.receiver
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.receiver' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_receiver() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.receiver' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_receiver() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.receiver'
     */
    public static int offset_log_msg_lrx_xfer_receiver() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.receiver'
     */
    public static int offsetBits_log_msg_lrx_xfer_receiver() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_xfer.receiver'
     */
    public int get_log_msg_lrx_xfer_receiver() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_xfer_receiver(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.receiver'
     */
    public void set_log_msg_lrx_xfer_receiver(int value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_receiver(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.receiver'
     */
    public static int size_log_msg_lrx_xfer_receiver() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.receiver'
     */
    public static int sizeBits_log_msg_lrx_xfer_receiver() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.session_id
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.session_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_session_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.session_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_session_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.session_id'
     */
    public static int offset_log_msg_lrx_xfer_session_id() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.session_id'
     */
    public static int offsetBits_log_msg_lrx_xfer_session_id() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.lrx_xfer.session_id'
     */
    public int get_log_msg_lrx_xfer_session_id() {
        return (int)getUIntElement(offsetBits_log_msg_lrx_xfer_session_id(), 16);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.session_id'
     */
    public void set_log_msg_lrx_xfer_session_id(int value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_session_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.session_id'
     */
    public static int size_log_msg_lrx_xfer_session_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.session_id'
     */
    public static int sizeBits_log_msg_lrx_xfer_session_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.msg_id
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.msg_id' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_msg_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.msg_id' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_msg_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.msg_id'
     */
    public static int offset_log_msg_lrx_xfer_msg_id() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.msg_id'
     */
    public static int offsetBits_log_msg_lrx_xfer_msg_id() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_xfer.msg_id'
     */
    public short get_log_msg_lrx_xfer_msg_id() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_xfer_msg_id(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.msg_id'
     */
    public void set_log_msg_lrx_xfer_msg_id(short value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_msg_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.msg_id'
     */
    public static int size_log_msg_lrx_xfer_msg_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.msg_id'
     */
    public static int sizeBits_log_msg_lrx_xfer_msg_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.numofBlock
    //   Field type: short
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.numofBlock' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_numofBlock() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.numofBlock' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_numofBlock() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public static int offset_log_msg_lrx_xfer_numofBlock() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public static int offsetBits_log_msg_lrx_xfer_numofBlock() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public short get_log_msg_lrx_xfer_numofBlock() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_xfer_numofBlock(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public void set_log_msg_lrx_xfer_numofBlock(short value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_numofBlock(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public static int size_log_msg_lrx_xfer_numofBlock() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.numofBlock'
     */
    public static int sizeBits_log_msg_lrx_xfer_numofBlock() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.success
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.success' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_success() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.success' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_success() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.success'
     */
    public static int offset_log_msg_lrx_xfer_success() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.success'
     */
    public static int offsetBits_log_msg_lrx_xfer_success() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_xfer.success'
     */
    public short get_log_msg_lrx_xfer_success() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_xfer_success(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.success'
     */
    public void set_log_msg_lrx_xfer_success(short value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_success(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.success'
     */
    public static int size_log_msg_lrx_xfer_success() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.success'
     */
    public static int sizeBits_log_msg_lrx_xfer_success() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.lrx_xfer.state
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.lrx_xfer.state' is signed (false).
     */
    public static boolean isSigned_log_msg_lrx_xfer_state() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.lrx_xfer.state' is an array (false).
     */
    public static boolean isArray_log_msg_lrx_xfer_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.lrx_xfer.state'
     */
    public static int offset_log_msg_lrx_xfer_state() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.lrx_xfer.state'
     */
    public static int offsetBits_log_msg_lrx_xfer_state() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.lrx_xfer.state'
     */
    public short get_log_msg_lrx_xfer_state() {
        return (short)getUIntElement(offsetBits_log_msg_lrx_xfer_state(), 8);
    }

    /**
     * Set the value of the field 'log_msg.lrx_xfer.state'
     */
    public void set_log_msg_lrx_xfer_state(short value) {
        setUIntElement(offsetBits_log_msg_lrx_xfer_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.lrx_xfer.state'
     */
    public static int size_log_msg_lrx_xfer_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.lrx_xfer.state'
     */
    public static int sizeBits_log_msg_lrx_xfer_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.debug.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.debug.type' is signed (false).
     */
    public static boolean isSigned_log_msg_debug_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.debug.type' is an array (false).
     */
    public static boolean isArray_log_msg_debug_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.debug.type'
     */
    public static int offset_log_msg_debug_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.debug.type'
     */
    public static int offsetBits_log_msg_debug_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.debug.type'
     */
    public short get_log_msg_debug_type() {
        return (short)getUIntElement(offsetBits_log_msg_debug_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.debug.type'
     */
    public void set_log_msg_debug_type(short value) {
        setUIntElement(offsetBits_log_msg_debug_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.debug.type'
     */
    public static int size_log_msg_debug_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.debug.type'
     */
    public static int sizeBits_log_msg_debug_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.debug.arg1
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.debug.arg1' is signed (false).
     */
    public static boolean isSigned_log_msg_debug_arg1() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.debug.arg1' is an array (false).
     */
    public static boolean isArray_log_msg_debug_arg1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.debug.arg1'
     */
    public static int offset_log_msg_debug_arg1() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.debug.arg1'
     */
    public static int offsetBits_log_msg_debug_arg1() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.debug.arg1'
     */
    public int get_log_msg_debug_arg1() {
        return (int)getUIntElement(offsetBits_log_msg_debug_arg1(), 16);
    }

    /**
     * Set the value of the field 'log_msg.debug.arg1'
     */
    public void set_log_msg_debug_arg1(int value) {
        setUIntElement(offsetBits_log_msg_debug_arg1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.debug.arg1'
     */
    public static int size_log_msg_debug_arg1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.debug.arg1'
     */
    public static int sizeBits_log_msg_debug_arg1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.debug.arg2
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.debug.arg2' is signed (false).
     */
    public static boolean isSigned_log_msg_debug_arg2() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.debug.arg2' is an array (false).
     */
    public static boolean isArray_log_msg_debug_arg2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.debug.arg2'
     */
    public static int offset_log_msg_debug_arg2() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.debug.arg2'
     */
    public static int offsetBits_log_msg_debug_arg2() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.debug.arg2'
     */
    public int get_log_msg_debug_arg2() {
        return (int)getUIntElement(offsetBits_log_msg_debug_arg2(), 16);
    }

    /**
     * Set the value of the field 'log_msg.debug.arg2'
     */
    public void set_log_msg_debug_arg2(int value) {
        setUIntElement(offsetBits_log_msg_debug_arg2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.debug.arg2'
     */
    public static int size_log_msg_debug_arg2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.debug.arg2'
     */
    public static int sizeBits_log_msg_debug_arg2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.debug.arg3
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.debug.arg3' is signed (false).
     */
    public static boolean isSigned_log_msg_debug_arg3() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.debug.arg3' is an array (false).
     */
    public static boolean isArray_log_msg_debug_arg3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.debug.arg3'
     */
    public static int offset_log_msg_debug_arg3() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.debug.arg3'
     */
    public static int offsetBits_log_msg_debug_arg3() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.debug.arg3'
     */
    public int get_log_msg_debug_arg3() {
        return (int)getUIntElement(offsetBits_log_msg_debug_arg3(), 16);
    }

    /**
     * Set the value of the field 'log_msg.debug.arg3'
     */
    public void set_log_msg_debug_arg3(int value) {
        setUIntElement(offsetBits_log_msg_debug_arg3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.debug.arg3'
     */
    public static int size_log_msg_debug_arg3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.debug.arg3'
     */
    public static int sizeBits_log_msg_debug_arg3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.type
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.type' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_type() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.type' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.type'
     */
    public static int offset_log_msg_retransmit_report_type() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.type'
     */
    public static int offsetBits_log_msg_retransmit_report_type() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.retransmit_report.type'
     */
    public short get_log_msg_retransmit_report_type() {
        return (short)getUIntElement(offsetBits_log_msg_retransmit_report_type(), 8);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.type'
     */
    public void set_log_msg_retransmit_report_type(short value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.type'
     */
    public static int size_log_msg_retransmit_report_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.type'
     */
    public static int sizeBits_log_msg_retransmit_report_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.id
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.id' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_id() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.id' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.id'
     */
    public static int offset_log_msg_retransmit_report_id() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.id'
     */
    public static int offsetBits_log_msg_retransmit_report_id() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.retransmit_report.id'
     */
    public int get_log_msg_retransmit_report_id() {
        return (int)getUIntElement(offsetBits_log_msg_retransmit_report_id(), 16);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.id'
     */
    public void set_log_msg_retransmit_report_id(int value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.id'
     */
    public static int size_log_msg_retransmit_report_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.id'
     */
    public static int sizeBits_log_msg_retransmit_report_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.origin_addr
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.origin_addr' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_origin_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.origin_addr' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_origin_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.origin_addr'
     */
    public static int offset_log_msg_retransmit_report_origin_addr() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.origin_addr'
     */
    public static int offsetBits_log_msg_retransmit_report_origin_addr() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.retransmit_report.origin_addr'
     */
    public int get_log_msg_retransmit_report_origin_addr() {
        return (int)getUIntElement(offsetBits_log_msg_retransmit_report_origin_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.origin_addr'
     */
    public void set_log_msg_retransmit_report_origin_addr(int value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_origin_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.origin_addr'
     */
    public static int size_log_msg_retransmit_report_origin_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.origin_addr'
     */
    public static int sizeBits_log_msg_retransmit_report_origin_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.dest_addr
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.dest_addr' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_dest_addr() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.dest_addr' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_dest_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.dest_addr'
     */
    public static int offset_log_msg_retransmit_report_dest_addr() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.dest_addr'
     */
    public static int offsetBits_log_msg_retransmit_report_dest_addr() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.retransmit_report.dest_addr'
     */
    public int get_log_msg_retransmit_report_dest_addr() {
        return (int)getUIntElement(offsetBits_log_msg_retransmit_report_dest_addr(), 16);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.dest_addr'
     */
    public void set_log_msg_retransmit_report_dest_addr(int value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_dest_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.dest_addr'
     */
    public static int size_log_msg_retransmit_report_dest_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.dest_addr'
     */
    public static int sizeBits_log_msg_retransmit_report_dest_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.hopcount
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.hopcount' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.hopcount' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.hopcount'
     */
    public static int offset_log_msg_retransmit_report_hopcount() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.hopcount'
     */
    public static int offsetBits_log_msg_retransmit_report_hopcount() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.retransmit_report.hopcount'
     */
    public short get_log_msg_retransmit_report_hopcount() {
        return (short)getUIntElement(offsetBits_log_msg_retransmit_report_hopcount(), 8);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.hopcount'
     */
    public void set_log_msg_retransmit_report_hopcount(short value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.hopcount'
     */
    public static int size_log_msg_retransmit_report_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.hopcount'
     */
    public static int sizeBits_log_msg_retransmit_report_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.next_hop
    //   Field type: int
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.next_hop' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_next_hop() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.next_hop' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_next_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.next_hop'
     */
    public static int offset_log_msg_retransmit_report_next_hop() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.next_hop'
     */
    public static int offsetBits_log_msg_retransmit_report_next_hop() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'log_msg.retransmit_report.next_hop'
     */
    public int get_log_msg_retransmit_report_next_hop() {
        return (int)getUIntElement(offsetBits_log_msg_retransmit_report_next_hop(), 16);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.next_hop'
     */
    public void set_log_msg_retransmit_report_next_hop(int value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_next_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.next_hop'
     */
    public static int size_log_msg_retransmit_report_next_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.next_hop'
     */
    public static int sizeBits_log_msg_retransmit_report_next_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: log_msg.retransmit_report.retransmit_count
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'log_msg.retransmit_report.retransmit_count' is signed (false).
     */
    public static boolean isSigned_log_msg_retransmit_report_retransmit_count() {
        return false;
    }

    /**
     * Return whether the field 'log_msg.retransmit_report.retransmit_count' is an array (false).
     */
    public static boolean isArray_log_msg_retransmit_report_retransmit_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public static int offset_log_msg_retransmit_report_retransmit_count() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public static int offsetBits_log_msg_retransmit_report_retransmit_count() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public short get_log_msg_retransmit_report_retransmit_count() {
        return (short)getUIntElement(offsetBits_log_msg_retransmit_report_retransmit_count(), 8);
    }

    /**
     * Set the value of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public void set_log_msg_retransmit_report_retransmit_count(short value) {
        setUIntElement(offsetBits_log_msg_retransmit_report_retransmit_count(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public static int size_log_msg_retransmit_report_retransmit_count() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'log_msg.retransmit_report.retransmit_count'
     */
    public static int sizeBits_log_msg_retransmit_report_retransmit_count() {
        return 8;
    }

}
