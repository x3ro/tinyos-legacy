/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BVRCommandMessage'
 * message type.
 */

package net.tinyos.bvr.messages;

public class BVRCommandMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 57;

    /** Create a new BVRCommandMessage of size 28. */
    public BVRCommandMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BVRCommandMessage of the given data_length. */
    public BVRCommandMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage with the given data_length
     * and base offset.
     */
    public BVRCommandMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage using the given byte array
     * as backing store.
     */
    public BVRCommandMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public BVRCommandMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BVRCommandMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage embedded in the given message
     * at the given base offset.
     */
    public BVRCommandMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BVRCommandMessage embedded in the given message
     * at the given base offset and length.
     */
    public BVRCommandMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BVRCommandMessage> \n";
      try {
        s += "  [header.last_hop=0x"+Long.toHexString(get_header_last_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.seqno=0x"+Long.toHexString(get_header_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.hopcount=0x"+Long.toHexString(get_type_data_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.origin=0x"+Long.toHexString(get_type_data_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.type=0x"+Long.toHexString(get_type_data_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.seqno=0x"+Long.toHexString(get_type_data_data_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.flags=0x"+Long.toHexString(get_type_data_data_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.byte_arg=0x"+Long.toHexString(get_type_data_data_args_byte_arg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.short_arg=0x"+Long.toHexString(get_type_data_data_args_short_arg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.info.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_info_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.info.neighbors=0x"+Long.toHexString(get_type_data_data_args_info_neighbors())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.info.links=0x"+Long.toHexString(get_type_data_data_args_info_links())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.info.is_root_beacon=0x"+Long.toHexString(get_type_data_data_args_info_is_root_beacon())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.info.power=0x"+Long.toHexString(get_type_data_data_args_info_power())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.dest.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_dest_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.dest.addr=0x"+Long.toHexString(get_type_data_data_args_dest_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.dest.mode=0x"+Long.toHexString(get_type_data_data_args_dest_mode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.ident.install_id=0x"+Long.toHexString(get_type_data_data_args_ident_install_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.ident.compile_time=0x"+Long.toHexString(get_type_data_data_args_ident_compile_time())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.valid=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.first_hop=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_first_hop())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.last_seqno=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.addr=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.coords.comps=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_neighbor_info_coords_comps(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.quality=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.age=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.neighbor_info.pos=0x"+Long.toHexString(get_type_data_data_args_neighbor_info_pos())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.root_info.valid=0x"+Long.toHexString(get_type_data_data_args_root_info_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.root_info.parent=0x"+Long.toHexString(get_type_data_data_args_root_info_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.root_info.last_seqno=0x"+Long.toHexString(get_type_data_data_args_root_info_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.root_info.hops=0x"+Long.toHexString(get_type_data_data_args_root_info_hops())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.root_info.combined_quality=0x"+Long.toHexString(get_type_data_data_args_root_info_combined_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.state=0x"+Long.toHexString(get_type_data_data_args_link_info_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.addr=0x"+Long.toHexString(get_type_data_data_args_link_info_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.reverse_quality=0x"+Long.toHexString(get_type_data_data_args_link_info_reverse_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.reverse_expiration=0x"+Long.toHexString(get_type_data_data_args_link_info_reverse_expiration())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.quality=0x"+Long.toHexString(get_type_data_data_args_link_info_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.strength=0x"+Long.toHexString(get_type_data_data_args_link_info_strength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.last_seqno=0x"+Long.toHexString(get_type_data_data_args_link_info_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.missed=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_link_info_missed(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.received=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_type_data_data_args_link_info_received(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.age=0x"+Long.toHexString(get_type_data_data_args_link_info_age())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type_data.data.args.link_info.chances=0x"+Long.toHexString(get_type_data_data_args_link_info_chances())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.last_hop
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.last_hop' is signed (false).
     */
    public static boolean isSigned_header_last_hop() {
        return false;
    }

    /**
     * Return whether the field 'header.last_hop' is an array (false).
     */
    public static boolean isArray_header_last_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.last_hop'
     */
    public static int offset_header_last_hop() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.last_hop'
     */
    public static int offsetBits_header_last_hop() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.last_hop'
     */
    public int get_header_last_hop() {
        return (int)getUIntElement(offsetBits_header_last_hop(), 16);
    }

    /**
     * Set the value of the field 'header.last_hop'
     */
    public void set_header_last_hop(int value) {
        setUIntElement(offsetBits_header_last_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.last_hop'
     */
    public static int size_header_last_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.last_hop'
     */
    public static int sizeBits_header_last_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqno
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqno' is signed (false).
     */
    public static boolean isSigned_header_seqno() {
        return false;
    }

    /**
     * Return whether the field 'header.seqno' is an array (false).
     */
    public static boolean isArray_header_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqno'
     */
    public static int offset_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqno'
     */
    public static int offsetBits_header_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.seqno'
     */
    public int get_header_seqno() {
        return (int)getUIntElement(offsetBits_header_seqno(), 16);
    }

    /**
     * Set the value of the field 'header.seqno'
     */
    public void set_header_seqno(int value) {
        setUIntElement(offsetBits_header_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqno'
     */
    public static int size_header_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqno'
     */
    public static int sizeBits_header_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.hopcount
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.hopcount' is signed (false).
     */
    public static boolean isSigned_type_data_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'type_data.hopcount' is an array (false).
     */
    public static boolean isArray_type_data_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.hopcount'
     */
    public static int offset_type_data_hopcount() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.hopcount'
     */
    public static int offsetBits_type_data_hopcount() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'type_data.hopcount'
     */
    public short get_type_data_hopcount() {
        return (short)getUIntElement(offsetBits_type_data_hopcount(), 8);
    }

    /**
     * Set the value of the field 'type_data.hopcount'
     */
    public void set_type_data_hopcount(short value) {
        setUIntElement(offsetBits_type_data_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.hopcount'
     */
    public static int size_type_data_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.hopcount'
     */
    public static int sizeBits_type_data_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.origin
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.origin' is signed (false).
     */
    public static boolean isSigned_type_data_origin() {
        return false;
    }

    /**
     * Return whether the field 'type_data.origin' is an array (false).
     */
    public static boolean isArray_type_data_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.origin'
     */
    public static int offset_type_data_origin() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.origin'
     */
    public static int offsetBits_type_data_origin() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'type_data.origin'
     */
    public int get_type_data_origin() {
        return (int)getUIntElement(offsetBits_type_data_origin(), 16);
    }

    /**
     * Set the value of the field 'type_data.origin'
     */
    public void set_type_data_origin(int value) {
        setUIntElement(offsetBits_type_data_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.origin'
     */
    public static int size_type_data_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.origin'
     */
    public static int sizeBits_type_data_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.type
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.type' is signed (false).
     */
    public static boolean isSigned_type_data_type() {
        return false;
    }

    /**
     * Return whether the field 'type_data.type' is an array (false).
     */
    public static boolean isArray_type_data_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.type'
     */
    public static int offset_type_data_type() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.type'
     */
    public static int offsetBits_type_data_type() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'type_data.type'
     */
    public short get_type_data_type() {
        return (short)getUIntElement(offsetBits_type_data_type(), 8);
    }

    /**
     * Set the value of the field 'type_data.type'
     */
    public void set_type_data_type(short value) {
        setUIntElement(offsetBits_type_data_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.type'
     */
    public static int size_type_data_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.type'
     */
    public static int sizeBits_type_data_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.seqno
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.seqno' is signed (false).
     */
    public static boolean isSigned_type_data_data_seqno() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.seqno' is an array (false).
     */
    public static boolean isArray_type_data_data_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.seqno'
     */
    public static int offset_type_data_data_seqno() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.seqno'
     */
    public static int offsetBits_type_data_data_seqno() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.seqno'
     */
    public short get_type_data_data_seqno() {
        return (short)getUIntElement(offsetBits_type_data_data_seqno(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.seqno'
     */
    public void set_type_data_data_seqno(short value) {
        setUIntElement(offsetBits_type_data_data_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.seqno'
     */
    public static int size_type_data_data_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.seqno'
     */
    public static int sizeBits_type_data_data_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.flags
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.flags' is signed (false).
     */
    public static boolean isSigned_type_data_data_flags() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.flags' is an array (false).
     */
    public static boolean isArray_type_data_data_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.flags'
     */
    public static int offset_type_data_data_flags() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.flags'
     */
    public static int offsetBits_type_data_data_flags() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.flags'
     */
    public short get_type_data_data_flags() {
        return (short)getUIntElement(offsetBits_type_data_data_flags(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.flags'
     */
    public void set_type_data_data_flags(short value) {
        setUIntElement(offsetBits_type_data_data_flags(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.flags'
     */
    public static int size_type_data_data_flags() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.flags'
     */
    public static int sizeBits_type_data_data_flags() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.byte_arg
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.byte_arg' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_byte_arg() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.byte_arg' is an array (false).
     */
    public static boolean isArray_type_data_data_args_byte_arg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.byte_arg'
     */
    public static int offset_type_data_data_args_byte_arg() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.byte_arg'
     */
    public static int offsetBits_type_data_data_args_byte_arg() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.byte_arg'
     */
    public short get_type_data_data_args_byte_arg() {
        return (short)getUIntElement(offsetBits_type_data_data_args_byte_arg(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.byte_arg'
     */
    public void set_type_data_data_args_byte_arg(short value) {
        setUIntElement(offsetBits_type_data_data_args_byte_arg(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.byte_arg'
     */
    public static int size_type_data_data_args_byte_arg() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.byte_arg'
     */
    public static int sizeBits_type_data_data_args_byte_arg() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.short_arg
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.short_arg' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_short_arg() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.short_arg' is an array (false).
     */
    public static boolean isArray_type_data_data_args_short_arg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.short_arg'
     */
    public static int offset_type_data_data_args_short_arg() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.short_arg'
     */
    public static int offsetBits_type_data_data_args_short_arg() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.short_arg'
     */
    public int get_type_data_data_args_short_arg() {
        return (int)getUIntElement(offsetBits_type_data_data_args_short_arg(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.short_arg'
     */
    public void set_type_data_data_args_short_arg(int value) {
        setUIntElement(offsetBits_type_data_data_args_short_arg(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.short_arg'
     */
    public static int size_type_data_data_args_short_arg() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.short_arg'
     */
    public static int sizeBits_type_data_data_args_short_arg() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.coords.comps
    //   Field type: short[]
    //   Offset (bits): 80
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.coords.comps' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.coords.comps' is an array (true).
     */
    public static boolean isArray_type_data_data_args_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.coords.comps'
     */
    public static int offset_type_data_data_args_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.coords.comps'
     */
    public static int offsetBits_type_data_data_args_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.coords.comps' as a short[]
     */
    public short[] get_type_data_data_args_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_type_data_data_args_coords_comps(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.coords.comps' from the given short[]
     */
    public void set_type_data_data_args_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.coords.comps'
     */
    public short getElement_type_data_data_args_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.coords.comps'
     */
    public void setElement_type_data_data_args_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.coords.comps'
     */
    public static int totalSize_type_data_data_args_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.coords.comps'
     */
    public static int totalSizeBits_type_data_data_args_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.coords.comps'
     */
    public static int elementSize_type_data_data_args_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.coords.comps'
     */
    public static int elementSizeBits_type_data_data_args_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.coords.comps'
     */
    public static int numDimensions_type_data_data_args_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.coords.comps'
     */
    public static int numElements_type_data_data_args_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.coords.comps'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.coords.comps' with a String
     */
    public void setString_type_data_data_args_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_coords_comps(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.coords.comps' as a String
     */
    public String getString_type_data_data_args_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.info.coords.comps
    //   Field type: short[]
    //   Offset (bits): 80
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.info.coords.comps' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_info_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.info.coords.comps' is an array (true).
     */
    public static boolean isArray_type_data_data_args_info_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.info.coords.comps'
     */
    public static int offset_type_data_data_args_info_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.info.coords.comps'
     */
    public static int offsetBits_type_data_data_args_info_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.info.coords.comps' as a short[]
     */
    public short[] get_type_data_data_args_info_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_type_data_data_args_info_coords_comps(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_info_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.info.coords.comps' from the given short[]
     */
    public void set_type_data_data_args_info_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_info_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.info.coords.comps'
     */
    public short getElement_type_data_data_args_info_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_info_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.info.coords.comps'
     */
    public void setElement_type_data_data_args_info_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_info_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.info.coords.comps'
     */
    public static int totalSize_type_data_data_args_info_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.info.coords.comps'
     */
    public static int totalSizeBits_type_data_data_args_info_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.info.coords.comps'
     */
    public static int elementSize_type_data_data_args_info_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.info.coords.comps'
     */
    public static int elementSizeBits_type_data_data_args_info_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.info.coords.comps'
     */
    public static int numDimensions_type_data_data_args_info_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.info.coords.comps'
     */
    public static int numElements_type_data_data_args_info_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.info.coords.comps'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_info_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.info.coords.comps' with a String
     */
    public void setString_type_data_data_args_info_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_info_coords_comps(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_info_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.info.coords.comps' as a String
     */
    public String getString_type_data_data_args_info_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_info_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_info_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.info.neighbors
    //   Field type: short
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.info.neighbors' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_info_neighbors() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.info.neighbors' is an array (false).
     */
    public static boolean isArray_type_data_data_args_info_neighbors() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.info.neighbors'
     */
    public static int offset_type_data_data_args_info_neighbors() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.info.neighbors'
     */
    public static int offsetBits_type_data_data_args_info_neighbors() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.info.neighbors'
     */
    public short get_type_data_data_args_info_neighbors() {
        return (short)getUIntElement(offsetBits_type_data_data_args_info_neighbors(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.info.neighbors'
     */
    public void set_type_data_data_args_info_neighbors(short value) {
        setUIntElement(offsetBits_type_data_data_args_info_neighbors(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.info.neighbors'
     */
    public static int size_type_data_data_args_info_neighbors() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.info.neighbors'
     */
    public static int sizeBits_type_data_data_args_info_neighbors() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.info.links
    //   Field type: short
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.info.links' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_info_links() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.info.links' is an array (false).
     */
    public static boolean isArray_type_data_data_args_info_links() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.info.links'
     */
    public static int offset_type_data_data_args_info_links() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.info.links'
     */
    public static int offsetBits_type_data_data_args_info_links() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.info.links'
     */
    public short get_type_data_data_args_info_links() {
        return (short)getUIntElement(offsetBits_type_data_data_args_info_links(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.info.links'
     */
    public void set_type_data_data_args_info_links(short value) {
        setUIntElement(offsetBits_type_data_data_args_info_links(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.info.links'
     */
    public static int size_type_data_data_args_info_links() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.info.links'
     */
    public static int sizeBits_type_data_data_args_info_links() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.info.is_root_beacon
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.info.is_root_beacon' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_info_is_root_beacon() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.info.is_root_beacon' is an array (false).
     */
    public static boolean isArray_type_data_data_args_info_is_root_beacon() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.info.is_root_beacon'
     */
    public static int offset_type_data_data_args_info_is_root_beacon() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.info.is_root_beacon'
     */
    public static int offsetBits_type_data_data_args_info_is_root_beacon() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.info.is_root_beacon'
     */
    public short get_type_data_data_args_info_is_root_beacon() {
        return (short)getUIntElement(offsetBits_type_data_data_args_info_is_root_beacon(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.info.is_root_beacon'
     */
    public void set_type_data_data_args_info_is_root_beacon(short value) {
        setUIntElement(offsetBits_type_data_data_args_info_is_root_beacon(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.info.is_root_beacon'
     */
    public static int size_type_data_data_args_info_is_root_beacon() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.info.is_root_beacon'
     */
    public static int sizeBits_type_data_data_args_info_is_root_beacon() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.info.power
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.info.power' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_info_power() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.info.power' is an array (false).
     */
    public static boolean isArray_type_data_data_args_info_power() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.info.power'
     */
    public static int offset_type_data_data_args_info_power() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.info.power'
     */
    public static int offsetBits_type_data_data_args_info_power() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.info.power'
     */
    public short get_type_data_data_args_info_power() {
        return (short)getUIntElement(offsetBits_type_data_data_args_info_power(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.info.power'
     */
    public void set_type_data_data_args_info_power(short value) {
        setUIntElement(offsetBits_type_data_data_args_info_power(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.info.power'
     */
    public static int size_type_data_data_args_info_power() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.info.power'
     */
    public static int sizeBits_type_data_data_args_info_power() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.dest.coords.comps
    //   Field type: short[]
    //   Offset (bits): 80
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.dest.coords.comps' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_dest_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.dest.coords.comps' is an array (true).
     */
    public static boolean isArray_type_data_data_args_dest_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.dest.coords.comps'
     */
    public static int offset_type_data_data_args_dest_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.dest.coords.comps'
     */
    public static int offsetBits_type_data_data_args_dest_coords_comps(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.dest.coords.comps' as a short[]
     */
    public short[] get_type_data_data_args_dest_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_type_data_data_args_dest_coords_comps(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_dest_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.dest.coords.comps' from the given short[]
     */
    public void set_type_data_data_args_dest_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_dest_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.dest.coords.comps'
     */
    public short getElement_type_data_data_args_dest_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_dest_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.dest.coords.comps'
     */
    public void setElement_type_data_data_args_dest_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_dest_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.dest.coords.comps'
     */
    public static int totalSize_type_data_data_args_dest_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.dest.coords.comps'
     */
    public static int totalSizeBits_type_data_data_args_dest_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.dest.coords.comps'
     */
    public static int elementSize_type_data_data_args_dest_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.dest.coords.comps'
     */
    public static int elementSizeBits_type_data_data_args_dest_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.dest.coords.comps'
     */
    public static int numDimensions_type_data_data_args_dest_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.dest.coords.comps'
     */
    public static int numElements_type_data_data_args_dest_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.dest.coords.comps'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_dest_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.dest.coords.comps' with a String
     */
    public void setString_type_data_data_args_dest_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_dest_coords_comps(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_dest_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.dest.coords.comps' as a String
     */
    public String getString_type_data_data_args_dest_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_dest_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_dest_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.dest.addr
    //   Field type: int
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.dest.addr' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_dest_addr() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.dest.addr' is an array (false).
     */
    public static boolean isArray_type_data_data_args_dest_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.dest.addr'
     */
    public static int offset_type_data_data_args_dest_addr() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.dest.addr'
     */
    public static int offsetBits_type_data_data_args_dest_addr() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.dest.addr'
     */
    public int get_type_data_data_args_dest_addr() {
        return (int)getUIntElement(offsetBits_type_data_data_args_dest_addr(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.dest.addr'
     */
    public void set_type_data_data_args_dest_addr(int value) {
        setUIntElement(offsetBits_type_data_data_args_dest_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.dest.addr'
     */
    public static int size_type_data_data_args_dest_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.dest.addr'
     */
    public static int sizeBits_type_data_data_args_dest_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.dest.mode
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.dest.mode' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_dest_mode() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.dest.mode' is an array (false).
     */
    public static boolean isArray_type_data_data_args_dest_mode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.dest.mode'
     */
    public static int offset_type_data_data_args_dest_mode() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.dest.mode'
     */
    public static int offsetBits_type_data_data_args_dest_mode() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.dest.mode'
     */
    public short get_type_data_data_args_dest_mode() {
        return (short)getUIntElement(offsetBits_type_data_data_args_dest_mode(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.dest.mode'
     */
    public void set_type_data_data_args_dest_mode(short value) {
        setUIntElement(offsetBits_type_data_data_args_dest_mode(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.dest.mode'
     */
    public static int size_type_data_data_args_dest_mode() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.dest.mode'
     */
    public static int sizeBits_type_data_data_args_dest_mode() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.ident.install_id
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.ident.install_id' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_ident_install_id() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.ident.install_id' is an array (false).
     */
    public static boolean isArray_type_data_data_args_ident_install_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.ident.install_id'
     */
    public static int offset_type_data_data_args_ident_install_id() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.ident.install_id'
     */
    public static int offsetBits_type_data_data_args_ident_install_id() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.ident.install_id'
     */
    public int get_type_data_data_args_ident_install_id() {
        return (int)getUIntElement(offsetBits_type_data_data_args_ident_install_id(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.ident.install_id'
     */
    public void set_type_data_data_args_ident_install_id(int value) {
        setUIntElement(offsetBits_type_data_data_args_ident_install_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.ident.install_id'
     */
    public static int size_type_data_data_args_ident_install_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.ident.install_id'
     */
    public static int sizeBits_type_data_data_args_ident_install_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.ident.compile_time
    //   Field type: long
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.ident.compile_time' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_ident_compile_time() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.ident.compile_time' is an array (false).
     */
    public static boolean isArray_type_data_data_args_ident_compile_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.ident.compile_time'
     */
    public static int offset_type_data_data_args_ident_compile_time() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.ident.compile_time'
     */
    public static int offsetBits_type_data_data_args_ident_compile_time() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'type_data.data.args.ident.compile_time'
     */
    public long get_type_data_data_args_ident_compile_time() {
        return (long)getUIntElement(offsetBits_type_data_data_args_ident_compile_time(), 32);
    }

    /**
     * Set the value of the field 'type_data.data.args.ident.compile_time'
     */
    public void set_type_data_data_args_ident_compile_time(long value) {
        setUIntElement(offsetBits_type_data_data_args_ident_compile_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.ident.compile_time'
     */
    public static int size_type_data_data_args_ident_compile_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.ident.compile_time'
     */
    public static int sizeBits_type_data_data_args_ident_compile_time() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.valid
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.valid' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_valid() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.valid' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.valid'
     */
    public static int offset_type_data_data_args_neighbor_info_valid() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.valid'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_valid() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.neighbor_info.valid'
     */
    public short get_type_data_data_args_neighbor_info_valid() {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_valid(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.valid'
     */
    public void set_type_data_data_args_neighbor_info_valid(short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.valid'
     */
    public static int size_type_data_data_args_neighbor_info_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.valid'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.first_hop
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.first_hop' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_first_hop() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.first_hop' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_first_hop() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public static int offset_type_data_data_args_neighbor_info_first_hop() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_first_hop() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public int get_type_data_data_args_neighbor_info_first_hop() {
        return (int)getUIntElement(offsetBits_type_data_data_args_neighbor_info_first_hop(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public void set_type_data_data_args_neighbor_info_first_hop(int value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_first_hop(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public static int size_type_data_data_args_neighbor_info_first_hop() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.first_hop'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_first_hop() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.last_seqno
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.last_seqno' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.last_seqno' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public static int offset_type_data_data_args_neighbor_info_last_seqno() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_last_seqno() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public short get_type_data_data_args_neighbor_info_last_seqno() {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_last_seqno(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public void set_type_data_data_args_neighbor_info_last_seqno(short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_last_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public static int size_type_data_data_args_neighbor_info_last_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.last_seqno'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_last_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.addr
    //   Field type: int
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.addr' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_addr() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.addr' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.addr'
     */
    public static int offset_type_data_data_args_neighbor_info_addr() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.addr'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_addr() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.neighbor_info.addr'
     */
    public int get_type_data_data_args_neighbor_info_addr() {
        return (int)getUIntElement(offsetBits_type_data_data_args_neighbor_info_addr(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.addr'
     */
    public void set_type_data_data_args_neighbor_info_addr(int value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.addr'
     */
    public static int size_type_data_data_args_neighbor_info_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.addr'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.coords.comps
    //   Field type: short[]
    //   Offset (bits): 128
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.coords.comps' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_coords_comps() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.coords.comps' is an array (true).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_coords_comps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int offset_type_data_data_args_neighbor_info_coords_comps(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_coords_comps(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.neighbor_info.coords.comps' as a short[]
     */
    public short[] get_type_data_data_args_neighbor_info_coords_comps() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_type_data_data_args_neighbor_info_coords_comps(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_neighbor_info_coords_comps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.neighbor_info.coords.comps' from the given short[]
     */
    public void set_type_data_data_args_neighbor_info_coords_comps(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_neighbor_info_coords_comps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public short getElement_type_data_data_args_neighbor_info_coords_comps(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_coords_comps(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public void setElement_type_data_data_args_neighbor_info_coords_comps(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_coords_comps(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int totalSize_type_data_data_args_neighbor_info_coords_comps() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int totalSizeBits_type_data_data_args_neighbor_info_coords_comps() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int elementSize_type_data_data_args_neighbor_info_coords_comps() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int elementSizeBits_type_data_data_args_neighbor_info_coords_comps() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int numDimensions_type_data_data_args_neighbor_info_coords_comps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.neighbor_info.coords.comps'
     */
    public static int numElements_type_data_data_args_neighbor_info_coords_comps() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.neighbor_info.coords.comps'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_neighbor_info_coords_comps(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.neighbor_info.coords.comps' with a String
     */
    public void setString_type_data_data_args_neighbor_info_coords_comps(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_neighbor_info_coords_comps(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_neighbor_info_coords_comps(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.neighbor_info.coords.comps' as a String
     */
    public String getString_type_data_data_args_neighbor_info_coords_comps() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_neighbor_info_coords_comps(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_neighbor_info_coords_comps(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.quality
    //   Field type: short
    //   Offset (bits): 192
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.quality' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_quality() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.quality' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.quality'
     */
    public static int offset_type_data_data_args_neighbor_info_quality() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.quality'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_quality() {
        return 192;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.neighbor_info.quality'
     */
    public short get_type_data_data_args_neighbor_info_quality() {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_quality(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.quality'
     */
    public void set_type_data_data_args_neighbor_info_quality(short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.quality'
     */
    public static int size_type_data_data_args_neighbor_info_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.quality'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.age
    //   Field type: short
    //   Offset (bits): 200
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.age' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_age() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.age' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.age'
     */
    public static int offset_type_data_data_args_neighbor_info_age() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.age'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_age() {
        return 200;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.neighbor_info.age'
     */
    public short get_type_data_data_args_neighbor_info_age() {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_age(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.age'
     */
    public void set_type_data_data_args_neighbor_info_age(short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.age'
     */
    public static int size_type_data_data_args_neighbor_info_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.age'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.neighbor_info.pos
    //   Field type: short
    //   Offset (bits): 208
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.pos' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_neighbor_info_pos() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.neighbor_info.pos' is an array (false).
     */
    public static boolean isArray_type_data_data_args_neighbor_info_pos() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.neighbor_info.pos'
     */
    public static int offset_type_data_data_args_neighbor_info_pos() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.neighbor_info.pos'
     */
    public static int offsetBits_type_data_data_args_neighbor_info_pos() {
        return 208;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.neighbor_info.pos'
     */
    public short get_type_data_data_args_neighbor_info_pos() {
        return (short)getUIntElement(offsetBits_type_data_data_args_neighbor_info_pos(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.neighbor_info.pos'
     */
    public void set_type_data_data_args_neighbor_info_pos(short value) {
        setUIntElement(offsetBits_type_data_data_args_neighbor_info_pos(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.neighbor_info.pos'
     */
    public static int size_type_data_data_args_neighbor_info_pos() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.neighbor_info.pos'
     */
    public static int sizeBits_type_data_data_args_neighbor_info_pos() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.root_info.valid
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.root_info.valid' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_root_info_valid() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.root_info.valid' is an array (false).
     */
    public static boolean isArray_type_data_data_args_root_info_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.root_info.valid'
     */
    public static int offset_type_data_data_args_root_info_valid() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.root_info.valid'
     */
    public static int offsetBits_type_data_data_args_root_info_valid() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.root_info.valid'
     */
    public short get_type_data_data_args_root_info_valid() {
        return (short)getUIntElement(offsetBits_type_data_data_args_root_info_valid(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.root_info.valid'
     */
    public void set_type_data_data_args_root_info_valid(short value) {
        setUIntElement(offsetBits_type_data_data_args_root_info_valid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.root_info.valid'
     */
    public static int size_type_data_data_args_root_info_valid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.root_info.valid'
     */
    public static int sizeBits_type_data_data_args_root_info_valid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.root_info.parent
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.root_info.parent' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_root_info_parent() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.root_info.parent' is an array (false).
     */
    public static boolean isArray_type_data_data_args_root_info_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.root_info.parent'
     */
    public static int offset_type_data_data_args_root_info_parent() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.root_info.parent'
     */
    public static int offsetBits_type_data_data_args_root_info_parent() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.root_info.parent'
     */
    public int get_type_data_data_args_root_info_parent() {
        return (int)getUIntElement(offsetBits_type_data_data_args_root_info_parent(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.root_info.parent'
     */
    public void set_type_data_data_args_root_info_parent(int value) {
        setUIntElement(offsetBits_type_data_data_args_root_info_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.root_info.parent'
     */
    public static int size_type_data_data_args_root_info_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.root_info.parent'
     */
    public static int sizeBits_type_data_data_args_root_info_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.root_info.last_seqno
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.root_info.last_seqno' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_root_info_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.root_info.last_seqno' is an array (false).
     */
    public static boolean isArray_type_data_data_args_root_info_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.root_info.last_seqno'
     */
    public static int offset_type_data_data_args_root_info_last_seqno() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.root_info.last_seqno'
     */
    public static int offsetBits_type_data_data_args_root_info_last_seqno() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.root_info.last_seqno'
     */
    public short get_type_data_data_args_root_info_last_seqno() {
        return (short)getUIntElement(offsetBits_type_data_data_args_root_info_last_seqno(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.root_info.last_seqno'
     */
    public void set_type_data_data_args_root_info_last_seqno(short value) {
        setUIntElement(offsetBits_type_data_data_args_root_info_last_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.root_info.last_seqno'
     */
    public static int size_type_data_data_args_root_info_last_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.root_info.last_seqno'
     */
    public static int sizeBits_type_data_data_args_root_info_last_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.root_info.hops
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.root_info.hops' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_root_info_hops() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.root_info.hops' is an array (false).
     */
    public static boolean isArray_type_data_data_args_root_info_hops() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.root_info.hops'
     */
    public static int offset_type_data_data_args_root_info_hops() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.root_info.hops'
     */
    public static int offsetBits_type_data_data_args_root_info_hops() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.root_info.hops'
     */
    public short get_type_data_data_args_root_info_hops() {
        return (short)getUIntElement(offsetBits_type_data_data_args_root_info_hops(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.root_info.hops'
     */
    public void set_type_data_data_args_root_info_hops(short value) {
        setUIntElement(offsetBits_type_data_data_args_root_info_hops(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.root_info.hops'
     */
    public static int size_type_data_data_args_root_info_hops() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.root_info.hops'
     */
    public static int sizeBits_type_data_data_args_root_info_hops() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.root_info.combined_quality
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.root_info.combined_quality' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_root_info_combined_quality() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.root_info.combined_quality' is an array (false).
     */
    public static boolean isArray_type_data_data_args_root_info_combined_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.root_info.combined_quality'
     */
    public static int offset_type_data_data_args_root_info_combined_quality() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.root_info.combined_quality'
     */
    public static int offsetBits_type_data_data_args_root_info_combined_quality() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.root_info.combined_quality'
     */
    public short get_type_data_data_args_root_info_combined_quality() {
        return (short)getUIntElement(offsetBits_type_data_data_args_root_info_combined_quality(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.root_info.combined_quality'
     */
    public void set_type_data_data_args_root_info_combined_quality(short value) {
        setUIntElement(offsetBits_type_data_data_args_root_info_combined_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.root_info.combined_quality'
     */
    public static int size_type_data_data_args_root_info_combined_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.root_info.combined_quality'
     */
    public static int sizeBits_type_data_data_args_root_info_combined_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.state
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.state' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_state() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.state' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.state'
     */
    public static int offset_type_data_data_args_link_info_state() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.state'
     */
    public static int offsetBits_type_data_data_args_link_info_state() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.state'
     */
    public short get_type_data_data_args_link_info_state() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_state(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.state'
     */
    public void set_type_data_data_args_link_info_state(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.state'
     */
    public static int size_type_data_data_args_link_info_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.state'
     */
    public static int sizeBits_type_data_data_args_link_info_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.addr
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.addr' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_addr() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.addr' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.addr'
     */
    public static int offset_type_data_data_args_link_info_addr() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.addr'
     */
    public static int offsetBits_type_data_data_args_link_info_addr() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.link_info.addr'
     */
    public int get_type_data_data_args_link_info_addr() {
        return (int)getUIntElement(offsetBits_type_data_data_args_link_info_addr(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.addr'
     */
    public void set_type_data_data_args_link_info_addr(int value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.addr'
     */
    public static int size_type_data_data_args_link_info_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.addr'
     */
    public static int sizeBits_type_data_data_args_link_info_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.reverse_quality
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.reverse_quality' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_reverse_quality() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.reverse_quality' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_reverse_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public static int offset_type_data_data_args_link_info_reverse_quality() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public static int offsetBits_type_data_data_args_link_info_reverse_quality() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public short get_type_data_data_args_link_info_reverse_quality() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_reverse_quality(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public void set_type_data_data_args_link_info_reverse_quality(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_reverse_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public static int size_type_data_data_args_link_info_reverse_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.reverse_quality'
     */
    public static int sizeBits_type_data_data_args_link_info_reverse_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.reverse_expiration
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.reverse_expiration' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_reverse_expiration() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.reverse_expiration' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_reverse_expiration() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public static int offset_type_data_data_args_link_info_reverse_expiration() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public static int offsetBits_type_data_data_args_link_info_reverse_expiration() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public short get_type_data_data_args_link_info_reverse_expiration() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_reverse_expiration(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public void set_type_data_data_args_link_info_reverse_expiration(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_reverse_expiration(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public static int size_type_data_data_args_link_info_reverse_expiration() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.reverse_expiration'
     */
    public static int sizeBits_type_data_data_args_link_info_reverse_expiration() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.quality
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.quality' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_quality() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.quality' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.quality'
     */
    public static int offset_type_data_data_args_link_info_quality() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.quality'
     */
    public static int offsetBits_type_data_data_args_link_info_quality() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.quality'
     */
    public short get_type_data_data_args_link_info_quality() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_quality(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.quality'
     */
    public void set_type_data_data_args_link_info_quality(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_quality(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.quality'
     */
    public static int size_type_data_data_args_link_info_quality() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.quality'
     */
    public static int sizeBits_type_data_data_args_link_info_quality() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.strength
    //   Field type: int
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.strength' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_strength() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.strength' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_strength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.strength'
     */
    public static int offset_type_data_data_args_link_info_strength() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.strength'
     */
    public static int offsetBits_type_data_data_args_link_info_strength() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.link_info.strength'
     */
    public int get_type_data_data_args_link_info_strength() {
        return (int)getUIntElement(offsetBits_type_data_data_args_link_info_strength(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.strength'
     */
    public void set_type_data_data_args_link_info_strength(int value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_strength(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.strength'
     */
    public static int size_type_data_data_args_link_info_strength() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.strength'
     */
    public static int sizeBits_type_data_data_args_link_info_strength() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.last_seqno
    //   Field type: int
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.last_seqno' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.last_seqno' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.last_seqno'
     */
    public static int offset_type_data_data_args_link_info_last_seqno() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.last_seqno'
     */
    public static int offsetBits_type_data_data_args_link_info_last_seqno() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'type_data.data.args.link_info.last_seqno'
     */
    public int get_type_data_data_args_link_info_last_seqno() {
        return (int)getUIntElement(offsetBits_type_data_data_args_link_info_last_seqno(), 16);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.last_seqno'
     */
    public void set_type_data_data_args_link_info_last_seqno(int value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_last_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.last_seqno'
     */
    public static int size_type_data_data_args_link_info_last_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.last_seqno'
     */
    public static int sizeBits_type_data_data_args_link_info_last_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.missed
    //   Field type: short[]
    //   Offset (bits): 160
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.missed' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_missed() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.missed' is an array (true).
     */
    public static boolean isArray_type_data_data_args_link_info_missed() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.missed'
     */
    public static int offset_type_data_data_args_link_info_missed(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.missed'
     */
    public static int offsetBits_type_data_data_args_link_info_missed(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.link_info.missed' as a short[]
     */
    public short[] get_type_data_data_args_link_info_missed() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_type_data_data_args_link_info_missed(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_link_info_missed(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.link_info.missed' from the given short[]
     */
    public void set_type_data_data_args_link_info_missed(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_link_info_missed(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.link_info.missed'
     */
    public short getElement_type_data_data_args_link_info_missed(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_missed(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.link_info.missed'
     */
    public void setElement_type_data_data_args_link_info_missed(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_missed(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.link_info.missed'
     */
    public static int totalSize_type_data_data_args_link_info_missed() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.link_info.missed'
     */
    public static int totalSizeBits_type_data_data_args_link_info_missed() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.link_info.missed'
     */
    public static int elementSize_type_data_data_args_link_info_missed() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.link_info.missed'
     */
    public static int elementSizeBits_type_data_data_args_link_info_missed() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.link_info.missed'
     */
    public static int numDimensions_type_data_data_args_link_info_missed() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.link_info.missed'
     */
    public static int numElements_type_data_data_args_link_info_missed() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.link_info.missed'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_link_info_missed(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.link_info.missed' with a String
     */
    public void setString_type_data_data_args_link_info_missed(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_link_info_missed(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_link_info_missed(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.link_info.missed' as a String
     */
    public String getString_type_data_data_args_link_info_missed() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_link_info_missed(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_link_info_missed(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.received
    //   Field type: short[]
    //   Offset (bits): 184
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.received' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_received() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.received' is an array (true).
     */
    public static boolean isArray_type_data_data_args_link_info_received() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.received'
     */
    public static int offset_type_data_data_args_link_info_received(int index1) {
        int offset = 184;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.received'
     */
    public static int offsetBits_type_data_data_args_link_info_received(int index1) {
        int offset = 184;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'type_data.data.args.link_info.received' as a short[]
     */
    public short[] get_type_data_data_args_link_info_received() {
        short[] tmp = new short[3];
        for (int index0 = 0; index0 < numElements_type_data_data_args_link_info_received(0); index0++) {
            tmp[index0] = getElement_type_data_data_args_link_info_received(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'type_data.data.args.link_info.received' from the given short[]
     */
    public void set_type_data_data_args_link_info_received(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_type_data_data_args_link_info_received(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'type_data.data.args.link_info.received'
     */
    public short getElement_type_data_data_args_link_info_received(int index1) {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_received(index1), 8);
    }

    /**
     * Set an element of the array 'type_data.data.args.link_info.received'
     */
    public void setElement_type_data_data_args_link_info_received(int index1, short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_received(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'type_data.data.args.link_info.received'
     */
    public static int totalSize_type_data_data_args_link_info_received() {
        return (24 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'type_data.data.args.link_info.received'
     */
    public static int totalSizeBits_type_data_data_args_link_info_received() {
        return 24;
    }

    /**
     * Return the size, in bytes, of each element of the array 'type_data.data.args.link_info.received'
     */
    public static int elementSize_type_data_data_args_link_info_received() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'type_data.data.args.link_info.received'
     */
    public static int elementSizeBits_type_data_data_args_link_info_received() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'type_data.data.args.link_info.received'
     */
    public static int numDimensions_type_data_data_args_link_info_received() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.link_info.received'
     */
    public static int numElements_type_data_data_args_link_info_received() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'type_data.data.args.link_info.received'
     * for the given dimension.
     */
    public static int numElements_type_data_data_args_link_info_received(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'type_data.data.args.link_info.received' with a String
     */
    public void setString_type_data_data_args_link_info_received(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_type_data_data_args_link_info_received(i, (short)s.charAt(i));
         }
         setElement_type_data_data_args_link_info_received(i, (short)0); //null terminate
    }

    /**
     * Read the array 'type_data.data.args.link_info.received' as a String
     */
    public String getString_type_data_data_args_link_info_received() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,3)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_type_data_data_args_link_info_received(i) == (char)0) break;
             carr[i] = (char)getElement_type_data_data_args_link_info_received(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.age
    //   Field type: short
    //   Offset (bits): 208
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.age' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_age() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.age' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_age() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.age'
     */
    public static int offset_type_data_data_args_link_info_age() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.age'
     */
    public static int offsetBits_type_data_data_args_link_info_age() {
        return 208;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.age'
     */
    public short get_type_data_data_args_link_info_age() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_age(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.age'
     */
    public void set_type_data_data_args_link_info_age(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_age(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.age'
     */
    public static int size_type_data_data_args_link_info_age() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.age'
     */
    public static int sizeBits_type_data_data_args_link_info_age() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type_data.data.args.link_info.chances
    //   Field type: short
    //   Offset (bits): 216
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type_data.data.args.link_info.chances' is signed (false).
     */
    public static boolean isSigned_type_data_data_args_link_info_chances() {
        return false;
    }

    /**
     * Return whether the field 'type_data.data.args.link_info.chances' is an array (false).
     */
    public static boolean isArray_type_data_data_args_link_info_chances() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type_data.data.args.link_info.chances'
     */
    public static int offset_type_data_data_args_link_info_chances() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type_data.data.args.link_info.chances'
     */
    public static int offsetBits_type_data_data_args_link_info_chances() {
        return 216;
    }

    /**
     * Return the value (as a short) of the field 'type_data.data.args.link_info.chances'
     */
    public short get_type_data_data_args_link_info_chances() {
        return (short)getUIntElement(offsetBits_type_data_data_args_link_info_chances(), 8);
    }

    /**
     * Set the value of the field 'type_data.data.args.link_info.chances'
     */
    public void set_type_data_data_args_link_info_chances(short value) {
        setUIntElement(offsetBits_type_data_data_args_link_info_chances(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type_data.data.args.link_info.chances'
     */
    public static int size_type_data_data_args_link_info_chances() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type_data.data.args.link_info.chances'
     */
    public static int sizeBits_type_data_data_args_link_info_chances() {
        return 8;
    }

}
