/* "Copyright (c) 2000-2002 The Regents of the University of California.  
 * All rights reserved.
 * 
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 */

// Authors: Cory Sharp
// $Id: .#MsgBuffersM.nc.1.8,v 1.1 2003/10/09 01:14:14 cssharp Exp $

//!! Config XXX { uint8_t MsgBuffersMaxFailCount = 8; }

includes Routing;
includes MsgBuffers;

module MsgBuffersM
{
  provides interface MsgBuffers;
}
implementation
{
  TOS_Msg m_buffer_data[MSGBUFFERS_NUM_BUFFERS];
  TOS_MsgPtr m_buffer[MSGBUFFERS_NUM_BUFFERS];
  uint8_t m_first_avail;
  uint8_t m_fail_count;

  command result_t MsgBuffers.init()
  {
    int ii;
    for( ii=0; ii<MSGBUFFERS_NUM_BUFFERS; ii++ )
      m_buffer[ii] = m_buffer_data+ii;
    m_first_avail = 0;
    m_fail_count = 0;
    return SUCCESS;
  }

  command TOS_MsgPtr MsgBuffers.alloc()
  {
    if( m_first_avail < MSGBUFFERS_NUM_BUFFERS )
    {
      m_fail_count = 0;
      return m_buffer[ m_first_avail++ ];
    }
    else if( G_Config.MsgBuffersMaxFailCount > 0 )
    {
      if( ++m_fail_count > G_Config.MsgBuffersMaxFailCount )
      {
	m_fail_count = 0;
	m_first_avail = 0;
	return call MsgBuffers.alloc();
      }
    }
    return NULL;
  }

  command TOS_MsgPtr MsgBuffers.alloc_for_swap( TOS_MsgPtr msg_to_alloc )
  {
    if( m_first_avail < MSGBUFFERS_NUM_BUFFERS )
    {
      TOS_MsgPtr free_buffer = m_buffer[m_first_avail];
      m_buffer[m_first_avail] = msg_to_alloc;
      m_first_avail++;
      return free_buffer;
    }
    else if( G_Config.MsgBuffersMaxFailCount > 0 )
    {
      if( ++m_fail_count > G_Config.MsgBuffersMaxFailCount )
      {
	m_fail_count = 0;
	m_first_avail = 0;
	return call MsgBuffers.alloc_for_swap( msg_to_alloc );
      }
    }
    return NULL;
  }

  command void MsgBuffers.free_and_swap( TOS_MsgPtr msg_to_release, TOS_MsgPtr msg_to_provide )
  {
    uint8_t ii;
    for( ii=0; ii<m_first_avail; ii++ )
    {
      if( m_buffer[ii] == msg_to_release )
      {
	m_first_avail--;
	m_buffer[ii] = m_buffer[m_first_avail];
	m_buffer[m_first_avail] = msg_to_provide;
	break;
      }
    }
  }

  command void MsgBuffers.free( TOS_MsgPtr msg_to_release )
  {
    call MsgBuffers.free_and_swap( msg_to_release, msg_to_release );
  }
}

