/*
 * Copyright (C) 2005 the University of Southern California.
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * In addition to releasing this program under the LGPL, the authors are
 * willing to dual-license it under other terms. You may contact the authors
 * of this project by writing to Wei Ye, USC/ISI, 4676 Admirality Way, Suite 
 * 1001, Marina del Rey, CA 90292, USA.
 */
/*
 * Authors: Wei Ye, John Heidemann
 *
 * This is the timer interface to support S-MAC
 */

includes Timer;
interface Timer {

  /**
   * Start the timer.
   * @param type The type of timer to start. Valid values include
   *  'TIMER_REPEAT' for a repeated timer, signal by posting a task
   *  'TIMER_ONE_SHOT' for a one-shot timer, signal by posting a task
   * @param interval The timer interval in milliseconds. Note that the 
   *    timer cannot support an arbitrary range of intervals.
   *    (Unfortunately this interface does not specify the valid range
   *    of timer intervals, which are specific to a platform.)
   * @return Returns SUCCESS if the timer can be started with the 
   *    given type and interval. Returns FAIL if the type is not
   *    valid, if the timer rate is too high, or if there are too many 
   *    timers currently active.
   */
  command result_t start(uint8_t type, uint32_t interval);
  
  /**
   * Stop the timer immediately, preventing it from firing again.
   * @return SUCCESS if the timer could be stopped, or FAIL if the timer 
   * is not running or the timer ID is out of range.
   *
   * Notes:
   * This command can stop both one-shot timers and repeated timers.
   */
  command result_t stop();

  /**
   * Get the remaining time of the timer before its next firing.
   * @return the the remaining time of the timer.
   */
  command uint32_t getRemainingTime();

   /**
   * Set the remaining time of the timer before its next firing.
   * @param value is the remaining time to be set to.
   * @return SUCCESS if timer value is successfully set, otherwise FAIL.
   *
   * Notes:
   * For a one-shot timer, this command is equivalent to stopping a timer
   * and restarting it immediately, but it should be more efficient.
   * For a repeated timer, this command only resets remaining time before 
   * its next firing. In other words, it resets the phase of the repeated 
   * timer, but does not change its period.
   */
  command result_t setRemainingTime(uint32_t time);
  
  /**
   * The signal generated by the timer when it fires.
   * 
   * Notes:
   * For high-priority timers, the signal is generated within interrupt 
   * handler, but it does not require the global interrupt be disabled.
   */
  event result_t fired();
}
