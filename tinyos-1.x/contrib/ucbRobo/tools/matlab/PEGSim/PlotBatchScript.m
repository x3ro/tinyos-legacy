% PlotBatchScript
% Loads the files generated by SimBatchScript and plots the results.
% Also calculates average capture times and capture rate.
%
% The plots are slightly misleading, since each pair of trajectories is
% for a different set of sensor network deployments, but nonetheless gives
% a visual "indication" of the success of the algorithms.  Note that we
% do not plot the sensor network deployment for this reason.
%
% This file is meant to be modified to match SimBatchScript.

format compact;
global plotState;
global SN;

% hack to resize dimensions properly without plotting a sensor network
SN = [];
SN.dimX = 50;
SN.dimY = 50;

kLim = 2;
iLim = 5; %5
jLim = 20; %20
for k = 1:kLim
    for i = 1:iLim
        captMat = [];
        captTimeMat = [];
        plotState = []; % clear it for next plot
        close;
        for j = 1:jLim
            switch k
                case 1
                    fName = sprintf('results/CovGammaTraj_100_50x50_%d_%d',j,i);
                case 2
                    fName = sprintf('results/BasicTraj_100_50x50_%d_%d',j,i);
                otherwise
                    error('k out of range');
            end
            load(fName);
            plotMotion;
            if size(P.pos) ~= size(E.pos) %error checking
                disp('Error, size of position matrices don''t match');
                disp(fName);
                disp('P.pos');
                size(P.pos)
                disp('E.pos');
                size(E.pos)

                captMat(i,j) = 0; % mark errorneous output with 0
            else
                lastPos(i,j,:) = [P.pos(1:2,end); E.pos(1:2,end)];
                if checkCapture % assume capture radius has not changed
                    captMat(i,j) = 1;
                else
                    captMat(i,j) = -1; % mark with nonzero flag
                end
                captTimeMat(i,j) = T;
            end %if size...
        end % j

        % 1) plot capture pairs on top of old graph
        % 2) replot the last position of the pursuer and evader, because
        % plotMotion erases them on each next iteration (as its suppose
        % to.  plotMotion was meant for plotting as the simulation ran)
        hold on;
        for j2 = 1:jLim
            plot(lastPos(i,j2,1),lastPos(i,j2,2),'ro','MarkerSize',12,'LineWidth',2);
            plot(lastPos(i,j2,3),lastPos(i,j2,4),'g*','MarkerSize',12,'LineWidth',2);
            if (captMat(i,j2) == 1)
                plot([lastPos(i,j2,1) lastPos(i,j2,3)], ...
                     [lastPos(i,j2,2) lastPos(i,j2,4)], 'k','LineWidth',3)
            end
        end
        hold off;

        % processing and display
        noCapture = find(captMat == -1);
        capture = find(captMat == 1);
        captNum = length(capture);
        runNum = captNum + length(noCapture);
        avgCaptTime = sum(captTimeMat(capture))/captNum;
        switch k
            case 1
                h = figure(plotState.SNfignum);
                title('Connectivity Covariance Pursuit');
                figName = sprintf('results/covGammaPlot_%d',i);
                saveas(h,figName,'fig');
                fprintf(1,'covGamma captured: %d/%d\n',captNum,runNum);
                fprintf(1,'covGamma average capture time for run %d: %.2f\n',i,avgCaptTime);
            case 2
                h = figure(plotState.SNfignum);
                title('LQG Pursuit');
                figName = sprintf('results/LQGPlot_%d',i);
                saveas(h,figName,'fig');
                fprintf(1,'LQG captured: %d/%d\n',captNum,runNum);
                fprintf(1,'LQG average capture time for run %d: %.2f\n',i,avgCaptTime);
         end % switch
    end % i
end % k
