/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'LocationMsg'
 * message type.
 */

package edu.mit.mers.localization;

public class LocationMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /**
     * Message type 1 (command)
     */
    public static int MSG_COMMAND       = 5;
    /**
     *  Message type 2 (gradient)
     */
    public static int MSG_GRADIENT      = 2;
    /**
     *  Message type 3 (update)
     * DEPRECATED!
     */
    public static int MSG_UPDATE        = 3;
    /* *
     *   Message type 4 (reply)
     * DOESN'T EXIST!
     */
    public static int MSG_REPLY         = 4;
    
    
    /**
     * Command number 1 (set anchor)
     */
    public static int CMD_SET_ANCHOR    = 1;
    /**
     * Command number 2 (get distance)
     */
    public static int CMD_GET_DISTANCE  = 2;
    /**
     * Command number 3 (set pot)
     */
    public static int CMD_SET_POT       = 3;
    /**
     * Command number 4 (reply)
     */
    public static int CMD_REPLY         = 4;
    /**
     * Command number 5 (reset)
     */
    public static int CMD_RESET         = 5;
    /**
     * Command number 6 (test radio)
     */
    public static int CMD_TEST_RADIO    = 6;
    /**
     * Command number 7 (test radio reply)
     */
    public static int CMD_POT_REPLY     = 7;
    /**
     * Command number 8 (update)
     */
    public static int CMD_UPDATE        = 8;
    /**
     * Command number 9 (TAG)
     */
    public static int CMD_TAG           = 9;
    /**
     * Command number 10 (HELLO)
     */
    public static int CMD_HELLO         = 10;
    /**
     * Command number 11 (HELLO_ACK)
     */
    public static int CMD_HELLO_ACK     = 11;
    /**
     * Command number 12 (TEST_STAT)
     */
    public static int CMD_TEST_STAT     = 12;
    /**
     * Command number 13 (TEST_STAT_REPLY)
     */
    public static int CMD_TEST_STAT_REPLY = 13;
    /**
     * Command number 14 (TEST_STAT_JR)
     */
    public static int CMD_TEST_STAT_JR    = 14;

    /**
     * Command number 14 (SET_POT_MAP)
     */
    public static int CMD_SET_POT_MAP     = 15;

    /**
     * Command number 14 (POT_MAP_REPLY)
     */
    public static int CMD_POT_MAP_REPLY   = 16;

    private int messageType = MSG_COMMAND;

    /** Create a new LocationMsg of size 13. */
    public LocationMsg() {
        super(DEFAULT_MESSAGE_SIZE);
    }

    /** Create a new LocationMsg of the given data_length. */
    public LocationMsg(int data_length) {
        super(data_length);
    }

    /**
     * Create a new LocationMsg with the given data_length
     * and base offset.
     */
    public LocationMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
    }

    /**
     * Create a new LocationMsg using the given byte array
     * as backing store.
     */
    public LocationMsg(byte[] data) {
        super(data);
    }

    /**
     * Create a new LocationMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public LocationMsg(byte[] data, int base_offset) {
        super(data, base_offset);
    }

    /**
     * Create a new LocationMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public LocationMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
    }

    /**
     * Create a new LocationMsg embedded in the given message
     * at the given base offset.
     */
    public LocationMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
    }

    /**
     * Create a new LocationMsg embedded in the given message
     * at the given base offset and length.
     */
    public LocationMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
    }

    /** Return the Active Message type of this message (-1 if unknown). */
    public int amType() {
        return messageType;
    }

    public void setType(int _messageType)
    {
	messageType = _messageType;
    }

    /**
       /* Return a String representation of this message. Includes the
       * message type name and the non-indexed field values.
       */
    public String toString() {
	String s = "Message <LocationMsg> \n";
	s += "  [cmd_ID=0x"+Long.toHexString(get_cmd_ID())+"]";
	s += "  [source=0x"+Long.toHexString(get_source())+"]";
	s += "  [dest=0x"+Long.toHexString(get_dest())+"]";
	s += "  [cmd_no=0x"+Long.toHexString(get_cmd_no())+"]\n";
	s += "  [args.status=0x"+Long.toHexString(get_args_status())+"]";
	s += "  [args.anchor=0x"+Long.toHexString(get_args_anchor())+"]";
	s += "  [args.pot_value=0x"+Long.toHexString(get_args_pot_value())+"]";
	s += "  [args.tag.id=0x"+Long.toHexString(get_args_tag_id())+"]\n";
	s += "  [args.tag.time=0x"+Long.toHexString(get_args_tag_time())+"] ";
	s += "  [args.reply.anchor_known=0x"+Long.toHexString(get_args_reply_anchor_known())+"]\n";
	s += "  [args.reply.anchor=0x"+Long.toHexString(get_args_reply_anchor())+"]";
	s += "  [args.reply.distance=0x"+Long.toHexString(get_args_reply_distance())+"]";
	s += "  [args.reply.version=0x"+Long.toHexString(get_args_reply_version())+"]\n";
	s += "  [sig_strength="+Long.toString(get_sig_strength())+"]\n";
	return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd_ID
    //   Field type: byte
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd_ID' is signed (false).
     */
    public static boolean isSigned_cmd_ID() {
        return false;
    }

    /**
     * Return whether the field 'cmd_ID' is an array (false).
     */
    public static boolean isArray_cmd_ID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd_ID'
     */
    public static int offset_cmd_ID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd_ID'
     */
    public static int offsetBits_cmd_ID() {
        return 0;
    }

    /**
     * Return the value (as a byte) of the field 'cmd_ID'
     */
    public byte get_cmd_ID() {
        return (byte)getSIntElement(offsetBits_cmd_ID(), 8);
    }

    /**
     * Set the value of the field 'cmd_ID'
     */
    public void set_cmd_ID(byte value) {
        setSIntElement(offsetBits_cmd_ID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd_ID'
     */
    public static int size_cmd_ID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cmd_ID'
     */
    public static int sizeBits_cmd_ID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'source'
     */
    public short get_source() {
        return (short)getSIntElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(short value) {
        setSIntElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest
    //   Field type: short
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest' is signed (false).
     */
    public static boolean isSigned_dest() {
        return false;
    }

    /**
     * Return whether the field 'dest' is an array (false).
     */
    public static boolean isArray_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest'
     */
    public static int offset_dest() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest'
     */
    public static int offsetBits_dest() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'dest'
     */
    public short get_dest() {
        return (short)getSIntElement(offsetBits_dest(), 16);
    }

    public void set_dest(int value) {
        setSIntElement(offsetBits_dest(), 16, (short)value);
    }

    /**
     * Set the value of the field 'dest'
     */
    public void set_dest(short value) {
        setSIntElement(offsetBits_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest'
     */
    public static int size_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest'
     */
    public static int sizeBits_dest() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd_no
    //   Field type: byte
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd_no' is signed (false).
     */
    public static boolean isSigned_cmd_no() {
        return false;
    }

    /**
     * Return whether the field 'cmd_no' is an array (false).
     */
    public static boolean isArray_cmd_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd_no'
     */
    public static int offset_cmd_no() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd_no'
     */
    public static int offsetBits_cmd_no() {
        return 40;
    }

    /**
     * Return the value (as a byte) of the field 'cmd_no'
     */
    public byte get_cmd_no() {
        return (byte)getSIntElement(offsetBits_cmd_no(), 8);
    }

    public void set_cmd_no(int value)
    {
	setSIntElement(offsetBits_cmd_no(), 8, (byte)value);
    }

    /**
     * Set the value of the field 'cmd_no'
     */
    public void set_cmd_no(byte value) {
        setSIntElement(offsetBits_cmd_no(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd_no'
     */
    public static int size_cmd_no() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cmd_no'
     */
    public static int sizeBits_cmd_no() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.status
    //   Field type: byte
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.status' is signed (false).
     */
    public static boolean isSigned_args_status() {
        return false;
    }

    /**
     * Return whether the field 'args.status' is an array (false).
     */
    public static boolean isArray_args_status() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.status'
     */
    public static int offset_args_status() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.status'
     */
    public static int offsetBits_args_status() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.status'
     */
    public byte get_args_status() {
        return (byte)getSIntElement(offsetBits_args_status(), 8);
    }

    /**
     * Set the value of the field 'args.status'
     */
    public void set_args_status(int value)
    {
        setSIntElement(offsetBits_args_status(), 8, (byte)value);
    }

    public void set_args_status(byte value) {
        setSIntElement(offsetBits_args_status(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.status'
     */
    public static int size_args_status() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.status'
     */
    public static int sizeBits_args_status() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.anchor
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.anchor' is signed (false).
     */
    public static boolean isSigned_args_anchor() {
        return false;
    }

    /**
     * Return whether the field 'args.anchor' is an array (false).
     */
    public static boolean isArray_args_anchor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.anchor'
     */
    public static int offset_args_anchor() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.anchor'
     */
    public static int offsetBits_args_anchor() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'args.anchor'
     */
    public short get_args_anchor() {
        return (short)getSIntElement(offsetBits_args_anchor(), 16);
    }

    /**
     * Set the value of the field 'args.anchor'
     */
    public void set_args_anchor(int value)
    {
	setSIntElement(offsetBits_args_anchor(), 16, (short)value);
    }

    public void set_args_anchor(short value) {
        setSIntElement(offsetBits_args_anchor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.anchor'
     */
    public static int size_args_anchor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.anchor'
     */
    public static int sizeBits_args_anchor() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.pot_value
    //   Field type: byte
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.pot_value' is signed (false).
     */
    public static boolean isSigned_args_pot_value() {
        return false;
    }

    /**
     * Return whether the field 'args.pot_value' is an array (false).
     */
    public static boolean isArray_args_pot_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.pot_value'
     */
    public static int offset_args_pot_value() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.pot_value'
     */
    public static int offsetBits_args_pot_value() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.pot_value'
     */
    public int get_args_pot_value() {
        return (int)getUIntElement(offsetBits_args_pot_value(), 8);
    }

    /**
     * Set the value of the field 'args.pot_value'
     */
    public void set_args_pot_value(int value) {
        setUIntElement(offsetBits_args_pot_value(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.pot_value'
     */
    public static int size_args_pot_value() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.pot_value'
     */
    public static int sizeBits_args_pot_value() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.tag.id
    //   Field type: byte
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.tag.id' is signed (false).
     */
    public static boolean isSigned_args_tag_id() {
        return false;
    }

    /**
     * Return whether the field 'args.tag.id' is an array (false).
     */
    public static boolean isArray_args_tag_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.tag.id'
     */
    public static int offset_args_tag_id() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.tag.id'
     */
    public static int offsetBits_args_tag_id() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.tag.id'
     */
    public short get_args_tag_id() {
        return (byte)getSIntElement(offsetBits_args_tag_id(), 16);
    }

    /**
     * Set the value of the field 'args.tag.id'
     */
    public void set_args_tag_id(short value) {
        setSIntElement(offsetBits_args_tag_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.tag.id'
     */
    public static int size_args_tag_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.tag.id'
     */
    public static int sizeBits_args_tag_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.tag.time
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.tag.time' is signed (false).
     */
    public static boolean isSigned_args_tag_time() {
        return false;
    }

    /**
     * Return whether the field 'args.tag.time' is an array (false).
     */
    public static boolean isArray_args_tag_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.tag.time'
     */
    public static int offset_args_tag_time() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.tag.time'
     */
    public static int offsetBits_args_tag_time() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'args.tag.time'
     */
    public short get_args_tag_time() {
        return (short)getSIntElement(offsetBits_args_tag_time(), 32);
    }

    /**
     * Set the value of the field 'args.tag.time'
     */
    public void set_args_tag_time(short value) {
        setSIntElement(offsetBits_args_tag_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.tag.time'
     */
    public static int size_args_tag_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.tag.time'
     */
    public static int sizeBits_args_tag_anchor() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.pot_map.pots
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.pot_map.pots' is signed (false).
     */
    public static boolean isSigned_args_pot_map_pots() {
        return false;
    }

    /**
     * Return whether the field 'args.pot_map.pots' is an array (false).
     */
    public static boolean isArray_args_pot_map_pots() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'args.pot_map.pots'
     */
    public static int offset_args_pot_map_pots() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.pot_map.pots'
     */
    public static int offsetBits_args_pot_map_pots() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.pot_map.pots'
     */
    public int[] get_args_pot_map_pots() {
	int a[] = new int[LocationCore.PotMapLen];
	for (int i = 0; i < LocationCore.PotMapLen; i++)
	    a[i] = (byte)getSIntElement(offsetBits_args_pot_map_pots()+i*16, 16);
        return a;
    }

    /**
     * Set the value of the field 'args.pot_map.pots'
     */
    public void set_args_pot_map_pots_at(int value, int index) {
        setSIntElement(offsetBits_args_pot_map_pots()+index*16, 16, value);
    }

    /**
     * Set the value of the field 'args.pot_map.pots'
     */
    public void set_args_pot_map_pots(int map[]) {
	for (int i = 0; i < LocationCore.PotMapLen; i++)
	    setSIntElement(offsetBits_args_pot_map_pots()+i*16, 16, map[i]);
    }

    /**
     * Return the size, in bytes, of the field 'args.pot_map.pots'
     */
    public static int size_args_pot_map_pots() {
        return (8*16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.pot_map.pots'
     */
    public static int sizeBits_args_pot_map_pots() {
        return 8*16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.hoods.total
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.hoods.total' is signed (false).
     */
    public static boolean isSigned_args_hoods_total() {
        return false;
    }

    /**
     * Return whether the field 'args.hoods.total' is an array (false).
     */
    public static boolean isArray_args_hoods_total() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.hoods.total'
     */
    public static int offset_args_hoods_total() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.hoods.total'
     */
    public static int offsetBits_args_hoods_total() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.hoods.total'
     */
    public byte get_args_hoods_total() {
	return (byte)getSIntElement(offsetBits_args_hoods_total(), 8);
    }

    /**
     * Set the value of the field 'args.hoods.total'
     */
    public void set_args_hoods_total(byte value) {
        setSIntElement(offsetBits_args_hoods_total(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.hoods.total'
     */
    public static int size_args_hoods_total() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.hoods.total'
     */
    public static int sizeBits_args_hoods_total() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.hoods.sizes
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.hoods.sizes' is signed (false).
     */
    public static boolean isSigned_args_hoods_sizes() {
        return false;
    }

    /**
     * Return whether the field 'args.hoods.sizes' is an array (false).
     */
    public static boolean isArray_args_hoods_sizes() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'args.hoods.sizes'
     */
    public static int offset_args_hoods_sizes() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.hoods.sizes'
     */
    public static int offsetBits_args_hoods_sizes() {
        return 56;
    }

    /**
     * Return the value (as a byte) of the field 'args.hoods.sizes'
     */
    public byte[] get_args_hoods_sizes() {
	byte a[] = new byte[10];
	for (int i = 0; i < 10; i++)
	    a[i] = (byte)getSIntElement(offsetBits_args_hoods_sizes()+i*8, 8);
        return a;
    }

    /**
     * Set the value of the field 'args.hoods.sizes'
     */
    public void set_args_hoods_sizes(byte value, int index) {
        setSIntElement(offsetBits_args_hoods_sizes()+index*8, 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.hoods.sizes'
     */
    public static int size_args_hoods_sizes() {
        return (8*10 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.hoods.sizes'
     */
    public static int sizeBits_args_hoods_sizes() {
        return 8*10;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.reply.anchor_known
    //   Field type: byte
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.reply.anchor_known' is signed (false).
     */
    public static boolean isSigned_args_reply_anchor_known() {
        return false;
    }

    /**
     * Return whether the field 'args.reply.anchor_known' is an array (false).
     */
    public static boolean isArray_args_reply_anchor_known() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.reply.anchor_known'
     */
    public static int offset_args_reply_anchor_known() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.reply.anchor_known'
     */
    public static int offsetBits_args_reply_anchor_known() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'args.reply.anchor_known'
     */
    public byte get_args_reply_anchor_known() {
        return (byte)getSIntElement(offsetBits_args_reply_anchor_known(), 8);
    }

    /**
     * Set the value of the field 'args.reply.anchor_known'
     */
    public void set_args_reply_anchor_known(byte value) {
        setSIntElement(offsetBits_args_reply_anchor_known(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.reply.anchor_known'
     */
    public static int size_args_reply_anchor_known() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.reply.anchor_known'
     */
    public static int sizeBits_args_reply_anchor_known() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.reply.anchor
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.reply.anchor' is signed (false).
     */
    public static boolean isSigned_args_reply_anchor() {
        return false;
    }

    /**
     * Return whether the field 'args.reply.anchor' is an array (false).
     */
    public static boolean isArray_args_reply_anchor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.reply.anchor'
     */
    public static int offset_args_reply_anchor() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.reply.anchor'
     */
    public static int offsetBits_args_reply_anchor() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'args.reply.anchor'
     */
    public short get_args_reply_anchor() {
        return (short)getSIntElement(offsetBits_args_reply_anchor(), 16);
    }

    /**
     * Set the value of the field 'args.reply.anchor'
     */
    public void set_args_reply_anchor(short value) {
        setSIntElement(offsetBits_args_reply_anchor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.reply.anchor'
     */
    public static int size_args_reply_anchor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.reply.anchor'
     */
    public static int sizeBits_args_reply_anchor() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.reply.distance
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.reply.distance' is signed (false).
     */
    public static boolean isSigned_args_reply_distance() {
        return false;
    }

    /**
     * Return whether the field 'args.reply.distance' is an array (false).
     */
    public static boolean isArray_args_reply_distance() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.reply.distance'
     */
    public static int offset_args_reply_distance() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.reply.distance'
     */
    public static int offsetBits_args_reply_distance() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'args.reply.distance'
     */
    public int get_args_reply_distance() {
        return (int)getUIntElement(offsetBits_args_reply_distance(), 16);
    }

    /**
     * Set the value of the field 'args.reply.distance'
     */
    public void set_args_reply_distance(int value) {
        setUIntElement(offsetBits_args_reply_distance(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.reply.distance'
     */
    public static int size_args_reply_distance() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.reply.distance'
     */
    public static int sizeBits_args_reply_distance() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: args.reply.version
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'args.reply.version' is signed (false).
     */
    public static boolean isSigned_args_reply_version() {
        return false;
    }

    /**
     * Return whether the field 'args.reply.version' is an array (false).
     */
    public static boolean isArray_args_reply_version() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'args.reply.version'
     */
    public static int offset_args_reply_version() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'args.reply.version'
     */
    public static int offsetBits_args_reply_version() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'args.reply.version'
     */
    public int get_args_reply_version() {
        return (int)getUIntElement(offsetBits_args_reply_version(), 16);
    }

    /**
     * Set the value of the field 'args.reply.version'
     */
    public void set_args_reply_version(int value) {
        setUIntElement(offsetBits_args_reply_version(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'args.reply.version'
     */
    public static int size_args_reply_version() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'args.reply.version'
     */
    public static int sizeBits_args_reply_version() {
        return 16;
    }

    public int get_sig_strength() {
	return(int)getUIntElement((6+16) * 8, 16);
    }

}
