/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SyncMsg'
 * message type.
 */

public class SyncMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 33;

    /** Create a new SyncMsg of size 20. */
    public SyncMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SyncMsg of the given data_length. */
    public SyncMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg with the given data_length
     * and base offset.
     */
    public SyncMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg using the given byte array
     * as backing store.
     */
    public SyncMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SyncMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SyncMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg embedded in the given message
     * at the given base offset.
     */
    public SyncMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SyncMsg embedded in the given message
     * at the given base offset and length.
     */
    public SyncMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SyncMsg> \n";
      try {
        s += "  [commandType=0x"+Long.toHexString(get_commandType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNo=0x"+Long.toHexString(get_seqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pcSendTime=0x"+Long.toHexString(get_pcSendTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [moteRecvTime=0x"+Long.toHexString(get_moteRecvTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [moteSendTime=0x"+Long.toHexString(get_moteSendTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pcRecvTime=0x"+Long.toHexString(get_pcRecvTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: commandType
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'commandType' is signed (false).
     */
    public static boolean isSigned_commandType() {
        return false;
    }

    /**
     * Return whether the field 'commandType' is an array (false).
     */
    public static boolean isArray_commandType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'commandType'
     */
    public static int offset_commandType() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'commandType'
     */
    public static int offsetBits_commandType() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'commandType'
     */
    public int get_commandType() {
        return (int)getUIntElement(offsetBits_commandType(), 16);
    }

    /**
     * Set the value of the field 'commandType'
     */
    public void set_commandType(int value) {
        setUIntElement(offsetBits_commandType(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'commandType'
     */
    public static int size_commandType() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'commandType'
     */
    public static int sizeBits_commandType() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNo
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNo' is signed (false).
     */
    public static boolean isSigned_seqNo() {
        return false;
    }

    /**
     * Return whether the field 'seqNo' is an array (false).
     */
    public static boolean isArray_seqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNo'
     */
    public static int offset_seqNo() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNo'
     */
    public static int offsetBits_seqNo() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'seqNo'
     */
    public int get_seqNo() {
        return (int)getUIntElement(offsetBits_seqNo(), 16);
    }

    /**
     * Set the value of the field 'seqNo'
     */
    public void set_seqNo(int value) {
        setUIntElement(offsetBits_seqNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNo'
     */
    public static int size_seqNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNo'
     */
    public static int sizeBits_seqNo() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pcSendTime
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pcSendTime' is signed (false).
     */
    public static boolean isSigned_pcSendTime() {
        return false;
    }

    /**
     * Return whether the field 'pcSendTime' is an array (false).
     */
    public static boolean isArray_pcSendTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pcSendTime'
     */
    public static int offset_pcSendTime() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pcSendTime'
     */
    public static int offsetBits_pcSendTime() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'pcSendTime'
     */
    public long get_pcSendTime() {
        return (long)getUIntElement(offsetBits_pcSendTime(), 32);
    }

    /**
     * Set the value of the field 'pcSendTime'
     */
    public void set_pcSendTime(long value) {
        setUIntElement(offsetBits_pcSendTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'pcSendTime'
     */
    public static int size_pcSendTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pcSendTime'
     */
    public static int sizeBits_pcSendTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: moteRecvTime
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'moteRecvTime' is signed (false).
     */
    public static boolean isSigned_moteRecvTime() {
        return false;
    }

    /**
     * Return whether the field 'moteRecvTime' is an array (false).
     */
    public static boolean isArray_moteRecvTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'moteRecvTime'
     */
    public static int offset_moteRecvTime() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'moteRecvTime'
     */
    public static int offsetBits_moteRecvTime() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'moteRecvTime'
     */
    public long get_moteRecvTime() {
        return (long)getUIntElement(offsetBits_moteRecvTime(), 32);
    }

    /**
     * Set the value of the field 'moteRecvTime'
     */
    public void set_moteRecvTime(long value) {
        setUIntElement(offsetBits_moteRecvTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'moteRecvTime'
     */
    public static int size_moteRecvTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'moteRecvTime'
     */
    public static int sizeBits_moteRecvTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: moteSendTime
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'moteSendTime' is signed (false).
     */
    public static boolean isSigned_moteSendTime() {
        return false;
    }

    /**
     * Return whether the field 'moteSendTime' is an array (false).
     */
    public static boolean isArray_moteSendTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'moteSendTime'
     */
    public static int offset_moteSendTime() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'moteSendTime'
     */
    public static int offsetBits_moteSendTime() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'moteSendTime'
     */
    public long get_moteSendTime() {
        return (long)getUIntElement(offsetBits_moteSendTime(), 32);
    }

    /**
     * Set the value of the field 'moteSendTime'
     */
    public void set_moteSendTime(long value) {
        setUIntElement(offsetBits_moteSendTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'moteSendTime'
     */
    public static int size_moteSendTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'moteSendTime'
     */
    public static int sizeBits_moteSendTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pcRecvTime
    //   Field type: long, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pcRecvTime' is signed (false).
     */
    public static boolean isSigned_pcRecvTime() {
        return false;
    }

    /**
     * Return whether the field 'pcRecvTime' is an array (false).
     */
    public static boolean isArray_pcRecvTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pcRecvTime'
     */
    public static int offset_pcRecvTime() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pcRecvTime'
     */
    public static int offsetBits_pcRecvTime() {
        return 128;
    }

    /**
     * Return the value (as a long) of the field 'pcRecvTime'
     */
    public long get_pcRecvTime() {
        return (long)getUIntElement(offsetBits_pcRecvTime(), 32);
    }

    /**
     * Set the value of the field 'pcRecvTime'
     */
    public void set_pcRecvTime(long value) {
        setUIntElement(offsetBits_pcRecvTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'pcRecvTime'
     */
    public static int size_pcRecvTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pcRecvTime'
     */
    public static int sizeBits_pcRecvTime() {
        return 32;
    }

}
