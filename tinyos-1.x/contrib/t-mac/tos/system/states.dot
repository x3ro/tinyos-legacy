digraph states {
	idle -> carr_sense [label="data/sync to send"];
	carr_sense -> tx [label="channel idle"];
	carr_sense -> idle [label="channel busy"];
	tx->txpktdone [label="packet sent"];
	txpktdone [label="<txpktdone event>"];
	txpktdone->idle [label="ack done"];
	txpktdone->idle [label="sync done"];
	txpktdone->wait_cts [label="rts done"];
	txpktdone->wait_data [label="cts done"];
	txpktdone->wait_ack[label="unicast data done"];
	bcast [label="<bcast done if/else>"];
	txpktdone->bcast[label="bcast data done"];
	bcast->idle [label="all bcast's sent"];
	bcast->tx [label="more bcasts to send"];
	wait_cts->tx[label="cts\nsrc==recvAddr"];
	wait_cts->handleerr[label="cts\nsrc!=recvAddr"];
	handleerr[label="<handleErrPkt()>"];
	wait_cts->trytoresend[label="cts timeout",color=red];
	trytoresend[label="<tryToResend()>"];
	trytoresend->idle;
	idle->rx[label="start sym detected"];
	rx->backoff[label="dest!=me || cts"];
	backoff->idle [label="cts/data timeout",color=red];
	backoff->handleerr[label="rts"];
	backoff->backoff[label="cts"];
	backoff->rx [label="<incoming pkt>"];
	//backoff->handleerr [label="ack\ndest==me\nsrc!=recvAddr"];
	wait_ack->trytoresend[label="ack timeout",color=red];
	wait_ack->handleerr [label="ack\ndest==me\nsrc!=recvAddr"];
	wait_ack->idle [label="ack\ndest==me\nsrc==recvAddr"];
	wait_data->idle [label="data timeout",color=red];
	wait_data->handleerr[label="data\ndest!=me"];
	wait_data->send_ack[label="data\ndest==me"];
	rx->send_ack[label="data\ndest==me"];
	//idle->rx;
	//rx->send_ack[label="data\ndest==me"];
	send_ack[label="<data incoming>"];
	send_ack->idle[label="bcast"];
	send_ack->tx[label="!bcast =>\n<howToSend=SEND_ACK>"];
	//idle->rx;
	rx->tx[label="rts\ndest==me"];
	handleerr->idle;
}
