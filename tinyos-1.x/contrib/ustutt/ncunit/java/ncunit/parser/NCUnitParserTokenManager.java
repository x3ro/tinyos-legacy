/* Generated By:JavaCC: Do not edit this line. NCUnitParserTokenManager.java */
package ncunit.parser;
import java.util.*;
import java.io.*;
import ncunit.output.*;

public class NCUnitParserTokenManager implements NCUnitParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x3ffL) != 0L)
         {
            jjmatchedKind = 74;
            return 31;
         }
         if ((active1 & 0x20000010000000L) != 0L)
            return 52;
         if ((active1 & 0x4100000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0xb800000800000L) != 0L)
            return 31;
         if ((active0 & 0xfff47fffff7e0000L) != 0L || (active1 & 0x3ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 1;
            }
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0xa000600000000000L) != 0L)
            return 31;
         if ((active0 & 0x5ffc1ffffffe0000L) != 0L || (active1 & 0x3ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 2;
            }
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x7fec001ffffe0000L) != 0L || (active1 & 0x337L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 31;
         }
         if ((active0 & 0x101fe000000000L) != 0L || (active1 & 0xc8L) != 0L)
            return 31;
         return -1;
      case 4:
         if ((active0 & 0x208001f80000000L) != 0L)
            return 31;
         if ((active0 & 0x7de400007ffe0000L) != 0L || (active1 & 0x337L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
            return 31;
         }
         return -1;
      case 5:
         if ((active0 & 0x400400007f800000L) != 0L || (active1 & 0x21L) != 0L)
            return 31;
         if ((active0 & 0x3de00000007e0000L) != 0L || (active1 & 0x316L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
            return 31;
         }
         return -1;
      case 6:
         if ((active0 & 0x39c00000001e0000L) != 0L || (active1 & 0x116L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
            return 31;
         }
         if ((active0 & 0x420000000600000L) != 0L || (active1 & 0x200L) != 0L)
            return 31;
         return -1;
      case 7:
         if ((active0 & 0x10000000001e0000L) != 0L || (active1 & 0x114L) != 0L)
            return 31;
         if ((active0 & 0x29c0000000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
            return 31;
         }
         return -1;
      case 8:
         if ((active0 & 0x20c0000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 31;
         if ((active0 & 0x900000000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 8;
            }
            return 31;
         }
         return -1;
      case 9:
         if ((active0 & 0x900000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
            return 31;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 31;
         return -1;
      case 10:
         if ((active0 & 0x900000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 10;
            return 31;
         }
         return -1;
      case 11:
         if ((active0 & 0x900000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 11;
            return 31;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000000000000L) != 0L)
            return 31;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 12;
            return 31;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 35:
         return jjStopAtPos(0, 2);
      case 37:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 38:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8400000000L);
      case 40:
         return jjStopAtPos(0, 85);
      case 41:
         return jjStopAtPos(0, 86);
      case 42:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 43:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000040000000L);
      case 44:
         return jjStopAtPos(0, 81);
      case 45:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x900000080000000L);
      case 46:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 47:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 58:
         return jjStopAtPos(0, 83);
      case 59:
         return jjStopAtPos(0, 77);
      case 60:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1002800100000000L);
      case 61:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 62:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5000200000000L);
      case 63:
         return jjStopAtPos(0, 101);
      case 64:
         return jjStopAtPos(0, 78);
      case 91:
         return jjStopAtPos(0, 87);
      case 93:
         return jjStopAtPos(0, 88);
      case 94:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe020000000000L, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f0084400020000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000c00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200012008000000L, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200800000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400100000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3800c00000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x7L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4080000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1073000000L, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200100000L, 0x80L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000040000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 79);
      case 124:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5000000000L);
      case 125:
         return jjStopAtPos(0, 80);
      case 126:
         return jjStopAtPos(0, 121);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 43:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 45:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 60:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 62:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10004000000000L, active1, 0x40L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8400000004480000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 31);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x81080000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000000L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000410200100000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x41e0348400860000L, active1, 0x9L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x10L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000030000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x206L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 124:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         break;
      case 61:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 97);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80020000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000100000000L, active1, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080000L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40282000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x500008400020000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001800000000L, active1, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000200000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000100000L, active1, 0x148L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200012000c000000L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000800000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 31);
         break;
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x900440000L, active1, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 31);
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x2400000009200000L, active1, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L, active1, 0L);
      case 107:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 31);
         break;
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000080000000L, active1, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x24000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000040000000L, active1, 0x20L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 31);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x2L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x22020000L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000014000000L, active1, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x20L);
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x12000000L, active1, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000040000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x104000020020000L, active1, 0x10L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 31);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000800000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x204L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000001000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000c000000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 31);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 31);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 31);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 31);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 31);
         break;
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x210L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 31);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 31);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000040000L, active1, 0x4L);
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 31);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0xe0000000120000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 31);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x18c0000000180000L, active1, 0x10L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 31);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 31);
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 31);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000020000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x2L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 31);
         break;
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 31);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 31);
         break;
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0x8c0000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 31);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 31);
         break;
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 31);
         break;
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0x880000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 55, 31);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 56, 31);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 59, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 74)
                        kind = 74;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(20, 22);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 23:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar == 10)
                     jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(27, 29);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(27, 29);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(38, 9);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(42, 9);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 9);
                  break;
               case 47:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(17, 19);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(49, 3);
                  break;
               case 50:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(50, 3);
                  break;
               case 51:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 55:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 60:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 61:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 62:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(31);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(41, 44);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 48:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(49, 3);
                  break;
               case 53:
                  jjAddStates(0, 2);
                  break;
               case 58:
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 5);
      case 92:
         return jjMoveStringLiteralDfa1_1(0xc0L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L);
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   53, 54, 56, 33, 34, 39, 40, 43, 44, 9, 52, 57, 20, 21, 23, 11, 
   13, 48, 50, 3, 5, 6, 9, 20, 21, 25, 23, 35, 36, 9, 43, 44, 
   9, 59, 60, 62, 7, 8, 14, 15, 17, 22, 24, 26, 29, 37, 38, 41, 
   42, 45, 46, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\143\157\156\164\151\156\165\145", 
"\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", 
"\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", "\144\157\165\142\154\145", 
"\163\151\172\145\157\146", "\163\167\151\164\143\150", "\162\145\164\165\162\156", 
"\145\170\164\145\162\156", "\163\164\162\165\143\164", "\163\164\141\164\151\143", 
"\163\151\147\156\145\144", "\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", 
"\143\157\156\163\164", "\146\154\157\141\164", "\163\150\157\162\164", "\145\154\163\145", 
"\143\141\163\145", "\154\157\156\147", "\145\156\165\155", "\141\165\164\157", 
"\166\157\151\144", "\143\150\141\162", "\147\157\164\157", "\146\157\162", "\151\156\164", 
"\151\146", "\144\157", "\141\163", "\141\164\157\155\151\143", "\141\163\171\156\143", 
"\143\141\154\154", "\143\157\155\155\141\156\144", "\143\157\155\160\157\156\145\156\164", 
"\143\157\155\160\157\156\145\156\164\163", "\143\157\156\146\151\147\165\162\141\164\151\157\156", 
"\145\166\145\156\164", "\147\145\156\145\162\151\143", 
"\151\155\160\154\145\155\145\156\164\141\164\151\157\156", "\151\156\143\154\165\144\145\163", "\151\156\164\145\162\146\141\143\145", 
"\155\157\144\165\154\145", "\156\145\167", "\156\157\162\141\143\145", 
"\156\170\137\163\164\162\165\143\164", "\156\170\137\165\156\151\157\156", "\160\157\163\164", 
"\160\162\157\166\151\144\145\163", "\163\151\147\156\141\154", "\164\141\163\153", "\165\163\145\163", 
"\141\142\163\164\162\141\143\164", "\145\170\164\145\156\144\163", null, null, null, "\73", "\100", "\173", 
"\175", "\54", "\75", "\72", "\56", "\50", "\51", "\133", "\135", "\52", "\56\56\56", 
"\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75", 
"\136\75", "\174\75", "\77", "\174\174", "\46\46", "\174", "\136", "\46", "\75\75", 
"\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\57", 
"\45", "\53\53", "\55\55", "\176", "\41", "\55\76", "\74\55", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PREPROCESSOR_OUTPUT", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffa201L, 0x1fffffffffffe7ffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x26L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1c0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public NCUnitParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public NCUnitParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
