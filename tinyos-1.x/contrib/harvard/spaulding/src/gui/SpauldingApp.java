/*
 * Copyright (c) 2007
 *	The President and Fellows of Harvard College.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.text.*;
import net.tinyos.util.*;
import net.tinyos.message.*;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.File;

public class SpauldingApp extends JPanel implements MessageListener
{
    //private SortedMap<Date, Session> serialObj = Collections.synchronizedSortedMap(new TreeMap<Date, Session>());

    // =========================== Data Members ================================
    private Map<Integer, Node> nodes = Collections.synchronizedMap(new HashMap<Integer, Node>());
    private SortedMap<Date, Session> sessions = Collections.synchronizedSortedMap(new TreeMap<Date, Session>());

    private RequestScheduler requestScheduler;
    private long startTime = System.currentTimeMillis();

    private SpauldingAppPanel spauldingAppPanel = null; // the MainPanel
    private MoteIF moteIF;

    private ErrorToLedsReceiver errorToLeds;

    private static final DecimalFormat dbFormat = new DecimalFormat("#.000");
    public static final int LOCAL_TIME_RATE_HZ = 32768;
    private static final boolean PRINT_SAMPLES_ENABLED = false;

    public static final String SESSIONS_DIR_STR = "sessions";
    public static final String SESSIONS_SER_FILE_STR = SESSIONS_DIR_STR + File.separator + "savedSessions.ser";

    // Date stuff
    public static final boolean USE_GMT_DATE = false;
    private static final DateFormat dateFormatLocal = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss.SSS_z");
    private static final DateFormat dateFormatGMT = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss.SSS_z");
    static {dateFormatGMT.setTimeZone(TimeZone.getTimeZone("GMT"));}

    // Used for inserting markers
    private ReplyMsg lastValidReplyMsg = null;
    private Date lastValidReplyMsgRecvDate = null;
    private MarkerLogger markerLogger = null;

    // ---- the following should be generated by ncg!!! ----
    private final static int REPLYMSG_STATUS = 0;
    private final static int SYSTEM_STATUS_BIT_ISSAMPLING = 1;
    public final static int BASE_MOTE_SRCADDR = 0;




    // =========================== Methods ================================
    SpauldingApp()
    {
        // The main GUI
        spauldingAppPanel = new SpauldingAppPanel(this);

        // Misc.
        requestScheduler = new RequestScheduler(this);
        SortedSet<Node> nodes = new TreeSet<Node>(getNodesSorted());

        // The MoteID stuff
        moteIF = new MoteIF(PrintStreamMessenger.err); // uses MOTECOM!
        moteIF.registerListener(new SamplingMsg(), this);
        moteIF.registerListener(new ReplyMsg(), this);
        moteIF.registerListener(new FetchReplyMsg(), this);

        // ErrorToLeds
        errorToLeds = new ErrorToLedsReceiver();  // log Errors
        loadSessions();
 }

    public SpauldingAppPanel getSpauldingAppPanel() {return this.spauldingAppPanel;}
    public MoteIF getMoteIF() {return moteIF;}


    private void loadSessions()
    {
        String fileName = "sessions";
        System.err.print("Loading serialized sessions: " + SESSIONS_SER_FILE_STR + " ...");
        try {
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(SESSIONS_SER_FILE_STR));

            try {
                sessions = (SortedMap<Date, Session>)in.readObject();
                System.err.println(" done.");
                for (Session session: sessions.values()) {
                    session.setSpauldingApp(this);
                    spauldingAppPanel.addNewSession(session);
                }
            }
            catch (ClassNotFoundException e) {
                System.err.println("\nThere was an error loading the serialized version.");
            }
        }
        catch (IOException e) {
            System.err.println(" No serialized version found");
        }
    }

    public void saveSessions()
    {
        System.err.print("Serializing sessions to file: " + SESSIONS_SER_FILE_STR + " ...");
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(SESSIONS_SER_FILE_STR));
            out.writeObject(sessions);
            out.flush();
            out.close();
        }
        catch (IOException e) {
            System.err.println("\nCouldn't write serialized version to file.");
        }
        System.err.println(" done.");
    }

    private Node addNewNode(int nodeID, ReplyMsg replyMsg)
    {
        assert(replyMsg != null && nodeID == replyMsg.get_srcAddr());
        assert(this.nodes.get(nodeID) == null);

        // (1) - Create the new node
        Node newNode = new Node(nodeID, replyMsg);
        nodes.put(nodeID, newNode);

        // (2) - Create the new node's views and register them with the new node
        spauldingAppPanel.addNewNode(newNode);
        // Small hack.  Add the replyMsg again because the node listeners
        // were registered after the node was created
        newNode.addReplyMsg(replyMsg);
        return newNode;
    }

    public void addNewSession(Session session)
    {
        assert (session != null);
        // (1) - Add the new session
        sessions.put(session.getDate(), session);

        // (2) - Create the new session's views and register it with listeneres
        spauldingAppPanel.addNewSession(session);

        // (3) - Serialize the session
        saveSessions();
    }

    public void removeSessions(java.util.List<Session> removedSessions)
    {
        SortedMap<Date, Session> newSessions = Collections.synchronizedSortedMap(new TreeMap<Date, Session>());

        for (Session session: sessions.values()) {
            if (!removedSessions.contains(session))
                newSessions.put(session.getDate(), session);
        }

        sessions = newSessions;
        saveSessions();
        this.spauldingAppPanel.updatePanels();
    }

    public boolean scheduleRequest(Request req)
    {
        spauldingAppPanel.newRequest(req);
        return requestScheduler.scheduleRequest(req, false);
    }

    static public String currDateToString(boolean toGMT)
    {
        return dateToString(new Date(), toGMT);
    }

    static public String dateToString(Date date, boolean toGMT)
    {
        if (toGMT)
            return dateFormatGMT.format(date);
        else
            return dateFormatLocal.format(date);
    }

    public void println(String str)
    {
        // This will eventually write to the DiagnosticPanel
        System.err.println("DIAGNOSTIC PANEL: " + str);
    }

    private void handleReplyMsg(ReplyMsg replyMsg)
    {
        if (replyMsg.get_type() == DriverMsgs.REPLYMSG_TYPE_STATUS) {
            // (0) - If this is a valid ReplyMsg (i.e. is globaly time synced), then remember it
            if ( (replyMsg.get_data_status_systemStatus() & (1 << DriverMsgs.SYSTEM_STATUS_BIT_ISTIMESYNCED)) > 0) {
                synchronized(this) {
                    lastValidReplyMsgRecvDate = new Date();
                    lastValidReplyMsg = replyMsg;
                }
            }

            // (1) - Log the received file MSG_RECV_STATUS
            //eventLogger.writeMsgRecvStatus(replyMsg);
            String str = "srcAddr= " + replyMsg.get_srcAddr() +
                         "  type= " + replyMsg.get_type();

            str += "  systemStatus= " + replyMsg.get_data_status_systemStatus() +
                    "  localTime= " + replyMsg.get_data_status_localTime() +
                    "  globalTime= " + replyMsg.get_data_status_globalTime() +
                    "  tailBlockID= " + replyMsg.get_data_status_tailBlockID() +
                    "  headBlockIDs= " + replyMsg.get_data_status_headBlockID() +
                    "  dsQueueSize= " + replyMsg.get_data_status_dataStoreQueueSize();
            System.out.println(currDateToString(USE_GMT_DATE) + ": " + str);

            if (this.requestScheduler.getQueueSize() > 0)
                System.out.println(currDateToString(USE_GMT_DATE) + ": RequestQueue.size()= " + this.requestScheduler.getQueueSize());


            // (2) - If this is a new node, add it
            Node currNode = nodes.get(replyMsg.get_srcAddr());
            if (currNode == null)
                currNode = addNewNode(replyMsg.get_srcAddr(), replyMsg);

            // (3) - If it's a reply, then the currently running request will handle it
            if (!requestScheduler.isMessageHandled(replyMsg)) {
                // Must be the periodic status message initiated by the node.
                // Therefore, update the node's state
                currNode.addReplyMsg(replyMsg);
            }
        }
        else
            println("ReplyMsg with unknown type= " + replyMsg.get_type() + " from nodeID= " + replyMsg.get_srcAddr());
    }

    private void handleSamplingMsg(SamplingMsg sMsg)
    {
        //System.out.println("=========================== handleSamplingMsg ===================");
        int srcAddr = sMsg.get_srcAddr();
        int sqnNbr = sMsg.get_sqnNbr();
        long timeStamp = sMsg.get_timeStamp();
        double timeSec = (double)timeStamp/(double)LOCAL_TIME_RATE_HZ;

        int nbrSamples = sMsg.get_nbrSamples();
        int samplingRate = sMsg.get_samplingRate();
        short[] channelIDs = sMsg.get_channelIDs();
        int[] samples = new int[nbrSamples];
        //assert (samples.length <= sMsg.get_samples().length);
        if (!(samples.length <= sMsg.get_samples().length))
            return; // bogus packet
        for (int i = 0; i < samples.length; ++i)
            samples[i] = sMsg.get_samples()[i];

        // Print to the standard out
        if (PRINT_SAMPLES_ENABLED) {
            System.out.print("\n\nsrcAddr= " + srcAddr +
                             "  sqnNbr= " + sqnNbr +
                             "  timeRaw= " + timeStamp +
                             "  timeSec= " + dbFormat.format(timeSec) +
                             "  nbrSamples= " + nbrSamples +
                             "  samplingRate= " + samplingRate +
                             "  channelIDs= [");
            int nbrChannels = 0;
            for (int i = 0; i < channelIDs.length; ++i) {
                System.out.print(channelIDs[i]);
                if (channelIDs[i] != MultiChanSampling.CHAN_INVALID)
                    nbrChannels++;
            }
            System.out.print("], samples:");

            for (int i = 0; i < nbrSamples; ++i) {
                if (i % nbrChannels == 0) { // newline
                    double deltaTimeSec = (double)(i/nbrChannels) / (double)samplingRate;
                    double currMCSTimeSec = timeSec + deltaTimeSec;
                    System.out.print("\n    timeSec= " + dbFormat.format(currMCSTimeSec) + ", samples= ");
                }
                System.out.print(" " + (samples[i] & 0x0fff));
            }
        }

        // Update the node
        Node currNode = nodes.get(srcAddr);
        if (currNode != null)
            currNode.newSamplingMsg(sMsg);
        else {
            // Drop it.  We firste need to receive a ReplyStatusMsg to create a node
        }
    }

    private void handleFetchReplyMsg(FetchReplyMsg frm)
    {
        // (1) - Get the nodeID
        int nodeID = frm.get_originaddr();

        // (2) - Log the received file
//        eventLogger.writeMsgRecvFetch(frm);

        // (3) - Only handle reply msgs from known nodes
        Node currNode = nodes.get(nodeID);
        if (currNode == null) {
            println("handleFetchReplyMsg() - unknown nodeID= " + nodeID + ",  dropping msg");
            return;
        }
        else {
            // (3) - Must be handled by the currently running request
            if (!requestScheduler.isMessageHandled(frm)) {
                System.err.println("SpauldingApp.handleFetchReplyMsg() - WARNING, FetchReplyMsg not handled!");
            }
            //println("VolcanoMonitor.handleFetchReplyMsg() - NOT handled by requestScheduler, dropping msg");
            //else
            //    println("VolcanoMonitor.handleFetchReplyMsg() - handled by requestScheduler");
        }
    }


    synchronized public void messageReceived(int dstaddr, Message msg)
    {
        if (msg instanceof ReplyMsg) {
            ReplyMsg replyMsg = (ReplyMsg) msg;
            assert (replyMsg.get_type() == DriverMsgs.REPLYMSG_TYPE_STATUS);
            handleReplyMsg(replyMsg);
        }
        else if (msg instanceof SamplingMsg) {
            SamplingMsg sMsg = (SamplingMsg) msg;
            handleSamplingMsg(sMsg);
        }
        else if (msg instanceof FetchReplyMsg) {
            FetchReplyMsg fRepMsg = (FetchReplyMsg) msg;
            handleFetchReplyMsg(fRepMsg);
        }
        else {
            System.err.println("SpauldingApp.messageReceived() - Unknown packet");
            System.err.println(msg);
        }
    }

    public Session getCurrentSession()
    {
        if (sessions.size() == 0)
            return null;
        else {
            Date date = sessions.lastKey();
            return sessions.get(date);
        }
    }

    public void insertMarker(String markerName)
    {
        if (lastValidReplyMsg != null) {
            Date currDate = new Date();
            long pcElapsedMS;
            long rmGlobalTime;

            synchronized(this) {
                pcElapsedMS = currDate.getTime() - lastValidReplyMsgRecvDate.getTime();
                rmGlobalTime = lastValidReplyMsg.get_data_status_globalTime();
            }
            long elapsedGlobalTime = Math.round((double) pcElapsedMS * (double) LOCAL_TIME_RATE_HZ / 1000.0);
            long markerGlobalTime = rmGlobalTime + elapsedGlobalTime;

            String msgStr = "srcAddr= " + lastValidReplyMsg.get_srcAddr() +
                            "  type= " + lastValidReplyMsg.get_type() +
                            "  systemStatus= " + lastValidReplyMsg.get_data_status_systemStatus() +
                            "  localTime= " + lastValidReplyMsg.get_data_status_localTime() +
                            "  globalTime= " + lastValidReplyMsg.get_data_status_globalTime() +
                            "  tailBlockID= " + lastValidReplyMsg.get_data_status_tailBlockID() +
                            "  headBlockIDs= " + lastValidReplyMsg.get_data_status_headBlockID() +
                            "  dsQueueSize= " + lastValidReplyMsg.get_data_status_dataStoreQueueSize();

            String logStr = dateToString(currDate, USE_GMT_DATE) +
                            ": globalTime= " + markerGlobalTime +
                            " markerName= " + markerName +
                            "  basedOn: " + msgStr;

            // Marker Logger
            if (markerLogger == null) {
                markerLogger = new MarkerLogger(this, currDate);
                markerLogger.open();
            }

            markerLogger.logMarker(logStr);

            // if we have a currently running session, then also add the mark there
            Session currSession = getCurrentSession();
            if (currSession != null && currSession.isSampling()) {
                String fileName = currSession.getSessionDir() + File.separator + "markers.txt";
                Logger.writeln(logStr, fileName, true);
            }
        }
        else
            System.out.println("WARNING: NOT ENOUGH INFO TO INSERT MARKER");
    }

    public Vector<Node> getNodesSorted()
    {
        Vector<Node> allNodes = new Vector<Node>(nodes.values());
        Collections.sort(allNodes);
        return allNodes;
    }

    public Vector<Session> getSessionsSorted()
    {
        Vector<Session> allSessions = new Vector<Session>(sessions.values());
        Collections.sort(allSessions);
        Collections.reverse(allSessions);
        return allSessions;
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("Spaulding GUI");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create and set up the menu bar
        frame.setJMenuBar(SpauldingAppPanel.createMenuBar());

        frame.setContentPane(new SpauldingApp().getSpauldingAppPanel());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}
