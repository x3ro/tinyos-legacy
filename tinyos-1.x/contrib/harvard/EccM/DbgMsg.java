/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DbgMsg'
 * message type.
 */

public class DbgMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 130;

    /** Create a new DbgMsg of size 12. */
    public DbgMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DbgMsg of the given data_length. */
    public DbgMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg with the given data_length
     * and base offset.
     */
    public DbgMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg using the given byte array
     * as backing store.
     */
    public DbgMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DbgMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DbgMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg embedded in the given message
     * at the given base offset.
     */
    public DbgMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DbgMsg embedded in the given message
     * at the given base offset and length.
     */
    public DbgMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DbgMsg> \n";
      try {
        s += "  [privKeyTime=0x"+Long.toHexString(get_privKeyTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pubKeyTime=0x"+Long.toHexString(get_pubKeyTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [secKeyTime=0x"+Long.toHexString(get_secKeyTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: privKeyTime
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'privKeyTime' is signed (false).
     */
    public static boolean isSigned_privKeyTime() {
        return false;
    }

    /**
     * Return whether the field 'privKeyTime' is an array (false).
     */
    public static boolean isArray_privKeyTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'privKeyTime'
     */
    public static int offset_privKeyTime() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'privKeyTime'
     */
    public static int offsetBits_privKeyTime() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'privKeyTime'
     */
    public long get_privKeyTime() {
        return (long)getUIntElement(offsetBits_privKeyTime(), 32);
    }

    /**
     * Set the value of the field 'privKeyTime'
     */
    public void set_privKeyTime(long value) {
        setUIntElement(offsetBits_privKeyTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'privKeyTime'
     */
    public static int size_privKeyTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'privKeyTime'
     */
    public static int sizeBits_privKeyTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pubKeyTime
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pubKeyTime' is signed (false).
     */
    public static boolean isSigned_pubKeyTime() {
        return false;
    }

    /**
     * Return whether the field 'pubKeyTime' is an array (false).
     */
    public static boolean isArray_pubKeyTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pubKeyTime'
     */
    public static int offset_pubKeyTime() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pubKeyTime'
     */
    public static int offsetBits_pubKeyTime() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'pubKeyTime'
     */
    public long get_pubKeyTime() {
        return (long)getUIntElement(offsetBits_pubKeyTime(), 32);
    }

    /**
     * Set the value of the field 'pubKeyTime'
     */
    public void set_pubKeyTime(long value) {
        setUIntElement(offsetBits_pubKeyTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'pubKeyTime'
     */
    public static int size_pubKeyTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pubKeyTime'
     */
    public static int sizeBits_pubKeyTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: secKeyTime
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'secKeyTime' is signed (false).
     */
    public static boolean isSigned_secKeyTime() {
        return false;
    }

    /**
     * Return whether the field 'secKeyTime' is an array (false).
     */
    public static boolean isArray_secKeyTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'secKeyTime'
     */
    public static int offset_secKeyTime() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'secKeyTime'
     */
    public static int offsetBits_secKeyTime() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'secKeyTime'
     */
    public long get_secKeyTime() {
        return (long)getUIntElement(offsetBits_secKeyTime(), 32);
    }

    /**
     * Set the value of the field 'secKeyTime'
     */
    public void set_secKeyTime(long value) {
        setUIntElement(offsetBits_secKeyTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'secKeyTime'
     */
    public static int size_secKeyTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'secKeyTime'
     */
    public static int sizeBits_secKeyTime() {
        return 32;
    }

}
