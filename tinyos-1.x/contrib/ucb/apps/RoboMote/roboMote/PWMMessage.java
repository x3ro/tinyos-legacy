/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PWMMessage'
 * message type.
 */

public class PWMMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 4;

    /** Create a new PWMMessage of size 8. */
    public PWMMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PWMMessage of the given data_length. */
    public PWMMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage with the given data_length
     * and base offset.
     */
    public PWMMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage using the given byte array
     * as backing store.
     */
    public PWMMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public PWMMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PWMMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage embedded in the given message
     * at the given base offset.
     */
    public PWMMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PWMMessage embedded in the given message
     * at the given base offset and length.
     */
    public PWMMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PWMMessage> \n";
      try {
        s += "  [steer1=0x"+Long.toHexString(get_steer1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [steer2=0x"+Long.toHexString(get_steer2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [throttle1=0x"+Long.toHexString(get_throttle1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [throttle2=0x"+Long.toHexString(get_throttle2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: steer1
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'steer1' is signed (false).
     */
    public static boolean isSigned_steer1() {
        return false;
    }

    /**
     * Return whether the field 'steer1' is an array (false).
     */
    public static boolean isArray_steer1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'steer1'
     */
    public static int offset_steer1() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'steer1'
     */
    public static int offsetBits_steer1() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'steer1'
     */
    public int get_steer1() {
        return (int)getUIntElement(offsetBits_steer1(), 16);
    }

    /**
     * Set the value of the field 'steer1'
     */
    public void set_steer1(int value) {
        setUIntElement(offsetBits_steer1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'steer1'
     */
    public static int size_steer1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'steer1'
     */
    public static int sizeBits_steer1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: steer2
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'steer2' is signed (false).
     */
    public static boolean isSigned_steer2() {
        return false;
    }

    /**
     * Return whether the field 'steer2' is an array (false).
     */
    public static boolean isArray_steer2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'steer2'
     */
    public static int offset_steer2() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'steer2'
     */
    public static int offsetBits_steer2() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'steer2'
     */
    public int get_steer2() {
        return (int)getUIntElement(offsetBits_steer2(), 16);
    }

    /**
     * Set the value of the field 'steer2'
     */
    public void set_steer2(int value) {
        setUIntElement(offsetBits_steer2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'steer2'
     */
    public static int size_steer2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'steer2'
     */
    public static int sizeBits_steer2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: throttle1
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'throttle1' is signed (false).
     */
    public static boolean isSigned_throttle1() {
        return false;
    }

    /**
     * Return whether the field 'throttle1' is an array (false).
     */
    public static boolean isArray_throttle1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'throttle1'
     */
    public static int offset_throttle1() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'throttle1'
     */
    public static int offsetBits_throttle1() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'throttle1'
     */
    public int get_throttle1() {
        return (int)getUIntElement(offsetBits_throttle1(), 16);
    }

    /**
     * Set the value of the field 'throttle1'
     */
    public void set_throttle1(int value) {
        setUIntElement(offsetBits_throttle1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'throttle1'
     */
    public static int size_throttle1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'throttle1'
     */
    public static int sizeBits_throttle1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: throttle2
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'throttle2' is signed (false).
     */
    public static boolean isSigned_throttle2() {
        return false;
    }

    /**
     * Return whether the field 'throttle2' is an array (false).
     */
    public static boolean isArray_throttle2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'throttle2'
     */
    public static int offset_throttle2() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'throttle2'
     */
    public static int offsetBits_throttle2() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'throttle2'
     */
    public int get_throttle2() {
        return (int)getUIntElement(offsetBits_throttle2(), 16);
    }

    /**
     * Set the value of the field 'throttle2'
     */
    public void set_throttle2(int value) {
        setUIntElement(offsetBits_throttle2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'throttle2'
     */
    public static int size_throttle2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'throttle2'
     */
    public static int sizeBits_throttle2() {
        return 16;
    }

}
