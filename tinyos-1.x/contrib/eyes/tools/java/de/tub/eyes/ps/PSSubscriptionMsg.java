/** 
 * This class was automatically generated by mig but modified in order
 * to account for dynamic size members of the message struct. This
 * class implements a Java interface to the 'PSSubscriptionMsg'
 * message type. Modifications done by @author Jan Hauer 
 */

package de.tub.eyes.ps;

public class PSSubscriptionMsg extends net.tinyos.message.Message {

    /*** Size of ps_item_header_t and ps_constraint_t members in bits ***/
    public static final int SIZEOF_HEADER_TYPE = 1 * 8;
    public static final int SIZEOF_HEADER_TOTALLENGTH = 1 * 8;
    public static final int SIZEOF_ATTRIBUTE_ID = 2 * 8;
    public static final int SIZEOF_OPERATION_ID = 1 * 8;
    /*** ps_item_header_t type constants ***/
    public static final int PS_ITEM_TYPE_CONSTRAINT = 0;
    public static final int PS_ITEM_TYPE_AVPAIR = 1;
    /*** offset in bits of data[] in msg */
     public static final int DATA_OFFSET = 48;

    /** The default size of this message type in bytes. */
    // TOSH_DATA_LENGTH - (header for data dissemination component, e.g. Drip)
    public static final int DEFAULT_MESSAGE_SIZE = 50 - 12; 

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 156;

    /** Create a new PSSubscriptionMsg of size 6. */
    public PSSubscriptionMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PSSubscriptionMsg of the given data_length. */
    public PSSubscriptionMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg with the given data_length
     * and base offset.
     */
    public PSSubscriptionMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg using the given byte array
     * as backing store.
     */
    public PSSubscriptionMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PSSubscriptionMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PSSubscriptionMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg embedded in the given message
     * at the given base offset.
     */
    public PSSubscriptionMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSSubscriptionMsg embedded in the given message
     * at the given base offset and length.
     */
    public PSSubscriptionMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PSSubscriptionMsg> \n";
      try {
        s += "  [subscriberID=0x"+Long.toHexString(get_subscriberID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [subscriptionID=0x"+Long.toHexString(get_subscriptionID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [modificationCounter=0x"+Long.toHexString(get_modificationCounter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flags=0x"+Long.toHexString(get_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dataLength=0x"+Long.toHexString(get_dataLength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: subscriberID
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'subscriberID' is signed (false).
     */
    public static boolean isSigned_subscriberID() {
        return false;
    }

    /**
     * Return whether the field 'subscriberID' is an array (false).
     */
    public static boolean isArray_subscriberID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'subscriberID'
     */
    public static int offset_subscriberID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'subscriberID'
     */
    public static int offsetBits_subscriberID() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'subscriberID'
     */
    public int get_subscriberID() {
        return (int)getUIntBEElement(offsetBits_subscriberID(), 16);
    }

    /**
     * Set the value of the field 'subscriberID'
     */
    public void set_subscriberID(int value) {
        setUIntBEElement(offsetBits_subscriberID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'subscriberID'
     */
    public static int size_subscriberID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'subscriberID'
     */
    public static int sizeBits_subscriberID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: subscriptionID
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'subscriptionID' is signed (false).
     */
    public static boolean isSigned_subscriptionID() {
        return false;
    }

    /**
     * Return whether the field 'subscriptionID' is an array (false).
     */
    public static boolean isArray_subscriptionID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'subscriptionID'
     */
    public static int offset_subscriptionID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'subscriptionID'
     */
    public static int offsetBits_subscriptionID() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'subscriptionID'
     */
    public short get_subscriptionID() {
        return (short)getUIntBEElement(offsetBits_subscriptionID(), 8);
    }

    /**
     * Set the value of the field 'subscriptionID'
     */
    public void set_subscriptionID(short value) {
        setUIntBEElement(offsetBits_subscriptionID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'subscriptionID'
     */
    public static int size_subscriptionID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'subscriptionID'
     */
    public static int sizeBits_subscriptionID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: modificationCounter
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'modificationCounter' is signed (false).
     */
    public static boolean isSigned_modificationCounter() {
        return false;
    }

    /**
     * Return whether the field 'modificationCounter' is an array (false).
     */
    public static boolean isArray_modificationCounter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'modificationCounter'
     */
    public static int offset_modificationCounter() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'modificationCounter'
     */
    public static int offsetBits_modificationCounter() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'modificationCounter'
     */
    public short get_modificationCounter() {
        return (short)getUIntBEElement(offsetBits_modificationCounter(), 8);
    }

    /**
     * Set the value of the field 'modificationCounter'
     */
    public void set_modificationCounter(short value) {
        setUIntBEElement(offsetBits_modificationCounter(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'modificationCounter'
     */
    public static int size_modificationCounter() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'modificationCounter'
     */
    public static int sizeBits_modificationCounter() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flags
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flags' is signed (false).
     */
    public static boolean isSigned_flags() {
        return false;
    }

    /**
     * Return whether the field 'flags' is an array (false).
     */
    public static boolean isArray_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flags'
     */
    public static int offset_flags() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flags'
     */
    public static int offsetBits_flags() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'flags'
     */
    public short get_flags() {
        return (short)getUIntBEElement(offsetBits_flags(), 8);
    }

    /**
     * Set the value of the field 'flags'
     */
    public void set_flags(short value) {
        setUIntBEElement(offsetBits_flags(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'flags'
     */
    public static int size_flags() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flags'
     */
    public static int sizeBits_flags() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dataLength
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dataLength' is signed (false).
     */
    public static boolean isSigned_dataLength() {
        return false;
    }

    /**
     * Return whether the field 'dataLength' is an array (false).
     */
    public static boolean isArray_dataLength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dataLength'
     */
    public static int offset_dataLength() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dataLength'
     */
    public static int offsetBits_dataLength() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'dataLength'
     */
    public short get_dataLength() {
        return (short)getUIntBEElement(offsetBits_dataLength(), 8);
    }

    /**
     * Set the value of the field 'dataLength'
     */
    // Will be done automatically when adding constraints/avpairs.
    private void set_dataLength(short value) {
        setUIntBEElement(offsetBits_dataLength(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dataLength'
     */
    public static int size_dataLength() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dataLength'
     */
    public static int sizeBits_dataLength() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: short[], unsigned
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data' as a short[]
     */
    public short[] get_data() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'data' from the given short[]
     */
    public void set_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data'
     */
    public short getElement_data(int index1) {
        return (short)getUIntBEElement(offsetBits_data(index1), 8);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, short value) {
        setUIntBEElement(offsetBits_data(index1), 8, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data' with a String
     */
    public void setString_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data(i, (short)s.charAt(i));
         }
         setElement_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'data' as a String
     */
    public String getString_data() { 
         char carr[] = new char[net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data(i) == (char)0) break;
             carr[i] = (char)getElement_data(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: constraint/avpairs
    // Manually added.
    /////////////////////////////////////////////////////////

    /** 
     *
     * Add a constraint to the PSSubscriptionMsg. The dataLength field is
     * increased automatically. @return true if successful, false otherwise
     * (no space left in message).
     * @param attributeID ID of the attribute
     * @param operationID operation ID 
     * @param value numerical value
     * @param size size of value in byte
     */
    public boolean addConstraint(int attributeID, short operationID, long value, int size)
    {
      short [] data = new short[size];
      // make it a BE
      for (int i=0; i<size; i++){
        data[size-1-i] = (short)(value % 256);
        value /= 256;
      }
      return addConstraint(attributeID, operationID, data);
    }
      
   /**
     * Add a constraint to the PSSubscriptionMsg. The dataLength field is
     * increased automatically. @return true if successful, false otherwise
     * (no space left in message).
     * @param attributeID ID of the attribute
     * @param operationID operation ID 
     * @param value String
     */   
    public boolean addConstraint(int attributeID, short operationID, String value)
    {
      char[] chars = value.toCharArray();
      short [] data = new short[value.length()];
      for (int i=0; i<value.length(); i++){
        data[i] = (short) chars[i];
      }
      return addConstraint(attributeID, operationID, data);
    }
   
    public boolean addConstraint(int attributeID, short operationID, short[] value) 
    { 
     int offset = offsetBits_firstheader() + get_dataLength() * 8;
     int lengthNeeded = SIZEOF_HEADER_TYPE + SIZEOF_HEADER_TOTALLENGTH + 
       SIZEOF_ATTRIBUTE_ID + SIZEOF_OPERATION_ID + value.length * 8;
      
     if (lengthNeeded > getSizeLeftBits())
       return false;
     setUIntBEElement(offset, SIZEOF_HEADER_TYPE, PS_ITEM_TYPE_CONSTRAINT);
     offset += SIZEOF_HEADER_TYPE;
     setUIntBEElement(offset, SIZEOF_HEADER_TOTALLENGTH, lengthNeeded / 8);
     offset += SIZEOF_HEADER_TOTALLENGTH;
     setUIntBEElement(offset, SIZEOF_ATTRIBUTE_ID, attributeID);
     offset += SIZEOF_ATTRIBUTE_ID;
     setUIntBEElement(offset, SIZEOF_OPERATION_ID, operationID);
     offset += SIZEOF_OPERATION_ID;
     for (int index = 0; index < value.length; index++) {
       setUIntBEElement(offset, 8, value[index]);
       offset += 8;
     }
     set_dataLength((short) (get_dataLength() + lengthNeeded / 8));
     return true;
    }

    /** 
     *
     * Add a numeric attribute-value pair (command) to the PSSubscriptionMsg.
     * The dataLength field is increased automatically. @return true
     * if successful, false otherwis (no space left in message).
     * @param attributeID ID of the attribute
     * @param value numerical value
     * @param size size of value in byte
     */
    public boolean addAVPair(int attributeID, long value, int size) 
    { 
      short [] data = new short[size];
      // make it a BE
      for (int i=0; i<size; i++){
        data[size-1-i] = (short)(value % 256);
        value /= 256;
      }
      return addAVPair(attributeID, data);
    }

    /** 
     *
     * Add a String attribute-value pair (command) to the PSSubscriptionMsg.
     * The dataLength field is increased automatically. @return true
     * if successful, false otherwis (no space left in message).
     * @param attributeID ID of the attribute
     * @param value String
     */
    public boolean addAVPair(int attributeID, String value) 
    { 
      char[] chars = value.toCharArray();
      short [] data = new short[value.length()];
      for (int i=0; i<value.length(); i++){
        data[i] = (short) chars[i];
      }
      return addAVPair(attributeID, data);
    }

    
    public boolean addAVPair(int attributeID, short[] value) 
    { 
     int offset = offsetBits_firstheader() + get_dataLength() * 8;
     int lengthNeeded = SIZEOF_HEADER_TYPE + SIZEOF_HEADER_TOTALLENGTH + 
       SIZEOF_ATTRIBUTE_ID + value.length * 8;

     if (lengthNeeded > getSizeLeftBits())
       return false;
     setUIntBEElement(offset, SIZEOF_HEADER_TYPE, PS_ITEM_TYPE_AVPAIR);
     offset += SIZEOF_HEADER_TYPE;
     setUIntBEElement(offset, SIZEOF_HEADER_TOTALLENGTH, lengthNeeded / 8);
     offset += SIZEOF_HEADER_TOTALLENGTH;
     setUIntBEElement(offset, SIZEOF_ATTRIBUTE_ID, attributeID);
     offset += SIZEOF_ATTRIBUTE_ID;
     for (int index = 0; index < value.length; index++) {
       setUIntBEElement(offset, 8, value[index]);
       offset += 8;
     }
     set_dataLength((short) (get_dataLength() + lengthNeeded / 8));
     return true;
    }
    
    /**
     * Return the offset (in bits) of the field PSSubscriptionMsg.data
     */
    public static int offsetBits_firstheader() {
        return DATA_OFFSET;
    }

    /**
     * Returns the number of bytes a constraints with
     * empty value field takes.
     */
    public int getEmptyConstraintSizeBytes() {
      return SIZEOF_HEADER_TYPE + SIZEOF_HEADER_TOTALLENGTH + 
             SIZEOF_ATTRIBUTE_ID + SIZEOF_OPERATION_ID;
    }
    
    /**
     * Returns the number of bytes an avpair with
     * empty value field takes.
     */
    public int getEmptyAVPairSizeBytes() {
      return SIZEOF_HEADER_TYPE + SIZEOF_HEADER_TOTALLENGTH + 
             SIZEOF_ATTRIBUTE_ID;
    }

    /**
     * Return the number of bits left in the field PSSubscriptionMsg.data
     * (for constraints and avpair).
     */
    public int getSizeLeftBytes() {
      return (getSizeLeftBits() / 8);
    }
    
    /**
     * Return the number of bits left in the field PSSubscriptionMsg.data
     * (for constraints and avpair).
     */
    public int getSizeLeftBits() {
      int offset = offsetBits_firstheader() + get_dataLength() * 8;
      return (DEFAULT_MESSAGE_SIZE * 8 - offset);
    }
    
    /**
     * Return the current size of the PSSubscriptionMsg in Byte
     */
    public int getTotalMessageSizeBytes() {
        return (getTotalMessageSizeBits() / 8);
    }

    /**
     * Return the current size of the PSSubscriptionMsg in Bits
     */
    public int getTotalMessageSizeBits() {
        int size = offsetBits_firstheader();
        size += get_dataLength() * 8;
        return size;
    }



}
