/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PSStatusMsg'
 * message type.
 */

package de.tub.eyes.ps;

public class PSStatusMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 157;

    /** Create a new PSStatusMsg of size 6. */
    public PSStatusMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PSStatusMsg of the given data_length. */
    public PSStatusMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg with the given data_length
     * and base offset.
     */
    public PSStatusMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg using the given byte array
     * as backing store.
     */
    public PSStatusMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PSStatusMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PSStatusMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg embedded in the given message
     * at the given base offset.
     */
    public PSStatusMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PSStatusMsg embedded in the given message
     * at the given base offset and length.
     */
    public PSStatusMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PSStatusMsg> \n";
      try {
        s += "  [sourceAddress=0x"+Long.toHexString(get_sourceAddress())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNum=0x"+Long.toHexString(get_seqNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [statusID=0x"+Long.toHexString(get_statusID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [length=0x"+Long.toHexString(get_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sourceAddress
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sourceAddress' is signed (false).
     */
    public static boolean isSigned_sourceAddress() {
        return false;
    }

    /**
     * Return whether the field 'sourceAddress' is an array (false).
     */
    public static boolean isArray_sourceAddress() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sourceAddress'
     */
    public static int offset_sourceAddress() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sourceAddress'
     */
    public static int offsetBits_sourceAddress() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'sourceAddress'
     */
    public int get_sourceAddress() {
        return (int)getUIntBEElement(offsetBits_sourceAddress(), 16);
    }

    /**
     * Set the value of the field 'sourceAddress'
     */
    public void set_sourceAddress(int value) {
        setUIntBEElement(offsetBits_sourceAddress(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sourceAddress'
     */
    public static int size_sourceAddress() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sourceAddress'
     */
    public static int sizeBits_sourceAddress() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNum
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNum' is signed (false).
     */
    public static boolean isSigned_seqNum() {
        return false;
    }

    /**
     * Return whether the field 'seqNum' is an array (false).
     */
    public static boolean isArray_seqNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNum'
     */
    public static int offset_seqNum() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNum'
     */
    public static int offsetBits_seqNum() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'seqNum'
     */
    public int get_seqNum() {
        return (int)getUIntBEElement(offsetBits_seqNum(), 16);
    }

    /**
     * Set the value of the field 'seqNum'
     */
    public void set_seqNum(int value) {
        setUIntBEElement(offsetBits_seqNum(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNum'
     */
    public static int size_seqNum() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNum'
     */
    public static int sizeBits_seqNum() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: statusID
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'statusID' is signed (false).
     */
    public static boolean isSigned_statusID() {
        return false;
    }

    /**
     * Return whether the field 'statusID' is an array (false).
     */
    public static boolean isArray_statusID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'statusID'
     */
    public static int offset_statusID() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'statusID'
     */
    public static int offsetBits_statusID() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'statusID'
     */
    public short get_statusID() {
        return (short)getUIntBEElement(offsetBits_statusID(), 8);
    }

    /**
     * Set the value of the field 'statusID'
     */
    public void set_statusID(short value) {
        setUIntBEElement(offsetBits_statusID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'statusID'
     */
    public static int size_statusID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'statusID'
     */
    public static int sizeBits_statusID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: length
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'length' is signed (false).
     */
    public static boolean isSigned_length() {
        return false;
    }

    /**
     * Return whether the field 'length' is an array (false).
     */
    public static boolean isArray_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'length'
     */
    public static int offset_length() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'length'
     */
    public static int offsetBits_length() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'length'
     */
    public short get_length() {
        return (short)getUIntBEElement(offsetBits_length(), 8);
    }

    /**
     * Set the value of the field 'length'
     */
    public void set_length(short value) {
        setUIntBEElement(offsetBits_length(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'length'
     */
    public static int size_length() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'length'
     */
    public static int sizeBits_length() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msg
    //   Field type: short[], unsigned
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msg' is signed (false).
     */
    public static boolean isSigned_msg() {
        return false;
    }

    /**
     * Return whether the field 'msg' is an array (true).
     */
    public static boolean isArray_msg() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'msg'
     */
    public static int offset_msg(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msg'
     */
    public static int offsetBits_msg(int index1) {
        int offset = 48;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'msg' as a short[]
     */
    public short[] get_msg() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'msg' from the given short[]
     */
    public void set_msg(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_msg(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'msg'
     */
    public short getElement_msg(int index1) {
        return (short)getUIntBEElement(offsetBits_msg(index1), 8);
    }

    /**
     * Set an element of the array 'msg'
     */
    public void setElement_msg(int index1, short value) {
        setUIntBEElement(offsetBits_msg(index1), 8, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'msg'
     */
    public static int elementSize_msg() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'msg'
     */
    public static int elementSizeBits_msg() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'msg'
     */
    public static int numDimensions_msg() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'msg'
     * for the given dimension.
     */
    public static int numElements_msg(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'msg' with a String
     */
    public void setString_msg(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_msg(i, (short)s.charAt(i));
         }
         setElement_msg(i, (short)0); //null terminate
    }

    /**
     * Read the array 'msg' as a String
     */
    public String getString_msg() { 
         char carr[] = new char[net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_msg(i) == (char)0) break;
             carr[i] = (char)getElement_msg(i);
         }
         return new String(carr,0,i);
    }

}
