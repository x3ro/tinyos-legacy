/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BlackbookNodeMsg'
 * message type.
 */

package com.rincon.blackbook.messages;

public class BlackbookNodeMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 188;

    /** Create a new BlackbookNodeMsg of size 18. */
    public BlackbookNodeMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BlackbookNodeMsg of the given data_length. */
    public BlackbookNodeMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg with the given data_length
     * and base offset.
     */
    public BlackbookNodeMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg using the given byte array
     * as backing store.
     */
    public BlackbookNodeMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public BlackbookNodeMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BlackbookNodeMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg embedded in the given message
     * at the given base offset.
     */
    public BlackbookNodeMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookNodeMsg embedded in the given message
     * at the given base offset and length.
     */
    public BlackbookNodeMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BlackbookNodeMsg> \n";
      try {
        s += "  [focusedNode.flashAddress=0x"+Long.toHexString(get_focusedNode_flashAddress())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.nextNode=0x"+Long.toHexString(get_focusedNode_nextNode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.dataLength=0x"+Long.toHexString(get_focusedNode_dataLength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.reserveLength=0x"+Long.toHexString(get_focusedNode_reserveLength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.dataCrc=0x"+Long.toHexString(get_focusedNode_dataCrc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.filenameCrc=0x"+Long.toHexString(get_focusedNode_filenameCrc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.state=0x"+Long.toHexString(get_focusedNode_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedNode.fileElement=0x"+Long.toHexString(get_focusedNode_fileElement())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.flashAddress
    //   Field type: long
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.flashAddress' is signed (false).
     */
    public static boolean isSigned_focusedNode_flashAddress() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.flashAddress' is an array (false).
     */
    public static boolean isArray_focusedNode_flashAddress() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.flashAddress'
     */
    public static int offset_focusedNode_flashAddress() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.flashAddress'
     */
    public static int offsetBits_focusedNode_flashAddress() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'focusedNode.flashAddress'
     */
    public long get_focusedNode_flashAddress() {
        return (long)getUIntElement(offsetBits_focusedNode_flashAddress(), 32);
    }

    /**
     * Set the value of the field 'focusedNode.flashAddress'
     */
    public void set_focusedNode_flashAddress(long value) {
        setUIntElement(offsetBits_focusedNode_flashAddress(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.flashAddress'
     */
    public static int size_focusedNode_flashAddress() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.flashAddress'
     */
    public static int sizeBits_focusedNode_flashAddress() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.nextNode
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.nextNode' is signed (false).
     */
    public static boolean isSigned_focusedNode_nextNode() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.nextNode' is an array (false).
     */
    public static boolean isArray_focusedNode_nextNode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.nextNode'
     */
    public static int offset_focusedNode_nextNode() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.nextNode'
     */
    public static int offsetBits_focusedNode_nextNode() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'focusedNode.nextNode'
     */
    public int get_focusedNode_nextNode() {
        return (int)getUIntElement(offsetBits_focusedNode_nextNode(), 16);
    }

    /**
     * Set the value of the field 'focusedNode.nextNode'
     */
    public void set_focusedNode_nextNode(int value) {
        setUIntElement(offsetBits_focusedNode_nextNode(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.nextNode'
     */
    public static int size_focusedNode_nextNode() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.nextNode'
     */
    public static int sizeBits_focusedNode_nextNode() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.dataLength
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.dataLength' is signed (false).
     */
    public static boolean isSigned_focusedNode_dataLength() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.dataLength' is an array (false).
     */
    public static boolean isArray_focusedNode_dataLength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.dataLength'
     */
    public static int offset_focusedNode_dataLength() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.dataLength'
     */
    public static int offsetBits_focusedNode_dataLength() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'focusedNode.dataLength'
     */
    public int get_focusedNode_dataLength() {
        return (int)getUIntElement(offsetBits_focusedNode_dataLength(), 16);
    }

    /**
     * Set the value of the field 'focusedNode.dataLength'
     */
    public void set_focusedNode_dataLength(int value) {
        setUIntElement(offsetBits_focusedNode_dataLength(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.dataLength'
     */
    public static int size_focusedNode_dataLength() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.dataLength'
     */
    public static int sizeBits_focusedNode_dataLength() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.reserveLength
    //   Field type: long
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.reserveLength' is signed (false).
     */
    public static boolean isSigned_focusedNode_reserveLength() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.reserveLength' is an array (false).
     */
    public static boolean isArray_focusedNode_reserveLength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.reserveLength'
     */
    public static int offset_focusedNode_reserveLength() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.reserveLength'
     */
    public static int offsetBits_focusedNode_reserveLength() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'focusedNode.reserveLength'
     */
    public long get_focusedNode_reserveLength() {
        return (long)getUIntElement(offsetBits_focusedNode_reserveLength(), 32);
    }

    /**
     * Set the value of the field 'focusedNode.reserveLength'
     */
    public void set_focusedNode_reserveLength(long value) {
        setUIntElement(offsetBits_focusedNode_reserveLength(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.reserveLength'
     */
    public static int size_focusedNode_reserveLength() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.reserveLength'
     */
    public static int sizeBits_focusedNode_reserveLength() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.dataCrc
    //   Field type: int
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.dataCrc' is signed (false).
     */
    public static boolean isSigned_focusedNode_dataCrc() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.dataCrc' is an array (false).
     */
    public static boolean isArray_focusedNode_dataCrc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.dataCrc'
     */
    public static int offset_focusedNode_dataCrc() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.dataCrc'
     */
    public static int offsetBits_focusedNode_dataCrc() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'focusedNode.dataCrc'
     */
    public int get_focusedNode_dataCrc() {
        return (int)getUIntElement(offsetBits_focusedNode_dataCrc(), 16);
    }

    /**
     * Set the value of the field 'focusedNode.dataCrc'
     */
    public void set_focusedNode_dataCrc(int value) {
        setUIntElement(offsetBits_focusedNode_dataCrc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.dataCrc'
     */
    public static int size_focusedNode_dataCrc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.dataCrc'
     */
    public static int sizeBits_focusedNode_dataCrc() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.filenameCrc
    //   Field type: int
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.filenameCrc' is signed (false).
     */
    public static boolean isSigned_focusedNode_filenameCrc() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.filenameCrc' is an array (false).
     */
    public static boolean isArray_focusedNode_filenameCrc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.filenameCrc'
     */
    public static int offset_focusedNode_filenameCrc() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.filenameCrc'
     */
    public static int offsetBits_focusedNode_filenameCrc() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'focusedNode.filenameCrc'
     */
    public int get_focusedNode_filenameCrc() {
        return (int)getUIntElement(offsetBits_focusedNode_filenameCrc(), 16);
    }

    /**
     * Set the value of the field 'focusedNode.filenameCrc'
     */
    public void set_focusedNode_filenameCrc(int value) {
        setUIntElement(offsetBits_focusedNode_filenameCrc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.filenameCrc'
     */
    public static int size_focusedNode_filenameCrc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.filenameCrc'
     */
    public static int sizeBits_focusedNode_filenameCrc() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.state
    //   Field type: short
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.state' is signed (false).
     */
    public static boolean isSigned_focusedNode_state() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.state' is an array (false).
     */
    public static boolean isArray_focusedNode_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.state'
     */
    public static int offset_focusedNode_state() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.state'
     */
    public static int offsetBits_focusedNode_state() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'focusedNode.state'
     */
    public short get_focusedNode_state() {
        return (short)getUIntElement(offsetBits_focusedNode_state(), 8);
    }

    /**
     * Set the value of the field 'focusedNode.state'
     */
    public void set_focusedNode_state(short value) {
        setUIntElement(offsetBits_focusedNode_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.state'
     */
    public static int size_focusedNode_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.state'
     */
    public static int sizeBits_focusedNode_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedNode.fileElement
    //   Field type: short
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedNode.fileElement' is signed (false).
     */
    public static boolean isSigned_focusedNode_fileElement() {
        return false;
    }

    /**
     * Return whether the field 'focusedNode.fileElement' is an array (false).
     */
    public static boolean isArray_focusedNode_fileElement() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedNode.fileElement'
     */
    public static int offset_focusedNode_fileElement() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedNode.fileElement'
     */
    public static int offsetBits_focusedNode_fileElement() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'focusedNode.fileElement'
     */
    public short get_focusedNode_fileElement() {
        return (short)getUIntElement(offsetBits_focusedNode_fileElement(), 8);
    }

    /**
     * Set the value of the field 'focusedNode.fileElement'
     */
    public void set_focusedNode_fileElement(short value) {
        setUIntElement(offsetBits_focusedNode_fileElement(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedNode.fileElement'
     */
    public static int size_focusedNode_fileElement() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedNode.fileElement'
     */
    public static int sizeBits_focusedNode_fileElement() {
        return 8;
    }

}
