/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BlackbookSectorMsg'
 * message type.
 */

package com.rincon.blackbook.messages;

public class BlackbookSectorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 5;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 190;

    /** Create a new BlackbookSectorMsg of size 5. */
    public BlackbookSectorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BlackbookSectorMsg of the given data_length. */
    public BlackbookSectorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg with the given data_length
     * and base offset.
     */
    public BlackbookSectorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg using the given byte array
     * as backing store.
     */
    public BlackbookSectorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public BlackbookSectorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BlackbookSectorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg embedded in the given message
     * at the given base offset.
     */
    public BlackbookSectorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlackbookSectorMsg embedded in the given message
     * at the given base offset and length.
     */
    public BlackbookSectorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BlackbookSectorMsg> \n";
      try {
        s += "  [focusedSector.writePage=0x"+Long.toHexString(get_focusedSector_writePage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedSector.totalNodes=0x"+Long.toHexString(get_focusedSector_totalNodes())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedSector.index=0x"+Long.toHexString(get_focusedSector_index())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [focusedSector.inUse=0x"+Long.toHexString(get_focusedSector_inUse())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedSector.writePage
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedSector.writePage' is signed (false).
     */
    public static boolean isSigned_focusedSector_writePage() {
        return false;
    }

    /**
     * Return whether the field 'focusedSector.writePage' is an array (false).
     */
    public static boolean isArray_focusedSector_writePage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedSector.writePage'
     */
    public static int offset_focusedSector_writePage() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedSector.writePage'
     */
    public static int offsetBits_focusedSector_writePage() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'focusedSector.writePage'
     */
    public int get_focusedSector_writePage() {
        return (int)getUIntElement(offsetBits_focusedSector_writePage(), 16);
    }

    /**
     * Set the value of the field 'focusedSector.writePage'
     */
    public void set_focusedSector_writePage(int value) {
        setUIntElement(offsetBits_focusedSector_writePage(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedSector.writePage'
     */
    public static int size_focusedSector_writePage() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedSector.writePage'
     */
    public static int sizeBits_focusedSector_writePage() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedSector.totalNodes
    //   Field type: short
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedSector.totalNodes' is signed (false).
     */
    public static boolean isSigned_focusedSector_totalNodes() {
        return false;
    }

    /**
     * Return whether the field 'focusedSector.totalNodes' is an array (false).
     */
    public static boolean isArray_focusedSector_totalNodes() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedSector.totalNodes'
     */
    public static int offset_focusedSector_totalNodes() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedSector.totalNodes'
     */
    public static int offsetBits_focusedSector_totalNodes() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'focusedSector.totalNodes'
     */
    public short get_focusedSector_totalNodes() {
        return (short)getUIntElement(offsetBits_focusedSector_totalNodes(), 8);
    }

    /**
     * Set the value of the field 'focusedSector.totalNodes'
     */
    public void set_focusedSector_totalNodes(short value) {
        setUIntElement(offsetBits_focusedSector_totalNodes(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedSector.totalNodes'
     */
    public static int size_focusedSector_totalNodes() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedSector.totalNodes'
     */
    public static int sizeBits_focusedSector_totalNodes() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedSector.index
    //   Field type: short
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedSector.index' is signed (false).
     */
    public static boolean isSigned_focusedSector_index() {
        return false;
    }

    /**
     * Return whether the field 'focusedSector.index' is an array (false).
     */
    public static boolean isArray_focusedSector_index() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedSector.index'
     */
    public static int offset_focusedSector_index() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedSector.index'
     */
    public static int offsetBits_focusedSector_index() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'focusedSector.index'
     */
    public short get_focusedSector_index() {
        return (short)getUIntElement(offsetBits_focusedSector_index(), 8);
    }

    /**
     * Set the value of the field 'focusedSector.index'
     */
    public void set_focusedSector_index(short value) {
        setUIntElement(offsetBits_focusedSector_index(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedSector.index'
     */
    public static int size_focusedSector_index() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedSector.index'
     */
    public static int sizeBits_focusedSector_index() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: focusedSector.inUse
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'focusedSector.inUse' is signed (false).
     */
    public static boolean isSigned_focusedSector_inUse() {
        return false;
    }

    /**
     * Return whether the field 'focusedSector.inUse' is an array (false).
     */
    public static boolean isArray_focusedSector_inUse() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'focusedSector.inUse'
     */
    public static int offset_focusedSector_inUse() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'focusedSector.inUse'
     */
    public static int offsetBits_focusedSector_inUse() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'focusedSector.inUse'
     */
    public short get_focusedSector_inUse() {
        return (short)getUIntElement(offsetBits_focusedSector_inUse(), 8);
    }

    /**
     * Set the value of the field 'focusedSector.inUse'
     */
    public void set_focusedSector_inUse(short value) {
        setUIntElement(offsetBits_focusedSector_inUse(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'focusedSector.inUse'
     */
    public static int size_focusedSector_inUse() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'focusedSector.inUse'
     */
    public static int sizeBits_focusedSector_inUse() {
        return 8;
    }

}
