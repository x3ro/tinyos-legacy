/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DiagRspMsg'
 * message type.
 */

package net.tinyos.script.oscope;

public class DiagRspMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 91;

    /** Create a new DiagRspMsg of size 26. */
    public DiagRspMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DiagRspMsg of the given data_length. */
    public DiagRspMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg with the given data_length
     * and base offset.
     */
    public DiagRspMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg using the given byte array
     * as backing store.
     */
    public DiagRspMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DiagRspMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DiagRspMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg embedded in the given message
     * at the given base offset.
     */
    public DiagRspMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DiagRspMsg embedded in the given message
     * at the given base offset and length.
     */
    public DiagRspMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DiagRspMsg> \n";
      try {
        s += "  [source_mote_id=0x"+Long.toHexString(get_source_mote_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sequence_num=0x"+Long.toHexString(get_sequence_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param=0x"+Long.toHexString(get_param())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source_mote_id
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source_mote_id' is signed (true).
     */
    public static boolean isSigned_source_mote_id() {
        return true;
    }

    /**
     * Return whether the field 'source_mote_id' is an array (false).
     */
    public static boolean isArray_source_mote_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source_mote_id'
     */
    public static int offset_source_mote_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source_mote_id'
     */
    public static int offsetBits_source_mote_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'source_mote_id'
     */
    public int get_source_mote_id() {
        return (int)getUIntElement(offsetBits_source_mote_id(), 16);
    }

    /**
     * Set the value of the field 'source_mote_id'
     */
    public void set_source_mote_id(int value) {
        setUIntElement(offsetBits_source_mote_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source_mote_id'
     */
    public static int size_source_mote_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source_mote_id'
     */
    public static int sizeBits_source_mote_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sequence_num
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sequence_num' is signed (true).
     */
    public static boolean isSigned_sequence_num() {
        return true;
    }

    /**
     * Return whether the field 'sequence_num' is an array (false).
     */
    public static boolean isArray_sequence_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sequence_num'
     */
    public static int offset_sequence_num() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sequence_num'
     */
    public static int offsetBits_sequence_num() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'sequence_num'
     */
    public int get_sequence_num() {
        return (int)getUIntElement(offsetBits_sequence_num(), 16);
    }

    /**
     * Set the value of the field 'sequence_num'
     */
    public void set_sequence_num(int value) {
        setUIntElement(offsetBits_sequence_num(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sequence_num'
     */
    public static int size_sequence_num() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sequence_num'
     */
    public static int sizeBits_sequence_num() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param
    //   Field type: int, signed
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param' is signed (true).
     */
    public static boolean isSigned_param() {
        return true;
    }

    /**
     * Return whether the field 'param' is an array (false).
     */
    public static boolean isArray_param() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param'
     */
    public static int offset_param() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param'
     */
    public static int offsetBits_param() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'param'
     */
    public int get_param() {
        return (int)getUIntElement(offsetBits_param(), 16);
    }

    /**
     * Set the value of the field 'param'
     */
    public void set_param(int value) {
        setUIntElement(offsetBits_param(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param'
     */
    public static int size_param() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param'
     */
    public static int sizeBits_param() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: short[], signed
    //   Offset (bits): 48
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (true).
     */
    public static boolean isSigned_data() {
        return true;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'data' as a short[]
     */
    public short[] get_data() {
        short[] tmp = new short[10];
        for (int index0 = 0; index0 < numElements_data(0); index0++) {
            tmp[index0] = getElement_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data' from the given short[]
     */
    public void set_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data'
     */
    public short getElement_data(int index1) {
        return (short)getSIntElement(offsetBits_data(index1), 16);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, short value) {
        setSIntElement(offsetBits_data(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data'
     */
    public static int totalSize_data() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data'
     */
    public static int totalSizeBits_data() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     */
    public static int numElements_data() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
