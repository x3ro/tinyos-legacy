/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TimeResp'
 * message type.
 */

package net.tinyos.timesync;

public class TimeResp extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 19;

    /** Create a new TimeResp of size 10. */
    public TimeResp() {
        super(DEFAULT_MESSAGE_SIZE);
    }

    /** Create a new TimeResp of the given data_length. */
    public TimeResp(int data_length) {
        super(data_length);
    }

    /**
     * Create a new TimeResp with the given data_length
     * and base offset.
     */
    public TimeResp(int data_length, int base_offset) {
        super(data_length, base_offset);
    }

    /**
     * Create a new TimeResp using the given byte array
     * as backing store.
     */
    public TimeResp(byte[] data) {
        super(data);
    }

    /**
     * Create a new TimeResp using the given byte array
     * as backing store, with the given base offset.
     */
    public TimeResp(byte[] data, int base_offset) {
        super(data, base_offset);
    }

    /**
     * Create a new TimeResp using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TimeResp(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
    }

    /**
     * Create a new TimeResp embedded in the given message
     * at the given base offset.
     */
    public TimeResp(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
    }

    /**
     * Create a new TimeResp embedded in the given message
     * at the given base offset and length.
     */
    public TimeResp(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
    }

    /** Return the Active Message type of this message (-1 if unknown). */
    public int amType() {
        return AM_TYPE;
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TimeResp> \n";
      s += "  [source_addr=0x"+Long.toHexString(get_source_addr())+"]\n";
      s += "  [timeH=0x"+Long.toHexString(get_timeH())+"]\n";
      s += "  [timeL=0x"+Long.toHexString(get_timeL())+"]\n";
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source_addr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source_addr' is signed (false).
     */
    public static boolean isSigned_source_addr() {
        return false;
    }

    /**
     * Return whether the field 'source_addr' is an array (false).
     */
    public static boolean isArray_source_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source_addr'
     */
    public static int offset_source_addr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source_addr'
     */
    public static int offsetBits_source_addr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'source_addr'
     */
    public int get_source_addr() {
        return (int)getUIntElement(offsetBits_source_addr(), 16);
    }

    /**
     * Set the value of the field 'source_addr'
     */
    public void set_source_addr(int value) {
        setUIntElement(offsetBits_source_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source_addr'
     */
    public static int size_source_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source_addr'
     */
    public static int sizeBits_source_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeH
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeH' is signed (false).
     */
    public static boolean isSigned_timeH() {
        return false;
    }

    /**
     * Return whether the field 'timeH' is an array (false).
     */
    public static boolean isArray_timeH() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeH'
     */
    public static int offset_timeH() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeH'
     */
    public static int offsetBits_timeH() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'timeH'
     */
    public long get_timeH() {
        return (long)getUIntElement(offsetBits_timeH(), 32);
    }

    /**
     * Set the value of the field 'timeH'
     */
    public void set_timeH(long value) {
        setUIntElement(offsetBits_timeH(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeH'
     */
    public static int size_timeH() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeH'
     */
    public static int sizeBits_timeH() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeL
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeL' is signed (false).
     */
    public static boolean isSigned_timeL() {
        return false;
    }

    /**
     * Return whether the field 'timeL' is an array (false).
     */
    public static boolean isArray_timeL() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeL'
     */
    public static int offset_timeL() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeL'
     */
    public static int offsetBits_timeL() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'timeL'
     */
    public long get_timeL() {
        return (long)getUIntElement(offsetBits_timeL(), 32);
    }

    /**
     * Set the value of the field 'timeL'
     */
    public void set_timeL(long value) {
        setUIntElement(offsetBits_timeL(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeL'
     */
    public static int size_timeL() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeL'
     */
    public static int sizeBits_timeL() {
        return 32;
    }

}
