TOSSIM CC2420 Radio Simulation Project

Introduction:

- This directory contains components that engage a prototype emulator of
  the CC2420 transceiver hardware.

Usage notes:

- To use this instead of the standard AVR radio simulation, simply
  compile your application with:

    make pc sim,<platform>

  where <platform> is either telos or micaz.

- No changes to the Makefile are needed.

- For debug output, include "packet" in your DBG flag.

TinyViz notes:

- First, build the Telos version of net.tinyos.message.telos.TOSMsg. To do
  this, first look at net/tinyos/message/telos/Makefile. You should see this
  comment:

    #TO REMAKE BaseTOSMsg, uncomment the line below and type make telos msg
    #include $(TOS)/../apps/Makerules

  Make sure that the line is actually commented out, and run "make" from that
  directory. (If you don't, a BaseTOSMsg will be regenerated by MIG when you
  run "make telos msg". Unfortunately, this new BaseTOSMsg will not inherit
  from net.tinyos.message.TOSMsg, but directly from net.tinyos.message.Message.
  This is will cause class cast exceptions because TinyViz will expect
  net.tinyos.message.telos.TOSMsg to be a subclass of
  net.tinyos.message.TOSMsg.)

- Now that you have .class files in net/tinyos/message/telos/, rebuild
  TinyViz to include them. To do this, edit net/tinyos/sim/Makefile by
  inserting this path under the rule for "jarfile: plugins/plugins.list":

                net/tinyos/message/telos/*.class        \

  Then run make from that directory. Now TinyViz supports the TOSMsg format
  used by Telos.

- To use TinyViz with this, run tinyviz from a directory containing the
  platform.properties file in this directory. Due to TinyViz's quirky
  behavior, if you'd like to use the SetLocations/RadioLinks plugins,
  make sure you activate those first before you attach to the TOSSIM
  instance, which you should start with. So:

  1. Run tinyviz from a directory containing platforms.properties.
  2. Enable the RadioLinks plugin and the SetLocations plugin.
  3. Run main.exe with the -gui option.
  4. Click the "connect" button in TinyViz.
  5. Start the simulation.

General notes (description & features):

- This component exposes the HPLCC2420 interface to the CC2420 radio stack
  (in tos/lib/CC2420Radio/).

- Simulation of packet transmission takes place on a packet-segment level.
  That is, there are events for the start of the preamble, the start of
  the frame, the end of the address field, and the end of the packet.

- All motes are able to hear packets. Clear channel assessment, address
  recognition, and auto-acking are implemented.

- Most of the constants (timing, energy levels, etc.) are drawn from the
  datasheet.

- The contents of ACK packets were obtained by sniffing packets with
  the CC2420DBK packet sniffer.

- The simulation contains a hardware.c and hardware.nido.h which override
  the default versions of these files in tos/platform/pc. These include
  the CC2420 pin assignments (in hardware.niod.h), as well as changes to
  the macro handler functions so that they behave correctly (in
  hardware.c).

- For the second argument to make ("sim,<platform>"), we introduced
  tools/make/pc/sim.extra. This is to avoid the need to reconfigure the
  Makefile.

- The CC2420 provides LQI and RSSI readings to the packet. The simulator
  generates these numbers and packet loss probabilities based on
  empirical data over distance, so the simulation depends on the ADC
  readings that contain the (X,Y) locations of the motes (which can
  be set using the SetLocations plugin for TinyViz).

- The simulation sends TinyViz event messages for successfully received
  non-ACK packets, so it works with RadioLinks plugin for TinyViz.

- The AM.h that is used here is the same as the AM.h in the telos
  platform directory.

- The simulation has a test suite app, TestPC2420. It has also been
  tested with SurgeTelos using LQIMultihopRoute (but without Deluge).

- The simulation has been tested on both Linux and Windows.

General action items:

- Fix the 256+ node bug. The simulator runs into an inconsistent state
  when simulating more than 256 nodes. In particular, for certain nodes,
  when the number of channel sources drops to 0, the channel energy does
  not become 0.

- Sample from a normal distribution when generating random LQI and RSSI
  numbers.

- Implement more of the command strobes (only a few are supported right
  now - namely, the ones that are used in CC2420Radio).

- Resolve all the TODO issues in the code.

- Look into whether we can generate LQI and RSSI from the packet loss
  properties alone, so that we can continue working with the TinyViz
  model and won't have to rely on distance.

Contacts:

- Project members/groups (people to email with questions/changes):
         Joe Polastre (UC Berkeley) <polastre@cs.berkeley.edu>
         Yang Zhang (UC Berkeley) <yang.zhang@overbored.net>

